{"name":"Regeneration","type":"script","author":"C1tc77zu6CecTMux","img":"icons/svg/regen.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Regeneration\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Modifikator</label>\n        <input type='number' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll\",\n      callback: async (html) => {\n\t\tconst modResult = html.find('[id=\"modField\"]').val();\n\t\tlet mod = 0;\n\t\tif(modResult !== '') {\n\t\t\tmod = Number(modResult);\n\t\t}\n        \n\t\tconst result = await regenerate(currentActor, mod);\n\t\tawait createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 250\n}).render(true);\n\n\nasync function regenerate(actor, mod){\n  const lepResult = await regenerateLep(currentActor, mod);\n  const auResult = await regenerateAu(currentActor);\n  const aspResult = await regenerateAsp(currentActor, mod);\n\n  return {\n\tactor: actor,\n\tmod: mod,\n    lep: lepResult,\n    au: auResult,\n    asp: aspResult,\n  }\n}\n\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//--------LeP Regeneration--------//\n////////////////////////////////////\nasync function regenerateLep(actor, mod){\n  const resource = actor.data.data.base.resources['vitality'];\n  if(resource.value >= resource.max) {\n    return undefined;\n  }\n\n  const bonusResult = await getLepBonus(actor);\n  const regObject = {\n\tresource: resource, \n\tmod: Number(mod) + Number(bonusResult.mod),\n  };\n  const resourceResult = await regenerateResource(regObject, false); \n  const healedWounds = await tryHealWounds(actor, resourceResult.total);\n  \n  await actor.update({_id: actor._id, 'data.base.resources.vitality.value': resourceResult.newValue});\n  return {\n    bonus: bonusResult,\n\tresource: resourceResult,\n\thealedWounds: healedWounds,\n  }\n}\n\nasync function getLepBonus(actor) {\n  let mod = 0;\n  const attributeValue = getAttributeValue(actor, 'constitution')\n  const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n  if(isSuccessfull) {\n    mod += 1;\n  }\n  \n  mod += getVitalitySpecialAbilitiesMod(actor);\n  return {\n\tmod: mod,\n    attributeValue: attributeValue,\n   \trollResult: rollResult,\n    isRollSuccessfull: isSuccessfull\n  };\n}\n\nfunction getVitalitySpecialAbilitiesMod(actor){\n  const items = [...actor.items.values()];\n  let mod = 0;\n \n  const schnelleHeilung = items.filter(i => i.data.name === 'Schnelle Heilung');\n  if(schnelleHeilung.length > 0){\n    mod += schnelleHeilung[0].data.value;\n  }\n \n  if(items.filter(i => i.data.name === 'Schlechte Regeneration').length > 0){\n    mod -= 1;\n  }\n\n  return mod;\n}\n\nasync function tryHealWounds(actor, healValue){\n  const healTreshold = 7;\n  if(healValue < healTreshold){\n    return 0;\n  }\n  \n  let woundHealCount = Math.floor(healValue / healTreshold);  \n  let wounds = actor\n    .getEmbeddedCollection(\"ActiveEffect\")\n    .filter(e => e.data.label == 'Wunde');\n\n  if(!wounds || wounds.length < 1) {\n    return 0;\n  }\t\n\n  if(woundHealCount > wounds.length) {\n    woundHealCount = wounds.length;\n  }\n\n  wounds = wounds.slice(0, woundHealCount);\n  const ids = wounds.map(w => w.data._id);\n  await actor.deleteEmbeddedDocuments(\"ActiveEffect\", ids);\n  \n  return woundHealCount;\n}\n\n\n////////////////////////////////////\n//--------AU Regeneration---------//\n////////////////////////////////////\nasync function regenerateAu(actor){\n  const resource = actor.data.data.base.resources['endurance'];\n  if(resource.value >= resource.max) {\n    return undefined;\n  }\n\n  const regObject = {\n\tresource: resource, \n\tmod: 0,\n  };\n  const resourceResult = await regenerateResource(regObject, true); \n  \n  await actor.update({_id: actor._id, 'data.base.resources.endurance.value': resourceResult.newValue});\n  return {\n    bonus: undefined,\n\tresource: resourceResult,\n\thealedWounds: 0,\n  }\n}\n\n\n////////////////////////////////////\n//--------AsP Regeneration--------//\n////////////////////////////////////\nasync function regenerateAsp(actor, mod){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  if(resource.value >= resource.max) {\n    return undefined;\n  }\n\n  const bonusResult = await getAspBonus(actor);\n  const regObject = {\n\tresource: resource, \n\tmod: Number(mod) + Number(bonusResult.mod),\n  };\n  \n  let resourceResult\n  if(hasMeisterlicheRegeneration(actor)) {\n    resourceResult = await meisterlicheRegeneration(actor, regObject);\n  } else {\n    resourceResult = await regenerateResource(regObject, false); \n  }\n\n  await actor.update({_id: actor._id, 'data.base.resources.astralEnergy.value': resourceResult.newValue});\n  return {\n    bonus: bonusResult,\n\tresource: resourceResult,\n\thealedWounds: 0,\n  }\n}\n\nasync function getAspBonus(actor) {\n  let mod = 0;\n  const attributeValue = getAttributeValue(actor, 'intuition')\n  const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n  if(isSuccessfull) {\n    mod += 1;\n  }\n  mod += getAstralSpecialAbilitiesMod(actor);\n\n  return {\n\tmod: mod,\n    attributeValue: attributeValue,\n   \trollResult: rollResult,\n    isRollSuccessfull: isSuccessfull\n  };\n}\n\nfunction getAstralSpecialAbilitiesMod(actor){\n  const items = [...actor.items.values()];\n  let mod = 0;\n \n  const astraRegeneration = items.filter(i => i.data.name === 'Astrale Regeneration');\n  if(astraRegeneration.length > 0){\n    mod += astraRegeneration[0].data.value;\n  }\n \n  if(items.filter(i => i.data.name === 'Regeneration I').length > 0){\n    mod += 1;\n  }\n\n  if(items.filter(i => i.data.name === 'Regeneration II').length > 0){\n    mod += 1;\n  }\n\n  if(items.filter(i => i.data.name === 'Meisterliche Regeneration').length > 0){\n    mod += 1;\n  }\n\n  if(items.filter(i => i.data.name === 'Astraler Block').length > 0){\n    mod -= 1;\n  }\n\n  return mod;\n}\n\nfunction hasMeisterlicheRegeneration(actor){\n  const items = [...actor.items.values()];\n  if(items.filter(i => i.data.name === 'Meisterliche Regeneration').length > 0){\n    return true;\n  }\n  \n  return false;\n}\n\nasync function meisterlicheRegeneration(actor, obj) {\n  const attributeValue = getAttributeValue(actor, 'intuition')\n  const total = Math.round(attributeValue / 3) + obj.mod;\n  \n  const previousValue = obj.resource.value;\n  const newValue = await getNewResourceValue(obj, total);\n\n  return {\n\ttotal: total,\n    oldValue: previousValue,\n\tnewValue: newValue,\n\tsetFull: false,\n  };\n}\n\n\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\nasync function rollD6(){\n  const roll = await new Roll(`1d6`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\nasync function isAttributeBonusSuccessfull(attributeValue) {\n  const roll = await new Roll(`1d20cs<=${attributeValue}`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return [result, roll.total];\n}\n\nasync function regenerateResource(obj, setFull) {\n  let total = 0;\n  if(setFull) {\n    total = 10000;\n  } else {\n    total = (await rollD6()) + obj.mod;\n  }\n\n  const previousValue = obj.resource.value;\n  const newValue = await getNewResourceValue(obj, total);\n\n  return {\n\ttotal: total,\n    oldValue: previousValue,\n\tnewValue: newValue,\n\tsetFull: setFull\n  };\n}\n\nasync function getNewResourceValue(obj, value) {\n  if((obj.resource.value + value) < obj.resource.max){\n    return obj.resource.value + value;\n  }\n  \n  return obj.resource.max;\n}\n\nasync function createChatMessage(result) {\n  let content = `<div style=\"font-weight: bold\">${result.actor.name}</div>`;\n  if(result.lep) {\n   const bonus = result.lep.bonus;\n   const bonusResultText = bonus.isRollSuccessfull === 1 ? '' : 'nicht';\n   content += `<div>KO-Probe war ${bonusResultText}erfolgreich (${bonus.attributeValue - bonus.rollResult})</div>`;\n  }\n  \n  if(result.asp) {\n   const bonus = result.asp.bonus;\n   const bonusResultText = bonus.isRollSuccessfull === 1 ? '' : 'nicht';\n   content += `<div>IN-Probe war ${bonusResultText} erfolgreich (${bonus.attributeValue - bonus.rollResult})</div>`;\n  }\n  \n  if(result.lep) {\n   const resource = result.lep.resource;\n   content += `<div style=\"margin-top: 20px; font-weight: bold\">LeP regeneriert: ${resource.total} (${resource.oldValue} -> ${resource.newValue})</div>`;\n  }\n  \n  if(result.au) {\n   const resource = result.au.resource;\n   content += `<div style=\"font-weight: bold\">AU regeneriert (${resource.oldValue} -> ${resource.newValue})</div>`;\n  }\n  \n  if(result.asp) {\n   const resource = result.asp.resource;\n   content += `<div style=\"font-weight: bold\">AsP regeneriert: ${resource.total} (${resource.oldValue} -> ${resource.newValue})</div>`;\n  }\n  \n  if(result.lep) {\n\tconst wounds = result.lep.healedWounds;\n    if(wounds > 0) {\n      if(wounds === 1) {\n        content += `<div style=\"font-weight: bold\">Eine Wunde wurde geschlossen</div>`;\n      } else {\n        content += `<div style=\"font-weight: bold\">${wounds} Wunden wurden geschlossen</div>`;\n      }\n    }\n  }\n  \n  if(!result.lep && !result.au && !result.asp) {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Bereits vollständig regeneriert :)</div>`;\n  }\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"C1tc77zu6CecTMux":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.6qhiO18RUYdiqnZC"}},"_id":"0OXJsWZNXcXBWXJH"}
{"_id":"0oI3Ml3fbIuWSxsU","name":"New Macro","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/dice-target.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst name = currentActor.data.name;\nconst attributeKO = currentActor.data.data.base.basicAttributes['constitution'].value;\nconst astralEnergyResource = currentActor.data.data.base.resources['astralEnergy'];\nconst doAspRegeneration =  astralEnergyResource.max > 0;\nlet content = `<div>${name}</div>`\n\nconst [lepMod, lepModText] = await getLepBonusResult(currentActor);\nconst lepRoll = await rollD6();\n\nconst lepTotal = lepRoll + lepMod;\ncontent += lepModText;\ncontent += `<div style=\"margin-top: 20px;font-weight: bold\">LeP regeneriert: ${lepTotal}</div>`;\n\nChatMessage.create({\n  user : game.user._id,\n  content: content,\n});\n\n\n// LeP Regeneration\nasync function getLepBonusResult(actor) {\n let lepMod = 0;\n let resultText = '';\n const attributeValue = getAttributeValue(actor, 'constitution')\n const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n if(isAttributeBonusSuccessfull) {\n\tlepMod += 1;\n }\n else {\n   resultText = `nicht `;\n }\n \n const text = `<div>KO-Probe war ${resultText}erfolgreich (${attributeValue - rollResult})</div>`\n return [lepMod, text];\n}\n\n\n// Generic Functions\nasync function rollD6(){\n  const roll = await new Roll(`1d6`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\nasync function isAttributeBonusSuccessfull(attributeValue) {\n  const roll = await new Roll(`1d20cs<=${attributeValue}`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return [result, roll.total];\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"_id":"10IzZ1Z7qzk1Y3br","name":"New Macro","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/dice-target.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Regeneration\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Modifikator</label>\n        <input type='number' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll\",\n      callback: async (html) => {\n\t\tconst modResult = html.find('[id=\"modField\"]').val();\n\t\tlet mod = 0;\n\t\tif(modResult !== '') {\n\t\t\tmod = Number(modResult);\n\t\t}\n        \n\t\tconst result = await regenerate(currentActor, mod);\n\t\tawait createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 250\n}).render(true);\n\n\nasync function regenerate(actor, mod){\n  const lepResult = await regenerateLep(currentActor, mod);\n  const auResult = await regenerateAu(currentActor);\n  const aspResult = await regenerateAsp(currentActor, mod);\n\n  return {\n\tactor: actor,\n\tmod: mod,\n    lep: lepResult,\n    au: auResult,\n    asp: aspResult,\n  }\n}\n\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//--------LeP Regeneration--------//\n////////////////////////////////////\nasync function regenerateLep(actor, mod){\n  const resource = actor.data.data.base.resources['vitality'];\n  if(resource.value >= resource.max) {\n    return undefined;\n  }\n\n  const bonusResult = await getLepBonus(actor);\n  const regObject = {\n\tresource: resource, \n\tmod: Number(mod) + Number(bonusResult.mod),\n  };\n  const resourceResult = await regenerateResource(regObject, false); \n  const healedWounds = await tryHealWounds(actor, resourceResult.total);\n  \n  await actor.update({_id: actor._id, 'data.base.resources.vitality.value': resourceResult.newValue});\n  return {\n    bonus: bonusResult,\n\tresource: resourceResult,\n\thealedWounds: healedWounds,\n  }\n}\n\nasync function getLepBonus(actor) {\n  let mod = 0;\n  const attributeValue = getAttributeValue(actor, 'constitution')\n  const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n  if(isSuccessfull) {\n    mod += 1;\n  }\n  \n  return {\n\tmod: mod,\n    attributeValue: attributeValue,\n   \trollResult: rollResult,\n    isRollSuccessfull: isSuccessfull\n  };\n}\n\nasync function tryHealWounds(actor, healValue){\n  const healTreshold = 7;\n  if(healValue < healTreshold){\n    return 0;\n  }\n  \n  let woundHealCount = Math.floor(healValue / healTreshold);  \n  let wounds = actor\n    .getEmbeddedCollection(\"ActiveEffect\")\n    .filter(e => e.data.label == 'Wunde');\n\n  if(!wounds || wounds.length < 1) {\n    return 0;\n  }\t\n\n  if(woundHealCount > wounds.length) {\n    woundHealCount = wounds.length;\n  }\n\n  wounds = wounds.slice(0, woundHealCount);\n  const ids = wounds.map(w => w.data._id);\n  await actor.deleteEmbeddedDocuments(\"ActiveEffect\", ids);\n  \n  return woundHealCount;\n}\n\n\n////////////////////////////////////\n//--------AU Regeneration---------//\n////////////////////////////////////\nasync function regenerateAu(actor){\n  const resource = actor.data.data.base.resources['endurance'];\n  if(resource.value >= resource.max) {\n    return undefined;\n  }\n\n  const regObject = {\n\tresource: resource, \n\tmod: 0,\n  };\n  const resourceResult = await regenerateResource(regObject, true); \n  \n  await actor.update({_id: actor._id, 'data.base.resources.endurance.value': resourceResult.newValue});\n  return {\n    bonus: undefined,\n\tresource: resourceResult,\n\thealedWounds: 0,\n  }\n}\n\n\n////////////////////////////////////\n//--------AsP Regeneration--------//\n////////////////////////////////////\nasync function regenerateAsp(actor, mod){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  if(resource.value >= resource.max) {\n    return undefined;\n  }\n\n  const bonusResult = await getAspBonus(actor);\n  const regObject = {\n\tresource: resource, \n\tmod: Number(mod) + Number(bonusResult.mod),\n  }; \n  const resourceResult = await regenerateResource(regObject, false); \n  \n  await actor.update({_id: actor._id, 'data.base.resources.astralEnergy.value': resourceResult.newValue});\n  return {\n    bonus: bonusResult,\n\tresource: resourceResult,\n\thealedWounds: 0,\n  }\n}\n\nasync function getAspBonus(actor) {\n  let mod = 0;\n  const attributeValue = getAttributeValue(actor, 'intuition')\n  const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n  if(isSuccessfull) {\n    mod += 1;\n  }\n  \n  mod += getAstralSpecialAbilitiesMod(actor);\n  return {\n\tmod: mod,\n    attributeValue: attributeValue,\n   \trollResult: rollResult,\n    isRollSuccessfull: isSuccessfull\n  };\n}\n\nfunction getAstralSpecialAbilitiesMod(actor){\n  const items = [...actor.items.values()];\n  let mod = 0;\n \n  const astraRegeneration = items.filter(i => i.data.name === 'Astrale Regeneration');\n  if(astraRegeneration.length > 0){\n    mod += astraRegeneration[0].data.value;\n  }\n \n  if(items.filter(i => i.data.name === 'Regeneration I')){\n    mod += 1;\n  }\n  if(items.filter(i => i.data.name === 'Regeneration II')){\n    mod += 1;\n  }\n\n  return mod;\n}\n\n\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\nasync function rollD6(){\n  const roll = await new Roll(`1d6`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\nasync function isAttributeBonusSuccessfull(attributeValue) {\n  const roll = await new Roll(`1d20cs<=${attributeValue}`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return [result, roll.total];\n}\n\nasync function regenerateResource(obj, setFull) {\n  let total = 0;\n  if(setFull) {\n    total = 10000;\n  } else {\n    total = (await rollD6()) + obj.mod;\n  }\n\n  const previousValue = obj.resource.value;\n  const newValue = await getNewResourceValue(obj, total);\n\n  return {\n\ttotal: total,\n    oldValue: previousValue,\n\tnewValue: newValue,\n\tsetFull: setFull\n  };\n}\n\nasync function getNewResourceValue(obj, value) {\n  if((obj.resource.value + value) < obj.resource.max){\n    return obj.resource.value + value;\n  }\n  \n  return obj.resource.max;\n}\n\nasync function createChatMessage(result) {\n  let content = `<div>${result.actor.name}</div>`;\n  if(result.lep) {\n   const bonus = result.lep.bonus;\n   const bonusResultText = bonus.isRollSuccessfull === 1 ? '' : 'nicht';\n   content += `<div>KO-Probe war ${bonusResultText}erfolgreich (${bonus.attributeValue - bonus.rollResult})</div>`;\n  }\n  \n  if(result.asp) {\n   const bonus = result.asp.bonus;\n   const bonusResultText = bonus.isRollSuccessfull === 1 ? '' : 'nicht';\n   content += `<div>IN-Probe war ${bonusResultText} erfolgreich (${bonus.attributeValue - bonus.rollResult})</div>`;\n  }\n  \n  if(result.lep) {\n   const resource = result.lep.resource;\n   content += `<div style=\"margin-top: 20px; font-weight: bold\">LeP regeneriert: ${resource.total} (${resource.oldValue} -> ${resource.newValue})</div>`;\n  }\n  \n  if(result.au) {\n   const resource = result.au.resource;\n   content += `<div style=\"font-weight: bold\">AU regeneriert (${resource.oldValue} -> ${resource.newValue})</div>`;\n  }\n  \n  if(result.asp) {\n   const resource = result.asp.resource;\n   content += `<div style=\"font-weight: bold\">AsP regeneriert: ${resource.total} (${resource.oldValue} -> ${resource.newValue})</div>`;\n  }\n  \n  if(result.lep) {\n\tconst wounds = result.lep.healedWounds;\n    if(wounds > 0) {\n      if(wounds === 1) {\n        content += `<div style=\"font-weight: bold\">Eine Wunde wurde geschlossen</div>`;\n      } else {\n        content += `<div style=\"font-weight: bold\">${wounds} Wunden wurden geschlossen</div>`;\n      }\n    }\n  }\n  \n  if(!result.lep && !result.au && !result.asp) {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Bereits vollständig regeneriert :)</div>`;\n  }\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{}}
{"name":"Vollständige Regeneration inklusive Schicksalspunkte","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/regen_all.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nawait regenerate(currentActor);\n\n\n\nasync function regenerate(actor){\n  regenerateLep(currentActor);\n  regenerateAu(currentActor);\n  regenerateAsp(currentActor);\n  regenerateKap(currentActor);\n  healWounds(currentActor);\n  resetSchicksalspunkte(currentActor);\n\n  const content = `<div>${currentActor.data.name} hat vollständig regeneriert</div>`;\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\n// LeP Regeneration\nfunction regenerateLep(actor){\n  const resource = currentActor.data.data.base.resources['vitality'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.vitality.value': newValue});\n}\n\n// AU Regeneration\nfunction regenerateAu(actor){\n  const resource = currentActor.data.data.base.resources['endurance'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.endurance.value': newValue});\n}\n\n\n// AsP Regeneration\nfunction regenerateAsp(actor){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.astralEnergy.value': newValue});\n}\n\n// KaP Regeneration\nfunction regenerateKap(actor){\n  const resource = actor.data.data.base.resources['karmicEnergy'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.karmicEnergy.value': newValue});\n}\n\n// Wunden heilen\nfunction healWounds(actor){\n  const wounds = actor\n    .getEmbeddedCollection(\"ActiveEffect\")\n    .filter(e => e.data.label == 'Wunde');\n\n  const ids = wounds.map(w => w.data._id);\n\n  actor.deleteEmbeddedDocuments( \n    \"ActiveEffect\", \n    ids);\n}\n\n\n// Schicksalspunkte zurücksetzen\nfunction resetSchicksalspunkte(actor) {\n  try {\n    actor.data.data.base.resources['schicksalspunkte'].value;\n  } catch {\n    actor.data.data.base.resources['schicksalspunkte'] = {value: 3, min: 0, max: 3};\n    return;\n  }\n  \n  const resource = actor.data.data.base.resources['schicksalspunkte'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.value': newValue});\n}\n\n\n\n// Generic Functions\nfunction regenerateResource(resource) {\n  resource.value = resource.max;\n  \n  return resource.max;\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.Bkhs4rIfWMYWngag"}},"_id":"1Ae8OvoPFpCObhtb"}
{"_id":"1IBZFtHrsMw1KIoS","name":"Würfel rotieren: ↓ (Z)","type":"script","author":"4iG9cHcL1pAPAzDk","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-curve-left_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationZ';\nconst rotationStep = -90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('Z-');","folder":"H9tUqbcCUC0lQyzF","sort":100000,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"name":"Abenteuerpunkte setzen","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/xp_set.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Abenteuerpunkte setzen\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl</label>\n        <input type='text' id=\"abtPktField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n        const abtPktField = html.find('[id=\"abtPktField\"]').val();\n        let abtPktValue = 0;\n        if(abtPktField !== '') {\n          abtPktValue = abtPktField;\n        }\n\n        if(abtPktValue < 0) {\n          return;\n        }\n        \n        const abtPktObj = {\n          actor: currentActor,\n          value: abtPktValue,\n        };\n        \n        const resultAbt = await setAbenteuerpunkte(abtPktObj);\n        const resultSch = await setSchicksalspunkte(abtPktObj);\n        \n        const result = {\n          actor: currentActor,\n          newAbtPkt: resultAbt.newAbtPkt,\n          newSchPkt: resultSch.newSchPkt,\n        };\n        \n        await createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n/////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\n\n/////////////////////////////\n//-Abenteuerpunkte  Basis-//\n/////////////////////////////\n\nasync function getAbenteuerpunkte(actor, defaultValue) {\n  try {\n    const schPkt = actor.data.data.base.resources['abenteuerpunkte'].value;\n    return schPkt;\n  } catch {\n    console.log('Creating Abenteuerpunkte attribute');\n    \n    actor.data.data.base.resources['abenteuerpunkte'] = {value: defaultValue, min: 0, max: defaultValue};\n  \n    return defaultValue;  \n  }\n}\n\nasync function setAbenteuerpunkte(abtPktObj) {\n  await getAbenteuerpunkte(abtPktObj.actor, abtPktObj.value);\n  \n  await actor.update({_id: actor._id, 'data.base.resources.abenteuerpunkte.value': abtPktObj.value});\n  await actor.update({_id: actor._id, 'data.base.resources.abenteuerpunkte.max': abtPktObj.value});\n  \n  return {\n    actor: abtPktObj.actor,\n    newAbtPkt: abtPktObj.value,\n  };\n}\n\n\n\n/////////////////////////////\n//-Schicksalspunkte  Basis-//\n/////////////////////////////\n\nasync function getSchicksalspunkte(actor, defaultValue) {\n  try {\n    const schPkt = actor.data.data.base.resources['schicksalspunkte'].value;\n    return schPkt;\n  } catch {\n    console.log('Creating Schicksalspunkte attribute');\n    \n    actor.data.data.base.resources['schicksalspunkte'] = {value: defaultValue, min: 0, max: defaultValue};\n  \n    return defaultValue;  \n  }\n}\n\nasync function setSchicksalspunkte(schPktObj) {\n  const actor = schPktObj.actor;\n  \n  const schPktValue = calculateSchicksalspunkte(schPktObj.value);\n  await getSchicksalspunkte(actor, schPktValue);\n  \n  await schPktObj.actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.value': schPktValue});\n  await schPktObj.actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.max': schPktValue});\n  \n  return {\n    actor: actor,\n    newSchPkt: schPktValue,\n  };\n}\n\nfunction calculateSchicksalspunkte(abtPktValue) {\n  const floatValue = (abtPktValue / 500) + 2;\n  return floatValue | 0;\n}\n\n\n\n/////////////////////////////\n//------Chat  Message------//\n/////////////////////////////\n\nasync function createChatMessage(abtPktResult) {\n  let content = `<div>${abtPktResult.actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">Abenteuerpunkte gesetzt: (${abtPktResult.newAbtPkt})</div>`;\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">Schicksalspunkte gesetzt: (${abtPktResult.newSchPkt})</div>`;\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.W6s8wNqKu8hESeGp"}},"_id":"1iVNfkv4vhEuwwpg"}
{"_id":"2c0c4T9wNJ0vjV7X","name":"Schicksalspunkte  aktualisieren","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/dice-target.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Abenteuerpunkte setzen\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl</label>\n        <input type='text' id=\"abtPktField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n        const abtPktField = html.find('[id=\"abtPktField\"]').val();\n        let abtPktValue = 0;\n        if(abtPktField !== '') {\n          abtPktValue = abtPktField;\n        }\n\n        if(abtPktValue < 0) {\n          return;\n        }\n        \n        const abtPktObj = {\n          actor: currentActor,\n          value: abtPktValue,\n        };\n        \n        const resultAbt = await setAbenteuerpunkte(abtPktObj);\n        const resultSch = await setSchicksalspunkte(abtPktObj);\n        \n        const result = {\n          actor: currentActor,\n          newAbtPkt: resultAbt.newAbtPkt,\n          newSchPkt: resultSch.newSchPkt,\n        };\n        \n        await createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n/////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\n\n/////////////////////////////\n//-Abenteuerpunkte  Basis-//\n/////////////////////////////\n\nasync function getAbenteuerpunkte(actor, defaultValue) {\n  try {\n    const schPkt = actor.data.data.base.resources['abenteuerpunkte'].value;\n    return schPkt;\n  } catch {\n    console.log('Creating Abenteuerpunkte attribute');\n    \n    actor.data.data.base.resources['abenteuerpunkte'] = {value: defaultValue, min: 0, max: defaultValue};\n  \n    return defaultValue;  \n  }\n}\n\nasync function setAbenteuerpunkte(abtPktObj) {\n  await getAbenteuerpunkte(abtPktObj.actor, abtPktObj.value);\n  \n  await actor.update({_id: actor._id, 'data.base.resources.abenteuerpunkte.value': abtPktObj.value});\n  await actor.update({_id: actor._id, 'data.base.resources.abenteuerpunkte.max': abtPktObj.value});\n  \n  return {\n    actor: abtPktObj.actor,\n    newAbtPkt: abtPktObj.value,\n  };\n}\n\n\n\n/////////////////////////////\n//-Schicksalspunkte  Basis-//\n/////////////////////////////\n\nasync function getSchicksalspunkte(actor, defaultValue) {\n  try {\n    const schPkt = actor.data.data.base.resources['schicksalspunkte'].value;\n    return schPkt;\n  } catch {\n    console.log('Creating Schicksalspunkte attribute');\n    \n    actor.data.data.base.resources['schicksalspunkte'] = {value: defaultValue, min: 0, max: defaultValue};\n  \n    return defaultValue;  \n  }\n}\n\nasync function setSchicksalspunkte(schPktObj) {\n  const actor = schPktObj.actor;\n  \n  const schPktValue = calculateSchicksalspunkte(schPktObj.value);\n  await getSchicksalspunkte(actor, schPktValue);\n  \n  await schPktObj.actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.value': schPktValue});\n  await schPktObj.actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.max': schPktValue});\n  \n  return {\n    actor: actor,\n    newSchPkt: schPktValue,\n  };\n}\n\nfunction calculateSchicksalspunkte(abtPktValue) {\n  const floatValue = (abtPktValue / 500) + 2;\n  return floatValue | 0;\n}\n\n\n\n/////////////////////////////\n//------Chat  Message------//\n/////////////////////////////\n\nasync function createChatMessage(abtPktResult) {\n  let content = `<div>${abtPktResult.actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">Abenteuerpunkte gesetzt: (${abtPktResult.newAbtPkt})</div>`;\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">Schicksalspunkte gesetzt: (${abtPktResult.newSchPkt})</div>`;\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"name":"Unbewaffneter Nahkampfpatzer","type":"chat","author":"YlqspvRz6sU17MVo","img":"icons/svg/criticalfail_unarmedcombat.svg","scope":"global","command":"const table = game.tables.find(t => t.data.name === 'Unbewaffneter Nahkampfpatzer');\ntable.draw();","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"core":{"sourceId":"Macro.OVEPy7cn8QCTcgzq"}},"_id":"2wZx50qiRVAgWwnp"}
{"_id":"3QQ5gKx6kxlbq0bA","name":"New Macro","type":"chat","author":"llLOJOQw8eeTLl9B","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":100000,"permission":{"default":0,"llLOJOQw8eeTLl9B":3},"flags":{}}
{"name":"Würfel rotieren: ↑ (Z)","type":"script","author":"llLOJOQw8eeTLl9B","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-curve-right_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationZ';\nconst rotationStep = 90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('Z+');","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.bYVB2vXoaTuBua6F"}},"_id":"3lEPnLU3YvhnHSl6"}
{"name":"Würfel rotieren: Y↓","type":"script","author":"llLOJOQw8eeTLl9B","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-left_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationY';\nconst rotationStep = 90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('Y-');","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.ycB48DZSiqISGqOw"}},"_id":"5hQRrmZC2O0qumid"}
{"_id":"6gVsamEyxCHooXeS","name":"Vollständige Regeneration","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/heal.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nawait regenerate(currentActor);\n\n\n\nasync function regenerate(actor){\n  const name = currentActor.data.name;\n  let content = `<div>${name} hat vollständig regeneriert</div>`;\n\n  regenerateLep(currentActor);\n  regenerateAu(currentActor);\n  regenerateAsp(currentActor);\n  regenerateKap(currentActor);\n  healWounds();\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\n// LeP Regeneration\nfunction regenerateLep(actor){\n  const resource = currentActor.data.data.base.resources['vitality'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.vitality.value': newValue});\n}\n\n// AU Regeneration\nfunction regenerateAu(actor){\n  const resource = currentActor.data.data.base.resources['endurance'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.endurance.value': newValue});\n}\n\n\n// AsP Regeneration\nfunction regenerateAsp(actor){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.astralEnergy.value': newValue});\n}\n\n// KaP Regeneration\nfunction regenerateKap(actor){\n  const resource = actor.data.data.base.resources['karmicEnergy'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.karmicEnergy.value': newValue});\n}\n\n// Wunden heilen\nfunction healWounds(){\nconst wounds = currentActor\n.getEmbeddedCollection(\"ActiveEffect\")\n.filter(e => e.data.label == 'Wunde');\n\nconst ids = wounds.map(w => w.data._id);\n\ncurrentActor\n.deleteEmbeddedDocuments( \n  \"ActiveEffect\", \n  ids);\n}\n\n\n\n// Generic Functions\nfunction regenerateResource(resource) {\n  resource.value = resource.max;\n  \n  return resource.max;\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.Bkhs4rIfWMYWngag"}}}
{"_id":"6qhiO18RUYdiqnZC","name":"Regeneration","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/regen.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Regeneration\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Modifikator</label>\n        <input type='number' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll\",\n      callback: async (html) => {\n\t\tconst modResult = html.find('[id=\"modField\"]').val();\n\t\tlet mod = 0;\n\t\tif(modResult !== '') {\n\t\t\tmod = Number(modResult);\n\t\t}\n        \n\t\tconst result = await regenerate(currentActor, mod);\n\t\tawait createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 250\n}).render(true);\n\n\nasync function regenerate(actor, mod){\n  const lepResult = await regenerateLep(currentActor, mod);\n  const auResult = await regenerateAu(currentActor);\n  const aspResult = await regenerateAsp(currentActor, mod);\n\n  return {\n\tactor: actor,\n\tmod: mod,\n    lep: lepResult,\n    au: auResult,\n    asp: aspResult,\n  }\n}\n\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//--------LeP Regeneration--------//\n////////////////////////////////////\nasync function regenerateLep(actor, mod){\n  const resource = actor.data.data.base.resources['vitality'];\n  if(resource.value >= resource.max) {\n    return undefined;\n  }\n\n  const bonusResult = await getLepBonus(actor);\n  const regObject = {\n\tresource: resource, \n\tmod: Number(mod) + Number(bonusResult.mod),\n  };\n  const resourceResult = await regenerateResource(regObject, false); \n  const healedWounds = await tryHealWounds(actor, resourceResult.total);\n  \n  await actor.update({_id: actor._id, 'data.base.resources.vitality.value': resourceResult.newValue});\n  return {\n    bonus: bonusResult,\n\tresource: resourceResult,\n\thealedWounds: healedWounds,\n  }\n}\n\nasync function getLepBonus(actor) {\n  let mod = 0;\n  const attributeValue = getAttributeValue(actor, 'constitution')\n  const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n  if(isSuccessfull) {\n    mod += 1;\n  }\n  \n  mod += getVitalitySpecialAbilitiesMod(actor);\n  return {\n\tmod: mod,\n    attributeValue: attributeValue,\n   \trollResult: rollResult,\n    isRollSuccessfull: isSuccessfull\n  };\n}\n\nfunction getVitalitySpecialAbilitiesMod(actor){\n  const items = [...actor.items.values()];\n  let mod = 0;\n \n  const schnelleHeilung = items.filter(i => i.data.name === 'Schnelle Heilung');\n  if(schnelleHeilung.length > 0){\n    mod += schnelleHeilung[0].data.value;\n  }\n \n  if(items.filter(i => i.data.name === 'Schlechte Regeneration').length > 0){\n    mod -= 1;\n  }\n\n  return mod;\n}\n\nasync function tryHealWounds(actor, healValue){\n  const healTreshold = 7;\n  if(healValue < healTreshold){\n    return 0;\n  }\n  \n  let woundHealCount = Math.floor(healValue / healTreshold);  \n  let wounds = actor\n    .getEmbeddedCollection(\"ActiveEffect\")\n    .filter(e => e.data.label == 'Wunde');\n\n  if(!wounds || wounds.length < 1) {\n    return 0;\n  }\t\n\n  if(woundHealCount > wounds.length) {\n    woundHealCount = wounds.length;\n  }\n\n  wounds = wounds.slice(0, woundHealCount);\n  const ids = wounds.map(w => w.data._id);\n  await actor.deleteEmbeddedDocuments(\"ActiveEffect\", ids);\n  \n  return woundHealCount;\n}\n\n\n////////////////////////////////////\n//--------AU Regeneration---------//\n////////////////////////////////////\nasync function regenerateAu(actor){\n  const resource = actor.data.data.base.resources['endurance'];\n  if(resource.value >= resource.max) {\n    return undefined;\n  }\n\n  const regObject = {\n\tresource: resource, \n\tmod: 0,\n  };\n  const resourceResult = await regenerateResource(regObject, true); \n  \n  await actor.update({_id: actor._id, 'data.base.resources.endurance.value': resourceResult.newValue});\n  return {\n    bonus: undefined,\n\tresource: resourceResult,\n\thealedWounds: 0,\n  }\n}\n\n\n////////////////////////////////////\n//--------AsP Regeneration--------//\n////////////////////////////////////\nasync function regenerateAsp(actor, mod){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  if(resource.value >= resource.max) {\n    return undefined;\n  }\n\n  const bonusResult = await getAspBonus(actor);\n  const regObject = {\n\tresource: resource, \n\tmod: Number(mod) + Number(bonusResult.mod),\n  };\n  \n  let resourceResult\n  if(hasMeisterlicheRegeneration(actor)) {\n    resourceResult = await meisterlicheRegeneration(actor, regObject);\n  } else {\n    resourceResult = await regenerateResource(regObject, false); \n  }\n\n  await actor.update({_id: actor._id, 'data.base.resources.astralEnergy.value': resourceResult.newValue});\n  return {\n    bonus: bonusResult,\n\tresource: resourceResult,\n\thealedWounds: 0,\n  }\n}\n\nasync function getAspBonus(actor) {\n  let mod = 0;\n  const attributeValue = getAttributeValue(actor, 'intuition')\n  const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n  if(isSuccessfull) {\n    mod += 1;\n  }\n  console.log('1', mod);\n  mod += getAstralSpecialAbilitiesMod(actor);\n\n  return {\n\tmod: mod,\n    attributeValue: attributeValue,\n   \trollResult: rollResult,\n    isRollSuccessfull: isSuccessfull\n  };\n}\n\nfunction getAstralSpecialAbilitiesMod(actor){\n  const items = [...actor.items.values()];\n  let mod = 0;\n \n  const astraRegeneration = items.filter(i => i.data.name === 'Astrale Regeneration');\n  if(astraRegeneration.length > 0){\n    mod += astraRegeneration[0].data.value;\n  }\n \n  if(items.filter(i => i.data.name === 'Regeneration I').length > 0){\n    mod += 1;\n  }\n  console.log('2', mod);\n  if(items.filter(i => i.data.name === 'Regeneration II').length > 0){\n    mod += 1;\n  }\n    console.log('3', mod);\n  if(items.filter(i => i.data.name === 'Meisterliche Regeneration').length > 0){\n    mod += 1;\n  }\n    console.log('4', mod);\n  if(items.filter(i => i.data.name === 'Astraler Block').length > 0){\n    mod -= 1;\n  }\n  console.log('5', mod);\n  return mod;\n}\n\nfunction hasMeisterlicheRegeneration(actor){\n  const items = [...actor.items.values()];\n  if(items.filter(i => i.data.name === 'Meisterliche Regeneration').length > 0){\n    return true;\n  }\n  \n  return false;\n}\n\nasync function meisterlicheRegeneration(actor, obj) {\n  const attributeValue = getAttributeValue(actor, 'intuition')\n  const total = Math.round(attributeValue / 3) + obj.mod;\n  \n  const previousValue = obj.resource.value;\n  const newValue = await getNewResourceValue(obj, total);\n\n  return {\n\ttotal: total,\n    oldValue: previousValue,\n\tnewValue: newValue,\n\tsetFull: false,\n  };\n}\n\n\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\nasync function rollD6(){\n  const roll = await new Roll(`1d6`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\nasync function isAttributeBonusSuccessfull(attributeValue) {\n  const roll = await new Roll(`1d20cs<=${attributeValue}`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return [result, roll.total];\n}\n\nasync function regenerateResource(obj, setFull) {\n  let total = 0;\n  if(setFull) {\n    total = 10000;\n  } else {\n    total = (await rollD6()) + obj.mod;\n  }\n\n  const previousValue = obj.resource.value;\n  const newValue = await getNewResourceValue(obj, total);\n\n  return {\n\ttotal: total,\n    oldValue: previousValue,\n\tnewValue: newValue,\n\tsetFull: setFull\n  };\n}\n\nasync function getNewResourceValue(obj, value) {\n  if((obj.resource.value + value) < obj.resource.max){\n    return obj.resource.value + value;\n  }\n  \n  return obj.resource.max;\n}\n\nasync function createChatMessage(result) {\n  let content = `<div>${result.actor.name}</div>`;\n  if(result.lep) {\n   const bonus = result.lep.bonus;\n   const bonusResultText = bonus.isRollSuccessfull === 1 ? '' : 'nicht';\n   content += `<div>KO-Probe war ${bonusResultText}erfolgreich (${bonus.attributeValue - bonus.rollResult})</div>`;\n  }\n  \n  if(result.asp) {\n   const bonus = result.asp.bonus;\n   const bonusResultText = bonus.isRollSuccessfull === 1 ? '' : 'nicht';\n   content += `<div>IN-Probe war ${bonusResultText} erfolgreich (${bonus.attributeValue - bonus.rollResult})</div>`;\n  }\n  \n  if(result.lep) {\n   const resource = result.lep.resource;\n   content += `<div style=\"margin-top: 20px; font-weight: bold\">LeP regeneriert: ${resource.total} (${resource.oldValue} -> ${resource.newValue})</div>`;\n  }\n  \n  if(result.au) {\n   const resource = result.au.resource;\n   content += `<div style=\"font-weight: bold\">AU regeneriert (${resource.oldValue} -> ${resource.newValue})</div>`;\n  }\n  \n  if(result.asp) {\n   const resource = result.asp.resource;\n   content += `<div style=\"font-weight: bold\">AsP regeneriert: ${resource.total} (${resource.oldValue} -> ${resource.newValue})</div>`;\n  }\n  \n  if(result.lep) {\n\tconst wounds = result.lep.healedWounds;\n    if(wounds > 0) {\n      if(wounds === 1) {\n        content += `<div style=\"font-weight: bold\">Eine Wunde wurde geschlossen</div>`;\n      } else {\n        content += `<div style=\"font-weight: bold\">${wounds} Wunden wurden geschlossen</div>`;\n      }\n    }\n  }\n  \n  if(!result.lep && !result.au && !result.asp) {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Bereits vollständig regeneriert :)</div>`;\n  }\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"name":"Magieresistenzprobe","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/aura.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst name = currentActor.data.name;\nconst magicResistance = currentActor.data.data.base.combatAttributes.passive.magicResistance.value;\n\nconst roll = await new Roll(`1d20cs<=${magicResistance}`).evaluate();\nconst result = roll.dice[0].results[0].result;\ngame.dice3d.showForRoll(roll); // remove this line if you dont want dice to be shown at all!\nlet content = `<div>${name}</div><div>`\ncontent += `<div>Magieresistenz (${magicResistance})</div><div>`\nif(roll.total) {\n  content += `Erfolg (${result})</div>`;\n}\nelse {\n  content += `Misserfolg (${result})</div>`;\n} \ncontent += `<div>${magicResistance-result}</div>`\nChatMessage.create({content: content});","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"core":{"sourceId":"Macro.7ZFATfYzhP0HeKat"}},"_id":"79StelkLyq64EFGr"}
{"_id":"7ZFATfYzhP0HeKat","name":"Magieresistenzprobe","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/aura.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst name = currentActor.data.name;\nconst magicResistance = currentActor.data.data.base.combatAttributes.passive.magicResistance.value;\n\nconst roll = await new Roll(`1d20cs<=${magicResistance}`).evaluate();\nconst result = roll.dice[0].results[0].result;\ngame.dice3d.showForRoll(roll); // remove this line if you dont want dice to be shown at all!\nlet content = `<div>${name}</div><div>`\ncontent += `<div>Magieresistenz (${magicResistance})</div><div>`\nif(roll.total) {\n  content += `Erfolg (${result})</div>`;\n}\nelse {\n  content += `Misserfolg (${result})</div>`;\n} \ncontent += `<div>${magicResistance-result}</div>`\nChatMessage.create({content: content});","folder":null,"sort":200000,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{}}
{"_id":"7oJGyDxlWcGNY89Q","name":"Bruchfaktor (Primärhand)","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/broken-sword.svg","scope":"global","command":"let currentActor = getActor();\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst combatState = currentActor.combatState\nif(!combatState.isArmed){\n  console.log('Abort, Actor is unarmed');\n  return;\n}\n\nawait breakTest(currentActor);\n\n// Functions\nasync function breakTest(actor){\n  const name = currentActor.data.name;\n  let content = `<div>${name}</div>`\n\n  const item = combatState.primaryHand.item.data;\n  content += `<div>${item.name}</div>`;\n  const breakTestText = await checkBreak(item);\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">${breakTestText}</div>`;\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\nasync function checkBreak(item){\n  const rollResult = await rollD6();\n  console.log(rollResult);\n  if(rollResult > item.data.breakingFactor){\n    item.data.breakingFactor += 1;\n    return `Bruchfaktor des Gegenstands ist gestiegen (${rollResult})`;\n  }\n  \n  item.data.breakingFactor = 99;\n  const brokenSuffix = ' (zerstört)';\n  if(!item.name.includes(brokenSuffix)){\n    item.name += brokenSuffix ;\n  }\n  \n  item.update({_id: item._id, name: item.name, 'data.breakingFactor': item.data.breakingFactor});\n  return `Gegenstand ist zerbrochen! (${rollResult})`;\n}\n\nasync function rollD6(){\n  const roll = await new Roll(`2d6`).evaluate();\n  let result = roll.dice[0].results[0].result;\n  result += roll.dice[0].results[1].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.yGPbE7KmiMk3RD2R"}}}
{"name":"Trefferpunkte erhalten","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/tp_add.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Trefferpunkte\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl oder Formel</label>\n        <input type='text' id=\"tpField\"></input>\n\t  </div>\n      <div class=\"form-group\">\n\t\t<label>Rüstung</label>\n        <input type='checkbox' id=\"armorField\" checked></input>\n      </div>\n      <div class=\"form-group\">\n        <label>Wunden</label>\n        <input type='checkbox' id=\"woundField\" checked></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n\t\tconst tpField = html.find('[id=\"tpField\"]').val();\n\t\tlet tpValue = 0;\n\t\tif(tpField !== '') {\n\t\t\ttpValue = tpField;\n\t\t}\n\n\t\tconst checkArmor = html.find('[id=\"armorField\"]')[0].checked;\n        const checkWounds = html.find('[id=\"woundField\"]')[0].checked;\n        const hitPointObj = {\n            actor: currentActor,\n            value: tpValue,\n            checkArmor: checkArmor,\n            checkWounds: checkWounds,\n\t\t};\n\t\t\n        const result = await dealHitPoints(hitPointObj);\n\t\tawait createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n//////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\nasync function dealHitPoints(hitPointObj) {\n  let armorRating = 0;\n  if(hitPointObj.checkArmor) {\n    armorRating = getActiveArmorRating(hitPointObj.actor);\n  }\n  \n  const oldLep = getCurrentLep(hitPointObj.actor);\n  const damage = await getDamage(hitPointObj.value, armorRating);\n  await dealDamage(hitPointObj.actor, damage);\n  \n  let wounds = 0;\n  if(hitPointObj.checkWounds) {\n    const woundTreshold = getWoundTreshold(hitPointObj.actor);\n    wounds = getWounds(damage, woundTreshold);\n    await addWounds(hitPointObj.actor, wounds);\n  }\n  \n  return {\n    actor: currentActor,\n    damage: damage,\n    wounds: wounds,\n\toldLep: oldLep,\n    newLep: oldLep - damage,\n  };\n}\n\nfunction getActiveArmorRating(actor) {\n  return actor.data.data.base.combatAttributes.passive.physicalResistance.value;\n}\n\nfunction getCurrentLep(actor) {\n  return actor.data.data.base.resources['vitality'].value;\n}\n\nasync function getDamage(damageValue, armorRating) {\n  let damage = 0;\n  if(isNaN(damageValue)){\n    damage = await rollDice(damageValue);\n  } else {\n    damage = Number(damageValue);\n  }\n    \n  damage = damage - Number(armorRating);\n  if(damage < 1){\n    return 0;\n  }\n  return damage;\n}\n\nasync function rollDice(formula){\n  const roll = await new Roll(formula).evaluate();\n  let result = roll._total;\n  \n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nasync function dealDamage(actor, damage) {\n  if(damage < 1){\n    return;\n  }\n  \n  const lep = getCurrentLep(actor);\n  actor.update({_id: actor._id, 'data.base.resources.vitality.value': lep - damage});\n}\n\nfunction getWoundTreshold(actor) {\n  const constitution = actor.data.data.base.basicAttributes['constitution'].value;\n  let treshold = Math.round(constitution/2);\n  \n  const eisern = [...actor.items.values()].filter(i => i.data.name === 'Eisern');\n  if(eisern.length > 0) {\n    treshold += 2;\n  }\n  \n  const glasknochen = [...actor.items.values()].filter(i => i.data.name === 'Glasknochen');\n  if(glasknochen.length > 0) {\n    treshold -= 2;\n  }\n  \n  return treshold;\n}\n\nfunction getWounds(damage, treshold) {\n  if(damage < 1){\n    return 0;\n  }\n  return Math.floor(damage / treshold);\n}\n\nasync function addWounds(actor, wounds) {\n  if(wounds < 1){\n    return;\n  }\n  \n  const woundChanges = [{\n    key: \"data.base.combatAttributes.active.baseAttack.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseParry.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseRangedAttack.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseInitiative.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.basicAttributes.agility.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.movement.speed.value\",\n    value: -1,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  }];\n\n  let effectData = {\n    label: \"Wunde\",\n    icon: \"icons/svg/blood.svg\",\n    changes: woundChanges,\n\n    flags: {\n      core: {\n        statusId: \"wound\",\n      },\n    },\n  };\n  \n  let woundArray = [];\n  for (var i = 0; i < wounds; i++) {\n    woundArray.push(effectData);\n  }\n  \n  actor.createEmbeddedDocuments(\"ActiveEffect\", woundArray);\n  \n  return;\n}\n\nasync function createChatMessage(hitPointResult) {\n  let content = `<div>${hitPointResult.actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">Schaden erhalten: ${hitPointResult.damage} (${hitPointResult.oldLep} -> ${hitPointResult.newLep})</div>`;\n  if(hitPointResult.wounds > 0) {\n    if(hitPointResult.wounds === 1) {\n      content += `<div style=\"font-weight: bold\">Eine Wunde wurde verursacht</div>`;\n    } else {\n      content += `<div style=\"font-weight: bold\">${hitPointResult.wounds} Wunden wurden verursacht</div>`;\n    }\n  }\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"core":{"sourceId":"Macro.nF8GSbQYSqj2SuWG"},"combat-utility-belt":{"macroTrigger":""}},"_id":"8JulU5JU6xjm01ZJ"}
{"name":"Würfel rotieren: Y↓","type":"script","author":"aLuqBG2pqhQy07Ii","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-left_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationY';\nconst rotationStep = 90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('Y-');","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"aLuqBG2pqhQy07Ii":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.ycB48DZSiqISGqOw"}},"_id":"8ctpCQWqzPo9hGRg"}
{"name":"New Macro","type":"chat","author":"C1tc77zu6CecTMux","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"C1tc77zu6CecTMux":3},"flags":{},"_id":"8yafpL8v32iUCgX0"}
{"name":"Schicksalspunkte setzen","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/schpkt_set.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Schicksalspunkte setzen\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl</label>\n        <input type='text' id=\"schPktField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n        const schPktField = html.find('[id=\"schPktField\"]').val();\n        let schPktValue = 0;\n        if(schPktField !== '') {\n          schPktValue = schPktField;\n        }\n\n        if(schPktValue < 0) {\n          return;\n        }\n        \n        const schPktObj = {\n          actor: currentActor,\n          value: schPktValue,\n        };\n        \n        const result = await setSchicksalspunkte(schPktObj);\n        await createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n/////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\n\n/////////////////////////////\n//-Schicksalspunkte  Basis-//\n/////////////////////////////\n\nasync function getSchicksalspunkte(actor, defaultValue) {\n  try {\n    const schPkt = actor.data.data.base.resources['schicksalspunkte'].value;\n    return schPkt;\n  } catch {\n    console.log('Creating Schicksalspunkte attribute');\n    \n    actor.data.data.base.resources['schicksalspunkte'] = {value: defaultValue, min: 0, max: defaultValue};\n  \n    return defaultValue;  \n  }\n}\n\nasync function setSchicksalspunkte(schPktObj) {\n  await getSchicksalspunkte(schPktObj.actor, schPktObj.value);\n  \n  await actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.value': schPktObj.value});\n  await actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.max': schPktObj.value});\n  \n  return {\n    actor: schPktObj.actor,\n    newSchPkt: schPktObj.value,\n  };\n}\n\n\n/////////////////////////////\n//------Chat  Message------//\n/////////////////////////////\n\nasync function createChatMessage(schPktResult) {\n  let content = `<div>${schPktResult.actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">Schicksalspunkte gesetzt: ${schPktResult.newSchPkt})</div>`;\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.Z8kXu0uzhVnrvYE8"}},"_id":"9D5zBbUVqD8gHiNg"}
{"_id":"9RO4FdFsO6DvPWad","name":"Nahkampfpatzer","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/criticalfail_combat.svg","scope":"global","command":"const table = game.tables.find(t => t.data.name === 'Nahkampfpatzer');\ntable.draw();","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{}}
{"name":"Gegenstände beleben","type":"script","author":"aLuqBG2pqhQy07Ii","img":"icons/svg/thrust.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst name = currentActor.data.name;\nconst attribute = currentActor.data.data.base.basicAttributes['intuition'].value\n\nnew Dialog({\n  title: \"Gegenstand beleben\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Gegenstand</label>\n        <input type='text' name='itemField'></input>\n      </div>\n      <div class=\"form-group\">\n        <label>Aktionsbeschreibung</label>\n        <input type='text' name='actionField'></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll!\",\n      callback: async (html) => {\n        let item = html.find('input[name=\\'itemField\\']').val();\n        let action = html.find('input[name=\\'actionField\\']').val();\n        \n        const roll = await new Roll(`1d20cs<=${attribute}`).evaluate();\n        const result = roll.dice[0].results[0].result;\n        let content = `<div>${name}</div><div>`\n        content += `<div>Gegenstand beleben</div><div>`\n        content += `<div>Gegenstand: ${item}</div>`\n        content += `<div>Aktion: ${action }</div>`\n        if(roll.total) {\n          content += `Erfolg (${result})</div>`;\n        }\n        else {\n          content += `Misserfolg (${result})</div>`;\n        } \n        content += `${attribute - result}</div>`;\n        ChatMessage.create({\n          user : game.user._id,\n          content: content,\n          whisper : ChatMessage.getWhisperRecipients(\"GM\")\n        });\n      }\n    }\n  }\n},\n{\n   width: 450\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"aLuqBG2pqhQy07Ii":3},"flags":{"core":{"sourceId":"Macro.ZV8vcXRkcHEZcSih"}},"_id":"9jb02uPBuga56QrU"}
{"name":"Alle Wunden heilen","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/wound_healall.svg","scope":"global","command":"let currentActor = getActor();\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst wounds = currentActor\n.getEmbeddedCollection(\"ActiveEffect\")\n.filter(e => e.data.label == 'Wunde');\n\nconst ids = wounds.map(w => w.data._id);\n\ncurrentActor\n.deleteEmbeddedDocuments( \n  \"ActiveEffect\", \n  ids);\n\n\n\n// Generic functions\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"core":{"sourceId":"Macro.Dx388GjBN6rGKwS6"}},"_id":"9xldabmRaQ2oCfLp"}
{"name":"Etage hoch","type":"script","author":"aLuqBG2pqhQy07Ii","img":"icons/svg/up.svg","scope":"global","command":"const tokens = canvas.tokens.controlled.filter( t => \n  t.data.name === 'Körperlose Gestalt' &&\n  token.data.elevation < 30\n);\n\nconst updates = tokens.map(\nfunction (token) {\n  return ({_id: token.id,elevation: token.data.elevation + 20})\n})\n\nawait canvas.scene.updateEmbeddedDocuments(\"Token\", updates)","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"aLuqBG2pqhQy07Ii":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.AevP9wRYi7vwvNJ0"}},"_id":"ACiSVEP1M85kQo0t"}
{"name":"Trefferpunkte erhalten","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/tp_add.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Trefferpunkte\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl oder Formel</label>\n        <input type='text' id=\"tpField\"></input>\n\t  </div>\n      <div class=\"form-group\">\n\t\t<label>Rüstung</label>\n        <input type='checkbox' id=\"armorField\" checked></input>\n      </div>\n      <div class=\"form-group\">\n        <label>Wunden</label>\n        <input type='checkbox' id=\"woundField\" checked></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n\t\tconst tpField = html.find('[id=\"tpField\"]').val();\n\t\tlet tpValue = 0;\n\t\tif(tpField !== '') {\n\t\t\ttpValue = tpField;\n\t\t}\n\n\t\tconst checkArmor = html.find('[id=\"armorField\"]')[0].checked;\n        const checkWounds = html.find('[id=\"woundField\"]')[0].checked;\n        const hitPointObj = {\n            actor: currentActor,\n            value: tpValue,\n            checkArmor: checkArmor,\n            checkWounds: checkWounds,\n\t\t};\n\t\t\n        const result = await dealHitPoints(hitPointObj);\n\t\tawait createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n//////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\nasync function dealHitPoints(hitPointObj) {\n  let armorRating = 0;\n  if(hitPointObj.checkArmor) {\n    armorRating = getActiveArmorRating(hitPointObj.actor);\n  }\n  \n  const oldLep = getCurrentLep(hitPointObj.actor);\n  const damage = await getDamage(hitPointObj.value, armorRating);\n  await dealDamage(hitPointObj.actor, damage);\n  \n  let wounds = 0;\n  if(hitPointObj.checkWounds) {\n    const woundTreshold = getWoundTreshold(hitPointObj.actor);\n    wounds = getWounds(damage, woundTreshold);\n    await addWounds(hitPointObj.actor, wounds);\n  }\n  \n  return {\n    actor: currentActor,\n    damage: damage,\n    wounds: wounds,\n\toldLep: oldLep,\n    newLep: oldLep - damage,\n  };\n}\n\nfunction getActiveArmorRating(actor) {\n  return actor.data.data.base.combatAttributes.passive.physicalResistance.value;\n}\n\nfunction getCurrentLep(actor) {\n  return actor.data.data.base.resources['vitality'].value;\n}\n\nasync function getDamage(damageValue, armorRating) {\n  let damage = 0;\n  if(isNaN(damageValue)){\n    damage = await rollDice(damageValue);\n  } else {\n    damage = Number(damageValue);\n  }\n    \n  damage = damage - Number(armorRating);\n  if(damage < 1){\n    return 0;\n  }\n  return damage;\n}\n\nasync function rollDice(formula){\n  const roll = await new Roll(formula).evaluate();\n  let result = roll._total;\n  \n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nasync function dealDamage(actor, damage) {\n  if(damage < 1){\n    return;\n  }\n  \n  const lep = getCurrentLep(actor);\n  actor.update({_id: actor._id, 'data.base.resources.vitality.value': lep - damage});\n}\n\nfunction getWoundTreshold(actor) {\n  const constitution = actor.data.data.base.basicAttributes['constitution'].value;\n  let treshold = Math.round(constitution/2);\n  \n  const eisern = [...actor.items.values()].filter(i => i.data.name === 'Eisern');\n  if(eisern.length > 0) {\n    treshold += 2;\n  }\n  \n  const glasknochen = [...actor.items.values()].filter(i => i.data.name === 'Glasknochen');\n  if(glasknochen.length > 0) {\n    treshold -= 2;\n  }\n  \n  return treshold;\n}\n\nfunction getWounds(damage, treshold) {\n  if(damage < 1){\n    return 0;\n  }\n  return Math.floor(damage / treshold);\n}\n\nasync function addWounds(actor, wounds) {\n  if(wounds < 1){\n    return;\n  }\n  \n  const woundChanges = [{\n    key: \"data.base.combatAttributes.active.baseAttack.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseParry.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseRangedAttack.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseInitiative.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.basicAttributes.agility.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.movement.speed.value\",\n    value: -1,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  }];\n\n  let effectData = {\n    label: \"Wunde\",\n    icon: \"icons/svg/blood.svg\",\n    changes: woundChanges,\n\n    flags: {\n      core: {\n        statusId: \"wound\",\n      },\n    },\n  };\n  \n  let woundArray = [];\n  for (var i = 0; i < wounds; i++) {\n    woundArray.push(effectData);\n  }\n  \n  actor.createEmbeddedDocuments(\"ActiveEffect\", woundArray);\n  \n  return;\n}\n\nasync function createChatMessage(hitPointResult) {\n  let content = `<div>${hitPointResult.actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">Schaden erhalten: ${hitPointResult.damage} (${hitPointResult.oldLep} -> ${hitPointResult.newLep})</div>`;\n  if(hitPointResult.wounds > 0) {\n    if(hitPointResult.wounds === 1) {\n      content += `<div style=\"font-weight: bold\">Eine Wunde wurde verursacht</div>`;\n    } else {\n      content += `<div style=\"font-weight: bold\">${hitPointResult.wounds} Wunden wurden verursacht</div>`;\n    }\n  }\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"core":{"sourceId":"Macro.nF8GSbQYSqj2SuWG"},"combat-utility-belt":{"macroTrigger":""}},"_id":"ACuILIbNgfzPPGw4"}
{"_id":"AevP9wRYi7vwvNJ0","name":"Etage hoch","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/up.svg","scope":"global","command":"const tokens = canvas.tokens.controlled.filter( t => \n  t.data.name === 'Körperlose Gestalt' &&\n  token.data.elevation < 30\n);\n\nconst updates = tokens.map(\nfunction (token) {\n  return ({_id: token.id,elevation: token.data.elevation + 20})\n})\n\nawait canvas.scene.updateEmbeddedDocuments(\"Token\", updates)","folder":null,"sort":400000,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"name":"Fernkampfpatzer","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/criticalfail_rangedcombat.svg","scope":"global","command":"const table = game.tables.find(t => t.data.name === 'Fernkampfpatzer');\ntable.draw();","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"core":{"sourceId":"Macro.lHQ8e7KoDCylVPl1"}},"_id":"BWkYy766Ulv6e90O"}
{"_id":"BfdgAaVtlGQmZ4d9","name":"Vollständige Regeneration inklusive Schicksalspunkte","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/regen_all.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nawait regenerate(currentActor);\n\n\n\nasync function regenerate(actor){\n  regenerateLep(currentActor);\n  regenerateAu(currentActor);\n  regenerateAsp(currentActor);\n  regenerateKap(currentActor);\n  healWounds(currentActor);\n  resetSchicksalspunkte(currentActor);\n\n  const content = `<div>${currentActor.data.name} hat vollständig regeneriert</div>`;\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\n// LeP Regeneration\nfunction regenerateLep(actor){\n  const resource = currentActor.data.data.base.resources['vitality'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.vitality.value': newValue});\n}\n\n// AU Regeneration\nfunction regenerateAu(actor){\n  const resource = currentActor.data.data.base.resources['endurance'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.endurance.value': newValue});\n}\n\n\n// AsP Regeneration\nfunction regenerateAsp(actor){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.astralEnergy.value': newValue});\n}\n\n// KaP Regeneration\nfunction regenerateKap(actor){\n  const resource = actor.data.data.base.resources['karmicEnergy'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.karmicEnergy.value': newValue});\n}\n\n// Wunden heilen\nfunction healWounds(actor){\n  const wounds = actor\n    .getEmbeddedCollection(\"ActiveEffect\")\n    .filter(e => e.data.label == 'Wunde');\n\n  const ids = wounds.map(w => w.data._id);\n\n  actor.deleteEmbeddedDocuments( \n    \"ActiveEffect\", \n    ids);\n}\n\n\n// Schicksalspunkte zurücksetzen\nfunction resetSchicksalspunkte(actor) {\n  try {\n    actor.data.data.base.resources['schicksalspunkte'].value;\n  } catch {\n    actor.data.data.base.resources['schicksalspunkte'] = {value: 3, min: 0, max: 3};\n    return;\n  }\n  \n  const resource = actor.data.data.base.resources['schicksalspunkte'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.value': newValue});\n}\n\n\n\n// Generic Functions\nfunction regenerateResource(resource) {\n  resource.value = resource.max;\n  \n  return resource.max;\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.Bkhs4rIfWMYWngag"}}}
{"_id":"Bkhs4rIfWMYWngag","name":"Vollständige Regeneration","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/heal.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nawait regenerate(currentActor);\n\n\nasync function regenerate(actor){\n  const name = currentActor.data.name;\n  let content = `<div>${name} hat vollständig regeneriert</div>`;\n\n  regenerateLep(currentActor);\n  regenerateAu(currentActor);\n  regenerateAsp(currentActor);\n  regenerateKap(currentActor);\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\n// LeP Regeneration\nfunction regenerateLep(actor){\n  const resource = currentActor.data.data.base.resources['vitality'];\n  regenerateResource(resource);\n}\n\n// AU Regeneration\nfunction regenerateAu(actor){\n  const resource = currentActor.data.data.base.resources['endurance'];\n  regenerateResource(resource);\n}\n\n\n// AsP Regeneration\nfunction regenerateAsp(actor){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  regenerateResource(resource);\n}\n\n// AsP Regeneration\nfunction regenerateAsp(actor){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  regenerateResource(resource);\n}\n\n// KaP Regeneration\nfunction regenerateKap(actor){\n  const resource = actor.data.data.base.resources['karmicEnergy'];\n  regenerateResource(resource);\n}\n\n// Generic Functions\nfunction regenerateResource(resource) {\n  resource.value = resource.max;\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"_id":"C4f9M8iPRGelyq7f","name":"Würfel rotieren: Y↑","type":"script","author":"4iG9cHcL1pAPAzDk","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-right_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationY';\nconst rotationStep = -90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('Y+');","folder":"H9tUqbcCUC0lQyzF","sort":93750,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"name":"Wunde heilen","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/wound_heal.svg","scope":"global","command":"let currentActor = getActor();\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst wounds = currentActor\n.getEmbeddedCollection(\"ActiveEffect\")\n.filter(e => e.data.label == 'Wunde');\n\nif(!wounds || wounds.length < 1) {\n  console.log('Abort, no Wounds found');\n  return;\n}\n\nconst idConvert = (v) => [].concat(v);\ncurrentActor\n.deleteEmbeddedDocuments( \n  \"ActiveEffect\", \n  idConvert(wounds[0].data._id));\n\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"core":{"sourceId":"Macro.OGfEyswUP5nsRPLA"},"combat-utility-belt":{"macroTrigger":""}},"_id":"CH4TIqlohdFTF9CL"}
{"name":"Würfel rotieren: Y↑","type":"script","author":"aLuqBG2pqhQy07Ii","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-right_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationY';\nconst rotationStep = -90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('Y+');","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"aLuqBG2pqhQy07Ii":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.C4f9M8iPRGelyq7f"}},"_id":"CwIBl1z43Q0xWhmK"}
{"name":"Bruchfaktor (Primärhand)","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/broken-sword.svg","scope":"global","command":"let currentActor = getActor();\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst combatState = currentActor.combatState\nif(!combatState.isArmed){\n  console.log('Abort, Actor is unarmed');\n  return;\n}\n\nawait breakTest(currentActor);\n\n// Functions\nasync function breakTest(actor){\n  const name = currentActor.data.name;\n  let content = `<div style=\"font-weight: bold\">${name}</div>`\n\n  const item = combatState.primaryHand.item.data;\n  content += `<div>${item.name}</div>`;\n  const breakTestText = await checkBreak(item);\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">${breakTestText}</div>`;\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\nasync function checkBreak(item){\n  const rollResult = await rollD6();\n  console.log(rollResult);\n  if(rollResult > item.data.breakingFactor){\n    item.data.breakingFactor += 1;\n    return `Bruchfaktor des Gegenstands ist gestiegen (${rollResult})`;\n  }\n  \n  item.data.breakingFactor = 99;\n  const brokenSuffix = ' (zerstört)';\n  if(!item.name.includes(brokenSuffix)){\n    item.name += brokenSuffix ;\n  }\n  \n  item.update({_id: item._id, name: item.name, 'data.breakingFactor': item.data.breakingFactor});\n  return `Gegenstand ist zerbrochen! (${rollResult})`;\n}\n\nasync function rollD6(){\n  const roll = await new Roll(`2d6`).evaluate();\n  let result = roll.dice[0].results[0].result;\n  result += roll.dice[0].results[1].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.yGPbE7KmiMk3RD2R"}},"_id":"DcW6sEPWcH81fyfA"}
{"_id":"Dx388GjBN6rGKwS6","name":"Alle Wunden heilen","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/wound_healall.svg","scope":"global","command":"let currentActor = getActor();\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst wounds = currentActor\n.getEmbeddedCollection(\"ActiveEffect\")\n.filter(e => e.data.label == 'Wunde');\n\nconst ids = wounds.map(w => w.data._id);\n\ncurrentActor\n.deleteEmbeddedDocuments( \n  \"ActiveEffect\", \n  ids);\n\n\n\n// Generic functions\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{}}
{"_id":"EQiza6Vf38BfFwkE","name":"New Macro","type":"chat","author":"llLOJOQw8eeTLl9B","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":500000,"permission":{"default":0,"llLOJOQw8eeTLl9B":3},"flags":{}}
{"name":"Würfel rotieren: ↓ (Z)","type":"script","author":"llLOJOQw8eeTLl9B","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-curve-left_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationZ';\nconst rotationStep = -90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('Z-');","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.1IBZFtHrsMw1KIoS"}},"_id":"Fympr8kGMTtHItqJ"}
{"name":"Schlechte Eigenschaft","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/disadvantage_roll.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst disadvantages = getDisadvantages(currentActor);\nconst disadvantagesHtml = getDisadvantagesHtml(disadvantages);\n\nnew Dialog({\n  title: \"Schlechte Eigenschaft\",\n  content:`\n    <form>\n\t    <div class=\"form-group\">\n        <label>Eigenschaft</label>\n        <select id=\"attribute\">\n          <option value=\"courage\" selected=\"selected\">MU</option>\n          <option value=\"cleverness\">KL</option>\n          <option value=\"intuition\">IN</option>\n          <option value=\"charisma\">CH</option>\n          <option value=\"dexterity\">FF</option>\n          <option value=\"agility\">GE</option>\n          <option value=\"constitution\">KO</option>\n          <option value=\"strength\">KK</option>\n        </select>\n      </div>\n\t    <div class=\"form-group\">\n        <label>Nachteil</label>\n        <select id=\"disadvantage\">\n          ${disadvantagesHtml}\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Modifikator</label>\n        <input type='number' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll\",\n      callback: async (html) => {\n\t\t    const attribute = html.find('[id=\"attribute\"]').val();\n        const disadvantageName = html.find('[id=\"disadvantage\"]').val();\n        \n        const modResult = html.find('[id=\"modField\"]').val();\n\t\t    let mod = 0;\n\t\t    if(modResult !== '') {\n\t\t\t    mod = Number(modResult);\n\t\t    }\n        const disadvantageValue = Number(disadvantages.find(d => d.data.name === disadvantageName).data.data.value);\n        const attributeValue = getAttributeValue(actor, attribute)\n        const check = {\n          actor: actor,\n          attribute: attribute,\n          attributeValue: attributeValue,\n          disadvantageName: disadvantageName,\n          disadvantageValue: disadvantageValue,\n          mod: mod\n        }\n        \n\t\t    const rollResult = await rollCheck(check);\n\t\t    await createChatMessage(check, rollResult);\n      }\n    }\n  }\n},\n{\n   width: 250\n}).render(true);\n\n\nasync function rollCheck(check){\n  \n  const targetValue = check.attributeValue - check.disadvantageValue + check.mod;  \n  const roll = await new Roll(`1d20`).evaluate();\n  const rollResult = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n\n  return {\n    total: rollResult,\n    targetValue: targetValue,\n    isSuccessfull: rollResult <= targetValue,\n  }\n}\n\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\nfunction getDisadvantages(actor) {\n  if(!actor) {\n    return [];\n  }\n  const items = [...actor.items.values()];\n  return items.filter(i => i.data.type === 'disadvantage' && i.data.data.negativeAttribute === true)\n}\n\nfunction getDisadvantagesHtml(disadvantages) {\n  if(!disadvantages) {\n    return '';\n  }\n  \n  let html = ''\n  for (item of disadvantages) {\n    html += `<option value=\"${item.data.name}\">${item.data.name}</option>`\n  }\n  \n  return html;\n}\n\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\n\nasync function createChatMessage(check, roll) {\n  let content = `<div>${actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px;\">${check.disadvantageName}(${check.disadvantageValue})</div>`;\n  if(roll.isSuccessfull) {\n    content += `<div style=\"font-weight: bold\">Erfolg (${roll.total})</div>`;\n  } else {\n    content += `<div style=\"font-weight: bold\">Misserfolg (${roll.total})</div>`;\n  }\n  content += `<div>${check.attributeValue - roll.total + check.mod - check.disadvantageValue}</div>`;\n \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.odg52hjPLKceCKhr"}},"_id":"G6riMyR0vM2v4XxL"}
{"name":"New Macro","type":"chat","author":"C1tc77zu6CecTMux","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"C1tc77zu6CecTMux":3},"flags":{},"_id":"GCro1pENmIsMb7Qh"}
{"name":"Wunde hinzufügen","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/wound_add.svg","scope":"global","command":"const woundChanges = [\n  {\n    key: \"data.base.combatAttributes.active.baseAttack.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseParry.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseRangedAttack.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseInitiative.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.basicAttributes.agility.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.movement.speed.value\",\n    value: -1,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n];\n\nlet effectData = {\n  label: \"Wunde\",\n  icon: \"icons/svg/blood.svg\",\n  changes: woundChanges,\n\n  flags: {\n    core: {\n      statusId: \"wound\",\n    },\n  },\n};\n\nlet currentActor = getActor();\ncurrentActor.createEmbeddedDocuments(\n  \"ActiveEffect\", \n  [effectData]);\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"core":{"sourceId":"Macro.twOGFDVYQ11CNRbe"}},"_id":"H2zLpB2hQBG13Nrl"}
{"_id":"HFN5519HyNsi4cou","name":"Übernahme eines Körpers","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/statue.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst name = currentActor.data.name;\nconst attribute = currentActor.data.data.base.combatAttributes.passive.magicResistance.value;\nconst title = \"Übernahme eines Körpers\";\n\nnew Dialog({\n  title: title,\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Zielperson</label>\n        <input type='text' name='targetField'></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll!\",\n      callback: async (html) => {\n        let target = html.find('input[name=\\'targetField\\']').val();\n        \n        const roll = await new Roll(`1d20cs<=${attribute}`).evaluate();\n        const result = roll.dice[0].results[0].result;\n        let content = `<div>${name}</div><div>`\n        content += `<div>${title}</div><div>`\n        content += `<div>Zielperson: ${target}</div>`\n        if(roll.total) {\n          content += `Erfolg (${result})</div>`;\n        }\n        else {\n          content += `Misserfolg (${result})</div>`;\n        } \n        content += `${attribute - result} TaP*</div>`;\n        ChatMessage.create({\n          user : game.user._id,\n          content: content,\n          whisper : ChatMessage.getWhisperRecipients(\"GM\")\n        });\n      }\n    }\n  }\n},\n{\n   width: 450\n}).render(true);","folder":null,"sort":600000,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{}}
{"name":"Etage runter","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/down.svg","scope":"global","command":"const tokens = canvas.tokens.controlled.filter( t => \n  t.data.name === 'Körperlose Gestalt' &&\n  token.data.elevation > -10\n);\n\nconst updates = tokens.map(\nfunction (token) {\n  return ({_id: token.id,elevation: token.data.elevation - 20})\n})\n\nawait canvas.scene.updateEmbeddedDocuments(\"Token\", updates)","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.WPUwE8DEspjxfa8J"}},"_id":"HMqOk6G3xAtPpkWg"}
{"name":"Würfel rotieren: Y↓","type":"script","author":"4iG9cHcL1pAPAzDk","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-left_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationY';\nconst rotationStep = 90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('Y-');","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.ycB48DZSiqISGqOw"}},"_id":"HRjgx85FkDz6m9uJ"}
{"name":"Regeneration","type":"script","author":"aLuqBG2pqhQy07Ii","img":"icons/svg/angel.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nawait regenerate(currentActor);\n\n\nasync function regenerate(actor){\n  const name = currentActor.data.name;\n  let content = `<div>${name}</div>`\n\n  const [lepRollText, lepResultText] = await regenerateLep(currentActor);\n  const [auRollText, auResultText] = await regenerateAu(currentActor);\n  const [aspRollText, aspResultText] = await regenerateAsp(currentActor);\n\n  const regenContent = lepRollText + aspRollText + lepResultText + auResultText + aspResultText;\n  if(regenContent) {\n    content += regenContent;\n  } else {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Bereits vollständig regeneriert :)</div>`;\n  }\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\n// LeP Regeneration\nasync function regenerateLep(actor){\n  const resource = currentActor.data.data.base.resources['vitality'];\n    if(resource.value >= resource.max) {\n\treturn ['', ''];\n  }\n\n  const [mod, modText] = await getLepBonusResult(currentActor); \n  const resultText = await regenerateResourceAndGetText(resource, 'LeP', mod, 'margin-top: 20px;', false);\n  return [modText, resultText];\n}\n\nasync function getLepBonusResult(actor) {\n let lepMod = 0;\n let resultText = '';\n const attributeValue = getAttributeValue(actor, 'constitution')\n const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n if(isSuccessfull) {\n\tlepMod += 1;\n } else {\n   resultText = `nicht `;\n }\n \n const text = `<div>KO-Probe war ${resultText}erfolgreich (${attributeValue - rollResult})</div>`;\n return [lepMod, text];\n}\n\n// AU Regeneration\nasync function regenerateAu(actor){\n  const resource = currentActor.data.data.base.resources['endurance'];\n  if(resource.value >= resource.max) {\n\treturn ['', ''];\n  }\n\n  const resultText = await regenerateResourceAndGetText(resource, 'AU', 0, '', true);\n  return ['', resultText];\n}\n\n\n// AsP Regeneration\nasync function regenerateAsp(actor){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  if(resource.value >= resource.max) {\n\treturn ['', ''];\n  }\n\n  // TODO Meisterliche Regeneration\n  const [mod, modText] = await getAspBonusResult(actor);\n  const resultText = await regenerateResourceAndGetText(resource, 'AsP', mod, '', false);\n  return [modText, resultText];\n}\n\nasync function getAspBonusResult(actor) {\n let mod = 0;\n let resultText = '';\n const attributeValue = getAttributeValue(actor, 'intuition')\n const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n if(isSuccessfull) {\n\tmod += 1;\n } else {\n   resultText = `nicht `;\n }\n\n mod += getAstralSpecialAbilitiesMod(actor);\n \n const text = `<div>IN-Probe war ${resultText}erfolgreich (${attributeValue - rollResult})</div>`;\n return [mod, text];\n}\n\nfunction getAstralSpecialAbilitiesMod(actor){\n const items = [...actor.items.values()];\n let mod = 0;\n \n const astraRegeneration = items.filter(i => i.data.name === 'Astrale Regeneration');\n if(astraRegeneration.length > 0){\n   mod += astraRegeneration[0].data.value;\n }\n \n if(items.filter(i => i.data.name === 'Regeneration I')){\n   mod += 1;\n }\n if(items.filter(i => i.data.name === 'Regeneration II')){\n   mod += 1;\n }\n\n return mod;\n}\n\n// Generic Functions\nasync function rollD6(){\n  const roll = await new Roll(`1d6`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\nasync function isAttributeBonusSuccessfull(attributeValue) {\n  const roll = await new Roll(`1d20cs<=${attributeValue}`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return [result, roll.total];\n}\n\nasync function regenerateResourceAndGetText(resource, resourceName, mod, style, setFull) {\n  let total = 0;\n  if(setFull) {\n    total = 10000;\n  } else {\n    total = (await rollD6()) + mod;\n  }\n\n  const previousValue = resource.value;\n  const newValue = regenerateResource(resource, total);\n  \n  if(setFull) {\n    return `<div style=\"${style} font-weight: bold\">${resourceName} regeneriert (${previousValue} -> ${newValue})</div>`;\n  } \n  \n  return `<div style=\"${style} font-weight: bold\">${resourceName} regeneriert: ${total} (${previousValue} -> ${newValue})</div>`;\n}\n\nfunction regenerateResource(resource, value) {\n  if((resource.value + value) < resource.max){\n\tresource.value += value;\n  } else {\n    resource.value = resource.max;\n  }\n  return resource.value;\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"aLuqBG2pqhQy07Ii":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.6qhiO18RUYdiqnZC"}},"_id":"IQciyehLMshCDM3G"}
{"name":"Würfel rotieren: X↑","type":"script","author":"aLuqBG2pqhQy07Ii","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-up_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationX';\nconst rotationStep = 90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('X+');","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"aLuqBG2pqhQy07Ii":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.Nx9BuvWk2MqAeRUz"}},"_id":"IUyfRBNewD5a56rZ"}
{"name":"LeP hinzugewinn","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/lep_add.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"LeP hinzugewinn\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl oder Formel</label>\n        <input type='text' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n\t\t    const modResult = html.find('[id=\"modField\"]').val();\n\t\t    let modValue = 0;\n\t\t    if(modResult !== '') {\n\t\t\t    modValue = modResult;\n\t\t    }\n        const result = await addLep(currentActor, modValue);\n        await createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//--------LeP Regeneration--------//\n////////////////////////////////////\nasync function addLep(actor, lepValue){\n  const resource = currentActor.data.data.base.resources['vitality'];\n  if(resource.value >= resource.max) {\n\t  return undefined;\n  }\n\n  let lepTotal = 0;\n  if(isNaN(lepValue)){\n    lepTotal = await rollDice(lepValue);\n  } else {\n    lepTotal = Number(lepValue);\n  }\n\n  const regObject = {\n\t  resource: resource, \n\t  total: lepTotal\n  };\n  \n  const resourceResult = await regenerateResource(regObject); \n  const healedWounds = await tryHealWounds(actor, lepTotal);\n  \n  await actor.update({_id: actor._id, 'data.base.resources.vitality.value': resourceResult.newValue});\n  return {\n    actor: actor,\n    total: lepTotal,\n    oldValue: resourceResult.oldValue,\n\t  newValue: resourceResult.newValue,\n\t  healedWounds: healedWounds,\n  }\n}\n\nasync function tryHealWounds(actor, healValue){\n  const healTreshold = 7;\n  if(healValue < healTreshold){\n    return 0;\n  }\n  \n  let woundHealCount = Math.floor(healValue / healTreshold);  \n  let wounds = actor\n    .getEmbeddedCollection(\"ActiveEffect\")\n    .filter(e => e.data.label == 'Wunde');\n\n  if(!wounds || wounds.length < 1) {\n    return 0;\n  }\t\n\n  if(woundHealCount > wounds.length) {\n    woundHealCount = wounds.length;\n  }\n\n  wounds = wounds.slice(0, woundHealCount);\n  const ids = wounds.map(w => w.data._id);\n  await actor.deleteEmbeddedDocuments(\"ActiveEffect\", ids);\n  \n  return woundHealCount;\n}\n\n\n\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\nasync function rollDice(formula){\n  const roll = await new Roll(formula).evaluate();\n  const result = roll._total; \n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\n\nasync function regenerateResource(obj) {\n  const total = obj.total;\n  const previousValue = obj.resource.value;\n  const newValue = await getNewResourceValue(obj, total);\n\n  return {\n    oldValue: previousValue,\n\t  newValue: newValue\n  };\n}\n\n\nasync function getNewResourceValue(obj, value) {\n  if((obj.resource.value + value) < obj.resource.max){\n    return obj.resource.value + value;\n  }\n  \n  return obj.resource.max;\n}\n\nasync function createChatMessage(result) {\n  let content = `<div style=\"font-weight: bold\">${result.actor.name}</div>`;\n  if(!result) {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Bereits vollständig regeneriert :)</div>`;\n  } else {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">LeP regeneriert: ${result.total} (${result.oldValue} -> ${result.newValue})</div>`;\n  \n\t  const wounds = result.healedWounds;\n    if(wounds > 0) {\n      if(wounds === 1) {\n        content += `<div style=\"font-weight: bold\">Eine Wunde wurde geschlossen</div>`;\n      } else {\n        content += `<div style=\"font-weight: bold\">${wounds} Wunden wurden geschlossen</div>`;\n      }\n    }\n  }\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"core":{"sourceId":"Macro.nKjfKCyRMhoPlFLH"},"combat-utility-belt":{"macroTrigger":""}},"_id":"IuVUoWezj3tOby76"}
{"name":"Etage hoch","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/up.svg","scope":"global","command":"const tokens = canvas.tokens.controlled.filter( t => \n  t.data.name === 'Körperlose Gestalt' &&\n  token.data.elevation < 30\n);\n\nconst updates = tokens.map(\nfunction (token) {\n  return ({_id: token.id,elevation: token.data.elevation + 20})\n})\n\nawait canvas.scene.updateEmbeddedDocuments(\"Token\", updates)","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.AevP9wRYi7vwvNJ0"}},"_id":"Iv8GSSj40p2i1BYk"}
{"name":"Wunde hinzufügen","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/wound_add.svg","scope":"global","command":"const woundChanges = [\n  {\n    key: \"data.base.combatAttributes.active.baseAttack.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseParry.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseRangedAttack.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseInitiative.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.basicAttributes.agility.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.movement.speed.value\",\n    value: -1,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n];\n\nlet effectData = {\n  label: \"Wunde\",\n  icon: \"icons/svg/blood.svg\",\n  changes: woundChanges,\n\n  flags: {\n    core: {\n      statusId: \"wound\",\n    },\n  },\n};\n\nlet currentActor = getActor();\ncurrentActor.createEmbeddedDocuments(\n  \"ActiveEffect\", \n  [effectData]);\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"core":{"sourceId":"Macro.twOGFDVYQ11CNRbe"}},"_id":"IzwyN0aSzDyofFau"}
{"name":"Schicksalspunkte setzen","type":"script","author":"C1tc77zu6CecTMux","img":"icons/svg/schpkt_set.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Schicksalspunkte setzen\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl</label>\n        <input type='text' id=\"schPktField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n        const schPktField = html.find('[id=\"schPktField\"]').val();\n        let schPktValue = 0;\n        if(schPktField !== '') {\n          schPktValue = schPktField;\n        }\n\n        if(schPktValue < 0) {\n          return;\n        }\n        \n        const schPktObj = {\n          actor: currentActor,\n          value: schPktValue,\n        };\n        \n        const result = await setSchicksalspunkte(schPktObj);\n        await createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n/////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\n\n/////////////////////////////\n//-Schicksalspunkte  Basis-//\n/////////////////////////////\n\nasync function getSchicksalspunkte(actor, defaultValue) {\n  try {\n    const schPkt = actor.data.data.base.resources['schicksalspunkte'].value;\n    return schPkt;\n  } catch {\n    console.log('Creating Schicksalspunkte attribute');\n    \n    actor.data.data.base.resources['schicksalspunkte'] = {value: defaultValue, min: 0, max: defaultValue};\n  \n    return defaultValue;  \n  }\n}\n\nasync function setSchicksalspunkte(schPktObj) {\n  await getSchicksalspunkte(schPktObj.actor, schPktObj.value);\n  \n  await actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.value': schPktObj.value});\n  await actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.max': schPktObj.value});\n  \n  return {\n    actor: schPktObj.actor,\n    newSchPkt: schPktObj.value,\n  };\n}\n\n\n/////////////////////////////\n//------Chat  Message------//\n/////////////////////////////\n\nasync function createChatMessage(schPktResult) {\n  let content = `<div>${schPktResult.actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">Schicksalspunkte gesetzt: ${schPktResult.newSchPkt})</div>`;\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"C1tc77zu6CecTMux":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.Z8kXu0uzhVnrvYE8"}},"_id":"JXgbztazPAGUiHX6"}
{"name":"Regeneration","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/angel.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nawait regenerate(currentActor);\n\n\nasync function regenerate(actor){\n  const name = currentActor.data.name;\n  let content = `<div>${name}</div>`\n\n  const [lepRollText, lepResultText] = await regenerateLep(currentActor);\n  const [auRollText, auResultText] = await regenerateAu(currentActor);\n  const [aspRollText, aspResultText] = await regenerateAsp(currentActor);\n\n  const regenContent = lepRollText + aspRollText + lepResultText + auResultText + aspResultText;\n  if(regenContent) {\n    content += regenContent;\n  } else {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Bereits vollständig regeneriert :)</div>`;\n  }\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\n// LeP Regeneration\nasync function regenerateLep(actor){\n  const resource = currentActor.data.data.base.resources['vitality'];\n    if(resource.value >= resource.max) {\n\treturn ['', ''];\n  }\n\n  const [mod, modText] = await getLepBonusResult(currentActor); \n  const resultText = await regenerateResourceAndGetText(resource, 'LeP', mod, 'margin-top: 20px;', false);\n  return [modText, resultText];\n}\n\nasync function getLepBonusResult(actor) {\n let lepMod = 0;\n let resultText = '';\n const attributeValue = getAttributeValue(actor, 'constitution')\n const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n if(isSuccessfull) {\n\tlepMod += 1;\n } else {\n   resultText = `nicht `;\n }\n \n const text = `<div>KO-Probe war ${resultText}erfolgreich (${attributeValue - rollResult})</div>`;\n return [lepMod, text];\n}\n\n// AU Regeneration\nasync function regenerateAu(actor){\n  const resource = currentActor.data.data.base.resources['endurance'];\n  if(resource.value >= resource.max) {\n\treturn ['', ''];\n  }\n\n  const resultText = await regenerateResourceAndGetText(resource, 'AU', 0, '', true);\n  return ['', resultText];\n}\n\n\n// AsP Regeneration\nasync function regenerateAsp(actor){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  if(resource.value >= resource.max) {\n\treturn ['', ''];\n  }\n\n  // TODO Meisterliche Regeneration\n  const [mod, modText] = await getAspBonusResult(actor);\n  const resultText = await regenerateResourceAndGetText(resource, 'AsP', mod, '', false);\n  return [modText, resultText];\n}\n\nasync function getAspBonusResult(actor) {\n let mod = 0;\n let resultText = '';\n const attributeValue = getAttributeValue(actor, 'intuition')\n const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n if(isSuccessfull) {\n\tmod += 1;\n } else {\n   resultText = `nicht `;\n }\n\n mod += getAstralSpecialAbilitiesMod(actor);\n \n const text = `<div>IN-Probe war ${resultText}erfolgreich (${attributeValue - rollResult})</div>`;\n return [mod, text];\n}\n\nfunction getAstralSpecialAbilitiesMod(actor){\n const items = [...actor.items.values()];\n let mod = 0;\n \n const astraRegeneration = items.filter(i => i.data.name === 'Astrale Regeneration');\n if(astraRegeneration.length > 0){\n   mod += astraRegeneration[0].data.value;\n }\n \n if(items.filter(i => i.data.name === 'Regeneration I')){\n   mod += 1;\n }\n if(items.filter(i => i.data.name === 'Regeneration II')){\n   mod += 1;\n }\n\n return mod;\n}\n\n// Generic Functions\nasync function rollD6(){\n  const roll = await new Roll(`1d6`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\nasync function isAttributeBonusSuccessfull(attributeValue) {\n  const roll = await new Roll(`1d20cs<=${attributeValue}`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return [result, roll.total];\n}\n\nasync function regenerateResourceAndGetText(resource, resourceName, mod, style, setFull) {\n  let total = 0;\n  if(setFull) {\n    total = 10000;\n  } else {\n    total = (await rollD6()) + mod;\n  }\n\n  const previousValue = resource.value;\n  const newValue = regenerateResource(resource, total);\n  \n  if(setFull) {\n    return `<div style=\"${style} font-weight: bold\">${resourceName} regeneriert (${previousValue} -> ${newValue})</div>`;\n  } \n  \n  return `<div style=\"${style} font-weight: bold\">${resourceName} regeneriert: ${total} (${previousValue} -> ${newValue})</div>`;\n}\n\nfunction regenerateResource(resource, value) {\n  if((resource.value + value) < resource.max){\n\tresource.value += value;\n  } else {\n    resource.value = resource.max;\n  }\n  return resource.value;\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.6qhiO18RUYdiqnZC"}},"_id":"JpeMn0nr8S3exZEc"}
{"name":"Wunde heilen","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/wound_heal.svg","scope":"global","command":"let currentActor = getActor();\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst wounds = currentActor\n.getEmbeddedCollection(\"ActiveEffect\")\n.filter(e => e.data.label == 'Wunde');\n\nif(!wounds || wounds.length < 1) {\n  console.log('Abort, no Wounds found');\n  return;\n}\n\nconst idConvert = (v) => [].concat(v);\ncurrentActor\n.deleteEmbeddedDocuments( \n  \"ActiveEffect\", \n  idConvert(wounds[0].data._id));\n\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"core":{"sourceId":"Macro.OGfEyswUP5nsRPLA"}},"_id":"K3BlBXYvzUja9IJb"}
{"name":"Vollständige Regeneration","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/heal.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nawait regenerate(currentActor);\n\n\n\nasync function regenerate(actor){\n  const name = currentActor.data.name;\n  let content = `<div>${name} hat vollständig regeneriert</div>`;\n\n  regenerateLep(currentActor);\n  regenerateAu(currentActor);\n  regenerateAsp(currentActor);\n  regenerateKap(currentActor);\n  healWounds();\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\n// LeP Regeneration\nfunction regenerateLep(actor){\n  const resource = currentActor.data.data.base.resources['vitality'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.vitality.value': newValue});\n}\n\n// AU Regeneration\nfunction regenerateAu(actor){\n  const resource = currentActor.data.data.base.resources['endurance'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.endurance.value': newValue});\n}\n\n\n// AsP Regeneration\nfunction regenerateAsp(actor){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.astralEnergy.value': newValue});\n}\n\n// KaP Regeneration\nfunction regenerateKap(actor){\n  const resource = actor.data.data.base.resources['karmicEnergy'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.karmicEnergy.value': newValue});\n}\n\n// Wunden heilen\nfunction healWounds(){\nconst wounds = currentActor\n.getEmbeddedCollection(\"ActiveEffect\")\n.filter(e => e.data.label == 'Wunde');\n\nconst ids = wounds.map(w => w.data._id);\n\ncurrentActor\n.deleteEmbeddedDocuments( \n  \"ActiveEffect\", \n  ids);\n}\n\n\n\n// Generic Functions\nfunction regenerateResource(resource) {\n  resource.value = resource.max;\n  \n  return resource.max;\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.Bkhs4rIfWMYWngag"}},"_id":"KJCuBUOS5aGj62gt"}
{"name":"Nahkampfpatzer","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/criticalfail_combat.svg","scope":"global","command":"const table = game.tables.find(t => t.data.name === 'Nahkampfpatzer');\ntable.draw();","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"core":{"sourceId":"Macro.9RO4FdFsO6DvPWad"}},"_id":"KTageOmCCSDDzIoz"}
{"name":"Würfel rotieren: Y↑","type":"script","author":"llLOJOQw8eeTLl9B","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-right_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationY';\nconst rotationStep = -90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('Y+');","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.C4f9M8iPRGelyq7f"}},"_id":"L1KXtB7xbMyQWjJI"}
{"_id":"LM3WpfEY1VyTHOuP","name":"Schicksalspunkte Info","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/schpkt_info.svg","scope":"global","command":"new Dialog({\n  title: \"Schicksalspunkte Info\",\n  content:`\n<p>Anzahl der Schicksalspunkte: 2 SchiP + (1 SchiP pro 500 AP)</p>\n<table>\n<thead>\n  <tr>\n    <th>Effekt</th>\n    <th>Kosten</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td>7 Lebenspunkte und eine Wunde spontan heilen</td>\n    <td>1 SchiP</td>\n  </tr>\n  <tr>\n    <td>Zufall, der das eigene Leben gerade so rettet</td>\n    <td>2 SchiP</td>\n  </tr>\n  <tr>\n    <td>Zufall, der das Leben rettet und dem Helden weiterhilft</td>\n    <td>5 Schip</td>\n  </tr>\n  <tr>\n    <td>Eine Probe wiederholen</td>\n    <td>1 SchiP</td>\n  </tr>\n  <tr>\n    <td>Eine Probe noch einmal (und noch einmal) wiederholen</td>\n    <td>2 SchiP (3 SchiP)</td>\n  </tr>\n  <tr>\n    <td>Überlebensgroßer Talentwert/Eigenschaftswert</td>\n    <td>1 SchiP pro 2 TaP/ 1 Eigenschaftspunkt</td>\n  </tr>\n  <tr>\n    <td>Geistesblitz</td>\n    <td>1 SchiP</td>\n  </tr>\n  <tr>\n    <td>Weltgestaltung / Szenenkauf</td>\n    <td>1–5 SchiP</td>\n  </tr>\n</tbody>\n</table>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n      }\n    }\n  }\n},\n{\n   width: 600\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"name":"Würfel rotieren: X↓","type":"script","author":"aLuqBG2pqhQy07Ii","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-down_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationX';\nconst rotationStep = -90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('X-');","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"aLuqBG2pqhQy07Ii":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.f1kMo84JjjKKrjLd"}},"_id":"Mqjmvs9YEx7ZqGsz"}
{"name":"Regeneration","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/regen.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Regeneration\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Modifikator</label>\n        <input type='number' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll\",\n      callback: async (html) => {\n\t\tconst modResult = html.find('[id=\"modField\"]').val();\n\t\tlet mod = 0;\n\t\tif(modResult !== '') {\n\t\t\tmod = Number(modResult);\n\t\t}\n        \n\t\tconst result = await regenerate(currentActor, mod);\n\t\tawait createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 250\n}).render(true);\n\n\nasync function regenerate(actor, mod){\n  const lepResult = await regenerateLep(currentActor, mod);\n  const auResult = await regenerateAu(currentActor);\n  const aspResult = await regenerateAsp(currentActor, mod);\n\n  return {\n\tactor: actor,\n\tmod: mod,\n    lep: lepResult,\n    au: auResult,\n    asp: aspResult,\n  }\n}\n\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//--------LeP Regeneration--------//\n////////////////////////////////////\nasync function regenerateLep(actor, mod){\n  const resource = actor.data.data.base.resources['vitality'];\n  if(resource.value >= resource.max) {\n    return undefined;\n  }\n\n  const bonusResult = await getLepBonus(actor);\n  const regObject = {\n\tresource: resource, \n\tmod: Number(mod) + Number(bonusResult.mod),\n  };\n  const resourceResult = await regenerateResource(regObject, false); \n  const healedWounds = await tryHealWounds(actor, resourceResult.total);\n  \n  await actor.update({_id: actor._id, 'data.base.resources.vitality.value': resourceResult.newValue});\n  return {\n    bonus: bonusResult,\n\tresource: resourceResult,\n\thealedWounds: healedWounds,\n  }\n}\n\nasync function getLepBonus(actor) {\n  let mod = 0;\n  const attributeValue = getAttributeValue(actor, 'constitution')\n  const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n  if(isSuccessfull) {\n    mod += 1;\n  }\n  \n  mod += getVitalitySpecialAbilitiesMod(actor);\n  return {\n\tmod: mod,\n    attributeValue: attributeValue,\n   \trollResult: rollResult,\n    isRollSuccessfull: isSuccessfull\n  };\n}\n\nfunction getVitalitySpecialAbilitiesMod(actor){\n  const items = [...actor.items.values()];\n  let mod = 0;\n \n  const schnelleHeilung = items.filter(i => i.data.name === 'Schnelle Heilung');\n  if(schnelleHeilung.length > 0){\n    mod += schnelleHeilung[0].data.value;\n  }\n \n  if(items.filter(i => i.data.name === 'Schlechte Regeneration').length > 0){\n    mod -= 1;\n  }\n\n  return mod;\n}\n\nasync function tryHealWounds(actor, healValue){\n  const healTreshold = 7;\n  if(healValue < healTreshold){\n    return 0;\n  }\n  \n  let woundHealCount = Math.floor(healValue / healTreshold);  \n  let wounds = actor\n    .getEmbeddedCollection(\"ActiveEffect\")\n    .filter(e => e.data.label == 'Wunde');\n\n  if(!wounds || wounds.length < 1) {\n    return 0;\n  }\t\n\n  if(woundHealCount > wounds.length) {\n    woundHealCount = wounds.length;\n  }\n\n  wounds = wounds.slice(0, woundHealCount);\n  const ids = wounds.map(w => w.data._id);\n  await actor.deleteEmbeddedDocuments(\"ActiveEffect\", ids);\n  \n  return woundHealCount;\n}\n\n\n////////////////////////////////////\n//--------AU Regeneration---------//\n////////////////////////////////////\nasync function regenerateAu(actor){\n  const resource = actor.data.data.base.resources['endurance'];\n  if(resource.value >= resource.max) {\n    return undefined;\n  }\n\n  const regObject = {\n\tresource: resource, \n\tmod: 0,\n  };\n  const resourceResult = await regenerateResource(regObject, true); \n  \n  await actor.update({_id: actor._id, 'data.base.resources.endurance.value': resourceResult.newValue});\n  return {\n    bonus: undefined,\n\tresource: resourceResult,\n\thealedWounds: 0,\n  }\n}\n\n\n////////////////////////////////////\n//--------AsP Regeneration--------//\n////////////////////////////////////\nasync function regenerateAsp(actor, mod){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  if(resource.value >= resource.max) {\n    return undefined;\n  }\n\n  const bonusResult = await getAspBonus(actor);\n  const regObject = {\n\tresource: resource, \n\tmod: Number(mod) + Number(bonusResult.mod),\n  };\n  \n  let resourceResult\n  if(hasMeisterlicheRegeneration(actor)) {\n    resourceResult = await meisterlicheRegeneration(actor, regObject);\n  } else {\n    resourceResult = await regenerateResource(regObject, false); \n  }\n\n  await actor.update({_id: actor._id, 'data.base.resources.astralEnergy.value': resourceResult.newValue});\n  return {\n    bonus: bonusResult,\n\tresource: resourceResult,\n\thealedWounds: 0,\n  }\n}\n\nasync function getAspBonus(actor) {\n  let mod = 0;\n  const attributeValue = getAttributeValue(actor, 'intuition')\n  const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n  if(isSuccessfull) {\n    mod += 1;\n  }\n  mod += getAstralSpecialAbilitiesMod(actor);\n\n  return {\n\tmod: mod,\n    attributeValue: attributeValue,\n   \trollResult: rollResult,\n    isRollSuccessfull: isSuccessfull\n  };\n}\n\nfunction getAstralSpecialAbilitiesMod(actor){\n  const items = [...actor.items.values()];\n  let mod = 0;\n \n  const astraRegeneration = items.filter(i => i.data.name === 'Astrale Regeneration');\n  if(astraRegeneration.length > 0){\n    mod += astraRegeneration[0].data.value;\n  }\n \n  if(items.filter(i => i.data.name === 'Regeneration I').length > 0){\n    mod += 1;\n  }\n\n  if(items.filter(i => i.data.name === 'Regeneration II').length > 0){\n    mod += 1;\n  }\n\n  if(items.filter(i => i.data.name === 'Meisterliche Regeneration').length > 0){\n    mod += 1;\n  }\n\n  if(items.filter(i => i.data.name === 'Astraler Block').length > 0){\n    mod -= 1;\n  }\n\n  return mod;\n}\n\nfunction hasMeisterlicheRegeneration(actor){\n  const items = [...actor.items.values()];\n  if(items.filter(i => i.data.name === 'Meisterliche Regeneration').length > 0){\n    return true;\n  }\n  \n  return false;\n}\n\nasync function meisterlicheRegeneration(actor, obj) {\n  const attributeValue = getAttributeValue(actor, 'intuition')\n  const total = Math.round(attributeValue / 3) + obj.mod;\n  \n  const previousValue = obj.resource.value;\n  const newValue = await getNewResourceValue(obj, total);\n\n  return {\n\ttotal: total,\n    oldValue: previousValue,\n\tnewValue: newValue,\n\tsetFull: false,\n  };\n}\n\n\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\nasync function rollD6(){\n  const roll = await new Roll(`1d6`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\nasync function isAttributeBonusSuccessfull(attributeValue) {\n  const roll = await new Roll(`1d20cs<=${attributeValue}`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return [result, roll.total];\n}\n\nasync function regenerateResource(obj, setFull) {\n  let total = 0;\n  if(setFull) {\n    total = 10000;\n  } else {\n    total = (await rollD6()) + obj.mod;\n  }\n\n  const previousValue = obj.resource.value;\n  const newValue = await getNewResourceValue(obj, total);\n\n  return {\n\ttotal: total,\n    oldValue: previousValue,\n\tnewValue: newValue,\n\tsetFull: setFull\n  };\n}\n\nasync function getNewResourceValue(obj, value) {\n  if((obj.resource.value + value) < obj.resource.max){\n    return obj.resource.value + value;\n  }\n  \n  return obj.resource.max;\n}\n\nasync function createChatMessage(result) {\n  let content = `<div style=\"font-weight: bold\">${result.actor.name}</div>`;\n  if(result.lep) {\n   const bonus = result.lep.bonus;\n   const bonusResultText = bonus.isRollSuccessfull === 1 ? '' : 'nicht';\n   content += `<div>KO-Probe war ${bonusResultText}erfolgreich (${bonus.attributeValue - bonus.rollResult})</div>`;\n  }\n  \n  if(result.asp) {\n   const bonus = result.asp.bonus;\n   const bonusResultText = bonus.isRollSuccessfull === 1 ? '' : 'nicht';\n   content += `<div>IN-Probe war ${bonusResultText} erfolgreich (${bonus.attributeValue - bonus.rollResult})</div>`;\n  }\n  \n  if(result.lep) {\n   const resource = result.lep.resource;\n   content += `<div style=\"margin-top: 20px; font-weight: bold\">LeP regeneriert: ${resource.total} (${resource.oldValue} -> ${resource.newValue})</div>`;\n  }\n  \n  if(result.au) {\n   const resource = result.au.resource;\n   content += `<div style=\"font-weight: bold\">AU regeneriert (${resource.oldValue} -> ${resource.newValue})</div>`;\n  }\n  \n  if(result.asp) {\n   const resource = result.asp.resource;\n   content += `<div style=\"font-weight: bold\">AsP regeneriert: ${resource.total} (${resource.oldValue} -> ${resource.newValue})</div>`;\n  }\n  \n  if(result.lep) {\n\tconst wounds = result.lep.healedWounds;\n    if(wounds > 0) {\n      if(wounds === 1) {\n        content += `<div style=\"font-weight: bold\">Eine Wunde wurde geschlossen</div>`;\n      } else {\n        content += `<div style=\"font-weight: bold\">${wounds} Wunden wurden geschlossen</div>`;\n      }\n    }\n  }\n  \n  if(!result.lep && !result.au && !result.asp) {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Bereits vollständig regeneriert :)</div>`;\n  }\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.6qhiO18RUYdiqnZC"}},"_id":"N0l93zS55KLMOISS"}
{"name":"Übernahme eines Körpers","type":"script","author":"aLuqBG2pqhQy07Ii","img":"icons/svg/statue.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst name = currentActor.data.name;\nconst attribute = currentActor.data.data.base.combatAttributes.passive.magicResistance.value;\nconst title = \"Übernahme eines Körpers\";\n\nnew Dialog({\n  title: title,\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Zielperson</label>\n        <input type='text' name='targetField'></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll!\",\n      callback: async (html) => {\n        let target = html.find('input[name=\\'targetField\\']').val();\n        \n        const roll = await new Roll(`1d20cs<=${attribute}`).evaluate();\n        const result = roll.dice[0].results[0].result;\n        let content = `<div>${name}</div><div>`\n        content += `<div>${title}</div><div>`\n        content += `<div>Zielperson: ${target}</div>`\n        if(roll.total) {\n          content += `Erfolg (${result})</div>`;\n        }\n        else {\n          content += `Misserfolg (${result})</div>`;\n        } \n        content += `${attribute - result} TaP*</div>`;\n        ChatMessage.create({\n          user : game.user._id,\n          content: content,\n          whisper : ChatMessage.getWhisperRecipients(\"GM\")\n        });\n      }\n    }\n  }\n},\n{\n   width: 450\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"aLuqBG2pqhQy07Ii":3},"flags":{"core":{"sourceId":"Macro.HFN5519HyNsi4cou"}},"_id":"N8vAS1PBHIPjEaZ4"}
{"name":"Schicksalspunkte nutzen","type":"script","author":"C1tc77zu6CecTMux","img":"icons/svg/schpkt_sub.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Schicksalspunkte einsetzen\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl</label>\n        <input type='text' id=\"schPktField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n        const schPktField = html.find('[id=\"schPktField\"]').val();\n        let schPktValue = 0;\n        if(schPktField !== '') {\n          schPktValue = schPktField;\n        }\n\n        if(schPktValue <= 0) {\n          return;\n        }\n        \n        const schPktObj = {\n          actor: currentActor,\n          value: schPktValue,\n        };\n        \n        const result = await subtractSchicksalspunkte(schPktObj);\n        await createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n/////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\n\n/////////////////////////////\n//-Schicksalspunkte  Basis-//\n/////////////////////////////\n\nasync function getSchicksalspunkte(actor) {\n  try {\n    const schPkt = actor.data.data.base.resources['schicksalspunkte'].value;\n    return schPkt;\n  } catch {\n    console.log('Creating Schicksalspunkte attribute');\n    \n    const defaultValue = 3;\n    actor.data.data.base.resources['schicksalspunkte'] = {value: defaultValue, min: 0, max: defaultValue};\n  \n    return defaultValue;  \n  }\n}\n\n//Nur Fluff ;)\nasync function throwChips(schPktValue){\n  const formula = `${schPktValue}d2`;\n  const roll = await new Roll(formula).evaluate();\n  \n  game.dice3d.showForRoll(roll);\n}\n\n\nasync function subtractSchicksalspunkte(schPktObj) {\n  const oldSchPkt = await getSchicksalspunkte(schPktObj.actor);\n  const newSchPkt = oldSchPkt - schPktObj.value;\n  if(newSchPkt < 0) {\n    return {\n      actor: schPktObj.actor,\n      oldSchPkt: oldSchPkt,\n      newSchPkt: newSchPkt,\n      insufficentPkt: true,\n    };\n  }\n  \n  await actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.value': newSchPkt});\n  await throwChips(schPktObj.value);\n  \n  return {\n    actor: schPktObj.actor,\n    oldSchPkt: oldSchPkt,\n    newSchPkt: newSchPkt,\n    insufficentPkt: false,\n  };\n}\n\n\n/////////////////////////////\n//------Chat  Message------//\n/////////////////////////////\n\nasync function createChatMessage(schPktResult) {\n  let content = `<div>${schPktResult.actor.name}</div>`;\n  if(!schPktResult.insufficentPkt) {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Schicksalspunkte eingesetzt: ${schPktResult.oldSchPkt} -> ${schPktResult.newSchPkt})</div>`;\n  } else {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Nicht genügend Schicksalspunkte (${schPktResult.oldSchPkt})</div>`;\n  }\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"C1tc77zu6CecTMux":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.ppodUVZ4idgUxVaM"}},"_id":"NVsUCDpoWyF7lccd"}
{"name":"LeP hinzugewinn","type":"script","author":"C1tc77zu6CecTMux","img":"icons/svg/lep_add.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"LeP hinzugewinn\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl oder Formel</label>\n        <input type='text' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n\t\t    const modResult = html.find('[id=\"modField\"]').val();\n\t\t    let modValue = 0;\n\t\t    if(modResult !== '') {\n\t\t\t    modValue = modResult;\n\t\t    }\n        const result = await addLep(currentActor, modValue);\n        await createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//--------LeP Regeneration--------//\n////////////////////////////////////\nasync function addLep(actor, lepValue){\n  const resource = currentActor.data.data.base.resources['vitality'];\n  if(resource.value >= resource.max) {\n\t  return undefined;\n  }\n\n  let lepTotal = 0;\n  if(isNaN(lepValue)){\n    lepTotal = await rollDice(lepValue);\n  } else {\n    lepTotal = Number(lepValue);\n  }\n\n  const regObject = {\n\t  resource: resource, \n\t  total: lepTotal\n  };\n  \n  const resourceResult = await regenerateResource(regObject); \n  const healedWounds = await tryHealWounds(actor, lepTotal);\n  \n  await actor.update({_id: actor._id, 'data.base.resources.vitality.value': resourceResult.newValue});\n  return {\n    actor: actor,\n    total: lepTotal,\n    oldValue: resourceResult.oldValue,\n\t  newValue: resourceResult.newValue,\n\t  healedWounds: healedWounds,\n  }\n}\n\nasync function tryHealWounds(actor, healValue){\n  const healTreshold = 7;\n  if(healValue < healTreshold){\n    return 0;\n  }\n  \n  let woundHealCount = Math.floor(healValue / healTreshold);  \n  let wounds = actor\n    .getEmbeddedCollection(\"ActiveEffect\")\n    .filter(e => e.data.label == 'Wunde');\n\n  if(!wounds || wounds.length < 1) {\n    return 0;\n  }\t\n\n  if(woundHealCount > wounds.length) {\n    woundHealCount = wounds.length;\n  }\n\n  wounds = wounds.slice(0, woundHealCount);\n  const ids = wounds.map(w => w.data._id);\n  await actor.deleteEmbeddedDocuments(\"ActiveEffect\", ids);\n  \n  return woundHealCount;\n}\n\n\n\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\nasync function rollDice(formula){\n  const roll = await new Roll(formula).evaluate();\n  const result = roll._total; \n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\n\nasync function regenerateResource(obj) {\n  const total = obj.total;\n  const previousValue = obj.resource.value;\n  const newValue = await getNewResourceValue(obj, total);\n\n  return {\n    oldValue: previousValue,\n\t  newValue: newValue\n  };\n}\n\n\nasync function getNewResourceValue(obj, value) {\n  if((obj.resource.value + value) < obj.resource.max){\n    return obj.resource.value + value;\n  }\n  \n  return obj.resource.max;\n}\n\nasync function createChatMessage(result) {\n  let content = `<div style=\"font-weight: bold\">${result.actor.name}</div>`;\n  if(!result) {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Bereits vollständig regeneriert :)</div>`;\n  } else {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">LeP regeneriert: ${result.total} (${result.oldValue} -> ${result.newValue})</div>`;\n  \n\t  const wounds = result.healedWounds;\n    if(wounds > 0) {\n      if(wounds === 1) {\n        content += `<div style=\"font-weight: bold\">Eine Wunde wurde geschlossen</div>`;\n      } else {\n        content += `<div style=\"font-weight: bold\">${wounds} Wunden wurden geschlossen</div>`;\n      }\n    }\n  }\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"C1tc77zu6CecTMux":3},"flags":{"core":{"sourceId":"Macro.nKjfKCyRMhoPlFLH"},"combat-utility-belt":{"macroTrigger":""}},"_id":"NstY2jDstqHWrNLU"}
{"_id":"Nx9BuvWk2MqAeRUz","name":"Würfel rotieren: X↑","type":"script","author":"4iG9cHcL1pAPAzDk","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-up_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationX';\nconst rotationStep = 90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('X+');","folder":"H9tUqbcCUC0lQyzF","sort":50000,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"name":"Magieresistenzprobe","type":"script","author":"C1tc77zu6CecTMux","img":"icons/svg/aura.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst name = currentActor.data.name;\nconst magicResistance = currentActor.data.data.base.combatAttributes.passive.magicResistance.value;\n\nconst roll = await new Roll(`1d20cs<=${magicResistance}`).evaluate();\nconst result = roll.dice[0].results[0].result;\ngame.dice3d.showForRoll(roll); // remove this line if you dont want dice to be shown at all!\nlet content = `<div>${name}</div><div>`\ncontent += `<div>Magieresistenz (${magicResistance})</div><div>`\nif(roll.total) {\n  content += `Erfolg (${result})</div>`;\n}\nelse {\n  content += `Misserfolg (${result})</div>`;\n} \ncontent += `<div>${magicResistance-result}</div>`\nChatMessage.create({content: content});","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"C1tc77zu6CecTMux":3},"flags":{"core":{"sourceId":"Macro.7ZFATfYzhP0HeKat"}},"_id":"O68WG1dJbyn7wIQt"}
{"_id":"OCA0HvyBdK3jFTQX","name":"Chat: Misserfolg","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/terror.svg","scope":"global","command":"let recipients = '';\n\n// recipients = 'BadCopNoDonut';\n// recipients = 'Lady Winterstorm';\n// recipients = 'Mic';\n// recipients = 'Szaszha';\n\nconst content = 'Deine Aktion misslingt!';\nChatMessage.create({\n  content: content,\n  whisper : ChatMessage.getWhisperRecipients(recipients )\n});","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"_id":"OGfEyswUP5nsRPLA","name":"Wunde heilen","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/wound_heal.svg","scope":"global","command":"let currentActor = getActor();\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst wounds = currentActor\n.getEmbeddedCollection(\"ActiveEffect\")\n.filter(e => e.data.label == 'Wunde');\n\nif(!wounds || wounds.length < 1) {\n  console.log('Abort, no Wounds found');\n  return;\n}\n\nconst idConvert = (v) => [].concat(v);\nawait currentActor\n.deleteEmbeddedDocuments( \n  \"ActiveEffect\", \n  idConvert(wounds[0].data._id));\n\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{}}
{"_id":"OVEPy7cn8QCTcgzq","name":"Unbewaffneter Nahkampfpatzer","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/criticalfail_unarmedcombat.svg","scope":"global","command":"const table = game.tables.find(t => t.data.name === 'Unbewaffneter Nahkampfpatzer');\ntable.draw();","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{}}
{"_id":"OZ5HUxevMmL3zLF8","name":"Chatmessage Erfolg","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/sun.svg","scope":"global","command":"let recipients = '';\n\n// recipients = 'BadCopNoDonut';\n// recipients = 'Lady Winterstorm';\n// recipients = 'Mic';\n// recipients = 'Szaszha';\n\nconst content = 'Deine Aktion gelingt!';\nChatMessage.create({\n  content: content,\n  whisper : ChatMessage.getWhisperRecipients(recipients )\n});","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"name":"Schicksalspunkte nutzen","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/schpkt_sub.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Schicksalspunkte einsetzen\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl</label>\n        <input type='text' id=\"schPktField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n        const schPktField = html.find('[id=\"schPktField\"]').val();\n        let schPktValue = 0;\n        if(schPktField !== '') {\n          schPktValue = schPktField;\n        }\n\n        if(schPktValue <= 0) {\n          return;\n        }\n        \n        const schPktObj = {\n          actor: currentActor,\n          value: schPktValue,\n        };\n        \n        const result = await subtractSchicksalspunkte(schPktObj);\n        await createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n/////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\n\n/////////////////////////////\n//-Schicksalspunkte  Basis-//\n/////////////////////////////\n\nasync function getSchicksalspunkte(actor) {\n  try {\n    const schPkt = actor.data.data.base.resources['schicksalspunkte'].value;\n    return schPkt;\n  } catch {\n    console.log('Creating Schicksalspunkte attribute');\n    \n    const defaultValue = 3;\n    actor.data.data.base.resources['schicksalspunkte'] = {value: defaultValue, min: 0, max: defaultValue};\n  \n    return defaultValue;  \n  }\n}\n\n//Nur Fluff ;)\nasync function throwChips(schPktValue){\n  const formula = `${schPktValue}d2`;\n  const roll = await new Roll(formula).evaluate();\n  \n  game.dice3d.showForRoll(roll);\n}\n\n\nasync function subtractSchicksalspunkte(schPktObj) {\n  const oldSchPkt = await getSchicksalspunkte(schPktObj.actor);\n  const newSchPkt = oldSchPkt - schPktObj.value;\n  if(newSchPkt < 0) {\n    return {\n      actor: schPktObj.actor,\n      oldSchPkt: oldSchPkt,\n      newSchPkt: newSchPkt,\n      insufficentPkt: true,\n    };\n  }\n  \n  await actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.value': newSchPkt});\n  await throwChips(schPktObj.value);\n  \n  return {\n    actor: schPktObj.actor,\n    oldSchPkt: oldSchPkt,\n    newSchPkt: newSchPkt,\n    insufficentPkt: false,\n  };\n}\n\n\n/////////////////////////////\n//------Chat  Message------//\n/////////////////////////////\n\nasync function createChatMessage(schPktResult) {\n  let content = `<div>${schPktResult.actor.name}</div>`;\n  if(!schPktResult.insufficentPkt) {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Schicksalspunkte eingesetzt: ${schPktResult.oldSchPkt} -> ${schPktResult.newSchPkt})</div>`;\n  } else {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Nicht genügend Schicksalspunkte (${schPktResult.oldSchPkt})</div>`;\n  }\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.ppodUVZ4idgUxVaM"}},"_id":"Ofg1rdvFdibwRgw8"}
{"name":"Regeneration","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/angel.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nawait regenerate(currentActor);\n\n\nasync function regenerate(actor){\n  const name = currentActor.data.name;\n  let content = `<div>${name}</div>`\n\n  const [lepRollText, lepResultText] = await regenerateLep(currentActor);\n  const [auRollText, auResultText] = await regenerateAu(currentActor);\n  const [aspRollText, aspResultText] = await regenerateAsp(currentActor);\n\n  const regenContent = lepRollText + aspRollText + lepResultText + auResultText + aspResultText;\n  if(regenContent) {\n    content += regenContent;\n  } else {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Bereits vollständig regeneriert :)</div>`;\n  }\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\n// LeP Regeneration\nasync function regenerateLep(actor){\n  const resource = currentActor.data.data.base.resources['vitality'];\n    if(resource.value >= resource.max) {\n\treturn ['', ''];\n  }\n\n  const [mod, modText] = await getLepBonusResult(currentActor); \n  const resultText = await regenerateResourceAndGetText(resource, 'LeP', mod, 'margin-top: 20px;', false);\n  return [modText, resultText];\n}\n\nasync function getLepBonusResult(actor) {\n let lepMod = 0;\n let resultText = '';\n const attributeValue = getAttributeValue(actor, 'constitution')\n const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n if(isSuccessfull) {\n\tlepMod += 1;\n } else {\n   resultText = `nicht `;\n }\n \n const text = `<div>KO-Probe war ${resultText}erfolgreich (${attributeValue - rollResult})</div>`;\n return [lepMod, text];\n}\n\n// AU Regeneration\nasync function regenerateAu(actor){\n  const resource = currentActor.data.data.base.resources['endurance'];\n  if(resource.value >= resource.max) {\n\treturn ['', ''];\n  }\n\n  const resultText = await regenerateResourceAndGetText(resource, 'AU', 0, '', true);\n  return ['', resultText];\n}\n\n\n// AsP Regeneration\nasync function regenerateAsp(actor){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  if(resource.value >= resource.max) {\n\treturn ['', ''];\n  }\n\n  // TODO Meisterliche Regeneration\n  const [mod, modText] = await getAspBonusResult(actor);\n  const resultText = await regenerateResourceAndGetText(resource, 'AsP', mod, '', false);\n  return [modText, resultText];\n}\n\nasync function getAspBonusResult(actor) {\n let mod = 0;\n let resultText = '';\n const attributeValue = getAttributeValue(actor, 'intuition')\n const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n if(isSuccessfull) {\n\tmod += 1;\n } else {\n   resultText = `nicht `;\n }\n\n mod += getAstralSpecialAbilitiesMod(actor);\n \n const text = `<div>IN-Probe war ${resultText}erfolgreich (${attributeValue - rollResult})</div>`;\n return [mod, text];\n}\n\nfunction getAstralSpecialAbilitiesMod(actor){\n const items = [...actor.items.values()];\n let mod = 0;\n \n const astraRegeneration = items.filter(i => i.data.name === 'Astrale Regeneration');\n if(astraRegeneration.length > 0){\n   mod += astraRegeneration[0].data.value;\n }\n \n if(items.filter(i => i.data.name === 'Regeneration I')){\n   mod += 1;\n }\n if(items.filter(i => i.data.name === 'Regeneration II')){\n   mod += 1;\n }\n\n return mod;\n}\n\n// Generic Functions\nasync function rollD6(){\n  const roll = await new Roll(`1d6`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\nasync function isAttributeBonusSuccessfull(attributeValue) {\n  const roll = await new Roll(`1d20cs<=${attributeValue}`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return [result, roll.total];\n}\n\nasync function regenerateResourceAndGetText(resource, resourceName, mod, style, setFull) {\n  let total = 0;\n  if(setFull) {\n    total = 10000;\n  } else {\n    total = (await rollD6()) + mod;\n  }\n\n  const previousValue = resource.value;\n  const newValue = regenerateResource(resource, total);\n  \n  if(setFull) {\n    return `<div style=\"${style} font-weight: bold\">${resourceName} regeneriert (${previousValue} -> ${newValue})</div>`;\n  } \n  \n  return `<div style=\"${style} font-weight: bold\">${resourceName} regeneriert: ${total} (${previousValue} -> ${newValue})</div>`;\n}\n\nfunction regenerateResource(resource, value) {\n  if((resource.value + value) < resource.max){\n\tresource.value += value;\n  } else {\n    resource.value = resource.max;\n  }\n  return resource.value;\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.6qhiO18RUYdiqnZC"}},"_id":"OuW6ZpBGyOE5zm18"}
{"name":"Magieresistenzprobe","type":"script","author":"aLuqBG2pqhQy07Ii","img":"icons/svg/aura.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst name = currentActor.data.name;\nconst magicResistance = currentActor.data.data.base.combatAttributes.passive.magicResistance.value;\n\nconst roll = await new Roll(`1d20cs<=${magicResistance}`).evaluate();\nconst result = roll.dice[0].results[0].result;\ngame.dice3d.showForRoll(roll); // remove this line if you dont want dice to be shown at all!\nlet content = `<div>${name}</div><div>`\ncontent += `<div>Magieresistenz (${magicResistance})</div><div>`\nif(roll.total) {\n  content += `Erfolg (${result})</div>`;\n}\nelse {\n  content += `Misserfolg (${result})</div>`;\n} \ncontent += `<div>${magicResistance-result}</div>`\nChatMessage.create({content: content});","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"aLuqBG2pqhQy07Ii":3},"flags":{"core":{"sourceId":"Macro.7ZFATfYzhP0HeKat"}},"_id":"PIRWG3bPD3ErUN5Z"}
{"name":"Vollständige Regeneration","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/heal.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nawait regenerate(currentActor);\n\n\n\nasync function regenerate(actor){\n  const name = currentActor.data.name;\n  let content = `<div>${name} hat vollständig regeneriert</div>`;\n\n  regenerateLep(currentActor);\n  regenerateAu(currentActor);\n  regenerateAsp(currentActor);\n  regenerateKap(currentActor);\n  healWounds();\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\n// LeP Regeneration\nfunction regenerateLep(actor){\n  const resource = currentActor.data.data.base.resources['vitality'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.vitality.value': newValue});\n}\n\n// AU Regeneration\nfunction regenerateAu(actor){\n  const resource = currentActor.data.data.base.resources['endurance'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.endurance.value': newValue});\n}\n\n\n// AsP Regeneration\nfunction regenerateAsp(actor){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.astralEnergy.value': newValue});\n}\n\n// KaP Regeneration\nfunction regenerateKap(actor){\n  const resource = actor.data.data.base.resources['karmicEnergy'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.karmicEnergy.value': newValue});\n}\n\n// Wunden heilen\nfunction healWounds(){\nconst wounds = currentActor\n.getEmbeddedCollection(\"ActiveEffect\")\n.filter(e => e.data.label == 'Wunde');\n\nconst ids = wounds.map(w => w.data._id);\n\ncurrentActor\n.deleteEmbeddedDocuments( \n  \"ActiveEffect\", \n  ids);\n}\n\n\n\n// Generic Functions\nfunction regenerateResource(resource) {\n  resource.value = resource.max;\n  \n  return resource.max;\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.Bkhs4rIfWMYWngag"}},"_id":"PJe6xThAD7A5C4ra"}
{"name":"Würfel rotieren: ↑ (Z)","type":"script","author":"aLuqBG2pqhQy07Ii","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-curve-right_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationZ';\nconst rotationStep = 90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('Z+');","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"aLuqBG2pqhQy07Ii":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.bYVB2vXoaTuBua6F"}},"_id":"PNBsjJElupayZDuu"}
{"name":"Alle Wunden heilen","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/wound_healall.svg","scope":"global","command":"let currentActor = getActor();\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst wounds = currentActor\n.getEmbeddedCollection(\"ActiveEffect\")\n.filter(e => e.data.label == 'Wunde');\n\nconst ids = wounds.map(w => w.data._id);\n\ncurrentActor\n.deleteEmbeddedDocuments( \n  \"ActiveEffect\", \n  ids);\n\n\n\n// Generic functions\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"core":{"sourceId":"Macro.Dx388GjBN6rGKwS6"}},"_id":"PQDgM3TRJcDsRx68"}
{"name":"Schlechte Eigenschaft","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/disadvantage_roll.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst disadvantages = getDisadvantages(currentActor);\nconst disadvantagesHtml = getDisadvantagesHtml(disadvantages);\n\nnew Dialog({\n  title: \"Schlechte Eigenschaft\",\n  content:`\n    <form>\n\t    <div class=\"form-group\">\n        <label>Eigenschaft</label>\n        <select id=\"attribute\">\n          <option value=\"courage\" selected=\"selected\">MU</option>\n          <option value=\"cleverness\">KL</option>\n          <option value=\"intuition\">IN</option>\n          <option value=\"charisma\">CH</option>\n          <option value=\"dexterity\">FF</option>\n          <option value=\"agility\">GE</option>\n          <option value=\"constitution\">KO</option>\n          <option value=\"strength\">KK</option>\n        </select>\n      </div>\n\t    <div class=\"form-group\">\n        <label>Nachteil</label>\n        <select id=\"disadvantage\">\n          ${disadvantagesHtml}\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Modifikator</label>\n        <input type='number' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll\",\n      callback: async (html) => {\n\t\t    const attribute = html.find('[id=\"attribute\"]').val();\n        const disadvantageName = html.find('[id=\"disadvantage\"]').val();\n        \n        const modResult = html.find('[id=\"modField\"]').val();\n\t\t    let mod = 0;\n\t\t    if(modResult !== '') {\n\t\t\t    mod = Number(modResult);\n\t\t    }\n        const disadvantageValue = Number(disadvantages.find(d => d.data.name === disadvantageName).data.data.value);\n        const attributeValue = getAttributeValue(actor, attribute)\n        const check = {\n          actor: actor,\n          attribute: attribute,\n          attributeValue: attributeValue,\n          disadvantageName: disadvantageName,\n          disadvantageValue: disadvantageValue,\n          mod: mod\n        }\n        \n\t\t    const rollResult = await rollCheck(check);\n\t\t    await createChatMessage(check, rollResult);\n      }\n    }\n  }\n},\n{\n   width: 250\n}).render(true);\n\n\nasync function rollCheck(check){\n  \n  const targetValue = check.attributeValue - check.disadvantageValue + check.mod;  \n  const roll = await new Roll(`1d20`).evaluate();\n  const rollResult = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n\n  return {\n    total: rollResult,\n    targetValue: targetValue,\n    isSuccessfull: rollResult <= targetValue,\n  }\n}\n\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\nfunction getDisadvantages(actor) {\n  if(!actor) {\n    return [];\n  }\n  const items = [...actor.items.values()];\n  return items.filter(i => i.data.type === 'disadvantage' && i.data.data.negativeAttribute === true)\n}\n\nfunction getDisadvantagesHtml(disadvantages) {\n  if(!disadvantages) {\n    return '';\n  }\n  \n  let html = ''\n  for (item of disadvantages) {\n    html += `<option value=\"${item.data.name}\">${item.data.name}</option>`\n  }\n  \n  return html;\n}\n\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\n\nasync function createChatMessage(check, roll) {\n  let content = `<div style=\"font-weight: bold\">${actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px;\">${check.disadvantageName}(${check.disadvantageValue})</div>`;\n  if(roll.isSuccessfull) {\n    content += `<div style=\"font-weight: bold\">Erfolg (${roll.total})</div>`;\n  } else {\n    content += `<div style=\"font-weight: bold\">Misserfolg (${roll.total})</div>`;\n  }\n  content += `<div>${check.attributeValue - roll.total + check.mod - check.disadvantageValue}</div>`;\n \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.odg52hjPLKceCKhr"}},"_id":"Qtaf4lJOtW9FFkl9"}
{"name":"Regeneration","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/angel.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nawait regenerate(currentActor);\n\n\nasync function regenerate(actor){\n  const name = currentActor.data.name;\n  let content = `<div>${name}</div>`\n\n  const [lepRollText, lepResultText] = await regenerateLep(currentActor);\n  const [auRollText, auResultText] = await regenerateAu(currentActor);\n  const [aspRollText, aspResultText] = await regenerateAsp(currentActor);\n\n  const regenContent = lepRollText + aspRollText + lepResultText + auResultText + aspResultText;\n  if(regenContent) {\n    content += regenContent;\n  } else {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Bereits vollständig regeneriert :)</div>`;\n  }\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\n// LeP Regeneration\nasync function regenerateLep(actor){\n  const resource = currentActor.data.data.base.resources['vitality'];\n    if(resource.value >= resource.max) {\n\treturn ['', ''];\n  }\n\n  const [mod, modText] = await getLepBonusResult(currentActor); \n  const resultText = await regenerateResourceAndGetText(resource, 'LeP', mod, 'margin-top: 20px;', false);\n  return [modText, resultText];\n}\n\nasync function getLepBonusResult(actor) {\n let lepMod = 0;\n let resultText = '';\n const attributeValue = getAttributeValue(actor, 'constitution')\n const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n if(isSuccessfull) {\n\tlepMod += 1;\n } else {\n   resultText = `nicht `;\n }\n \n const text = `<div>KO-Probe war ${resultText}erfolgreich (${attributeValue - rollResult})</div>`;\n return [lepMod, text];\n}\n\n// AU Regeneration\nasync function regenerateAu(actor){\n  const resource = currentActor.data.data.base.resources['endurance'];\n  if(resource.value >= resource.max) {\n\treturn ['', ''];\n  }\n\n  const resultText = await regenerateResourceAndGetText(resource, 'AU', 0, '', true);\n  return ['', resultText];\n}\n\n\n// AsP Regeneration\nasync function regenerateAsp(actor){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  if(resource.value >= resource.max) {\n\treturn ['', ''];\n  }\n\n  // TODO Meisterliche Regeneration\n  const [mod, modText] = await getAspBonusResult(actor);\n  const resultText = await regenerateResourceAndGetText(resource, 'AsP', mod, '', false);\n  return [modText, resultText];\n}\n\nasync function getAspBonusResult(actor) {\n let mod = 0;\n let resultText = '';\n const attributeValue = getAttributeValue(actor, 'intuition')\n const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n if(isSuccessfull) {\n\tmod += 1;\n } else {\n   resultText = `nicht `;\n }\n\n mod += getAstralSpecialAbilitiesMod(actor);\n \n const text = `<div>IN-Probe war ${resultText}erfolgreich (${attributeValue - rollResult})</div>`;\n return [mod, text];\n}\n\nfunction getAstralSpecialAbilitiesMod(actor){\n const items = [...actor.items.values()];\n let mod = 0;\n \n const astraRegeneration = items.filter(i => i.data.name === 'Astrale Regeneration');\n if(astraRegeneration.length > 0){\n   mod += astraRegeneration[0].data.value;\n }\n \n if(items.filter(i => i.data.name === 'Regeneration I')){\n   mod += 1;\n }\n if(items.filter(i => i.data.name === 'Regeneration II')){\n   mod += 1;\n }\n\n return mod;\n}\n\n// Generic Functions\nasync function rollD6(){\n  const roll = await new Roll(`1d6`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\nasync function isAttributeBonusSuccessfull(attributeValue) {\n  const roll = await new Roll(`1d20cs<=${attributeValue}`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return [result, roll.total];\n}\n\nasync function regenerateResourceAndGetText(resource, resourceName, mod, style, setFull) {\n  let total = 0;\n  if(setFull) {\n    total = 10000;\n  } else {\n    total = (await rollD6()) + mod;\n  }\n\n  const previousValue = resource.value;\n  const newValue = regenerateResource(resource, total);\n  \n  if(setFull) {\n    return `<div style=\"${style} font-weight: bold\">${resourceName} regeneriert (${previousValue} -> ${newValue})</div>`;\n  } \n  \n  return `<div style=\"${style} font-weight: bold\">${resourceName} regeneriert: ${total} (${previousValue} -> ${newValue})</div>`;\n}\n\nfunction regenerateResource(resource, value) {\n  if((resource.value + value) < resource.max){\n\tresource.value += value;\n  } else {\n    resource.value = resource.max;\n  }\n  return resource.value;\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.6qhiO18RUYdiqnZC"}},"_id":"QvUZcCE7Cps52i9i"}
{"name":"Schlechte Eigenschaft","type":"script","author":"C1tc77zu6CecTMux","img":"icons/svg/disadvantage_roll.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst disadvantages = getDisadvantages(currentActor);\nconst disadvantagesHtml = getDisadvantagesHtml(disadvantages);\n\nnew Dialog({\n  title: \"Schlechte Eigenschaft\",\n  content:`\n    <form>\n\t    <div class=\"form-group\">\n        <label>Eigenschaft</label>\n        <select id=\"attribute\">\n          <option value=\"courage\" selected=\"selected\">MU</option>\n          <option value=\"cleverness\">KL</option>\n          <option value=\"intuition\">IN</option>\n          <option value=\"charisma\">CH</option>\n          <option value=\"dexterity\">FF</option>\n          <option value=\"agility\">GE</option>\n          <option value=\"constitution\">KO</option>\n          <option value=\"strength\">KK</option>\n        </select>\n      </div>\n\t    <div class=\"form-group\">\n        <label>Nachteil</label>\n        <select id=\"disadvantage\">\n          ${disadvantagesHtml}\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Modifikator</label>\n        <input type='number' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll\",\n      callback: async (html) => {\n\t\t    const attribute = html.find('[id=\"attribute\"]').val();\n        const disadvantageName = html.find('[id=\"disadvantage\"]').val();\n        \n        const modResult = html.find('[id=\"modField\"]').val();\n\t\t    let mod = 0;\n\t\t    if(modResult !== '') {\n\t\t\t    mod = Number(modResult);\n\t\t    }\n        const disadvantageValue = Number(disadvantages.find(d => d.data.name === disadvantageName).data.data.value);\n        const attributeValue = getAttributeValue(actor, attribute)\n        const check = {\n          actor: actor,\n          attribute: attribute,\n          attributeValue: attributeValue,\n          disadvantageName: disadvantageName,\n          disadvantageValue: disadvantageValue,\n          mod: mod\n        }\n        \n\t\t    const rollResult = await rollCheck(check);\n\t\t    await createChatMessage(check, rollResult);\n      }\n    }\n  }\n},\n{\n   width: 250\n}).render(true);\n\n\nasync function rollCheck(check){\n  \n  const targetValue = check.attributeValue - check.disadvantageValue + check.mod;  \n  const roll = await new Roll(`1d20`).evaluate();\n  const rollResult = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n\n  return {\n    total: rollResult,\n    targetValue: targetValue,\n    isSuccessfull: rollResult <= targetValue,\n  }\n}\n\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\nfunction getDisadvantages(actor) {\n  if(!actor) {\n    return [];\n  }\n  const items = [...actor.items.values()];\n  return items.filter(i => i.data.type === 'disadvantage' && i.data.data.negativeAttribute === 1)\n}\n\nfunction getDisadvantagesHtml(disadvantages) {\n  if(!disadvantages) {\n    return '';\n  }\n  \n  let html = ''\n  for (item of disadvantages) {\n    html += `<option value=\"${item.data.name}\">${item.data.name}</option>`\n  }\n  \n  return html;\n}\n\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\n\nasync function createChatMessage(check, roll) {\n  let content = `<div style=\"font-weight: bold\">${actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px;\">${check.disadvantageName}(${check.disadvantageValue})</div>`;\n  if(roll.isSuccessfull) {\n    content += `<div style=\"font-weight: bold\">Erfolg (${roll.total})</div>`;\n  } else {\n    content += `<div style=\"font-weight: bold\">Misserfolg (${roll.total})</div>`;\n  }\n  content += `<div>${check.attributeValue - roll.total + check.mod - check.disadvantageValue}</div>`;\n \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"C1tc77zu6CecTMux":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.odg52hjPLKceCKhr"}},"_id":"STkyEGVmqTfJXwZe"}
{"name":"Schlechte Eigenschaft","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/disadvantage_roll.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst disadvantages = getDisadvantages(currentActor);\nconst disadvantagesHtml = getDisadvantagesHtml(disadvantages);\n\nnew Dialog({\n  title: \"Schlechte Eigenschaft\",\n  content:`\n    <form>\n\t    <div class=\"form-group\">\n        <label>Eigenschaft</label>\n        <select id=\"attribute\">\n          <option value=\"courage\" selected=\"selected\">MU</option>\n          <option value=\"cleverness\">KL</option>\n          <option value=\"intuition\">IN</option>\n          <option value=\"charisma\">CH</option>\n          <option value=\"dexterity\">FF</option>\n          <option value=\"agility\">GE</option>\n          <option value=\"constitution\">KO</option>\n          <option value=\"strength\">KK</option>\n        </select>\n      </div>\n\t    <div class=\"form-group\">\n        <label>Nachteil</label>\n        <select id=\"disadvantage\">\n          ${disadvantagesHtml}\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Modifikator</label>\n        <input type='number' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll\",\n      callback: async (html) => {\n\t\t    const attribute = html.find('[id=\"attribute\"]').val();\n        const disadvantageName = html.find('[id=\"disadvantage\"]').val();\n        \n        const modResult = html.find('[id=\"modField\"]').val();\n\t\t    let mod = 0;\n\t\t    if(modResult !== '') {\n\t\t\t    mod = Number(modResult);\n\t\t    }\n        const disadvantageValue = Number(disadvantages.find(d => d.data.name === disadvantageName).data.data.value);\n        const attributeValue = getAttributeValue(actor, attribute)\n        const check = {\n          actor: actor,\n          attribute: attribute,\n          attributeValue: attributeValue,\n          disadvantageName: disadvantageName,\n          disadvantageValue: disadvantageValue,\n          mod: mod\n        }\n        \n\t\t    const rollResult = await rollCheck(check);\n\t\t    await createChatMessage(check, rollResult);\n      }\n    }\n  }\n},\n{\n   width: 250\n}).render(true);\n\n\nasync function rollCheck(check){\n  \n  const targetValue = check.attributeValue - check.disadvantageValue + check.mod;  \n  const roll = await new Roll(`1d20`).evaluate();\n  const rollResult = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n\n  return {\n    total: rollResult,\n    targetValue: targetValue,\n    isSuccessfull: rollResult <= targetValue,\n  }\n}\n\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\nfunction getDisadvantages(actor) {\n  if(!actor) {\n    return [];\n  }\n  const items = [...actor.items.values()];\n  return items.filter(i => i.data.type === 'disadvantage' && i.data.data.negativeAttribute === 1)\n}\n\nfunction getDisadvantagesHtml(disadvantages) {\n  if(!disadvantages) {\n    return '';\n  }\n  \n  let html = ''\n  for (item of disadvantages) {\n    html += `<option value=\"${item.data.name}\">${item.data.name}</option>`\n  }\n  \n  return html;\n}\n\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\n\nasync function createChatMessage(check, roll) {\n  let content = `<div style=\"font-weight: bold\">${actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px;\">${check.disadvantageName}(${check.disadvantageValue})</div>`;\n  if(roll.isSuccessfull) {\n    content += `<div style=\"font-weight: bold\">Erfolg (${roll.total})</div>`;\n  } else {\n    content += `<div style=\"font-weight: bold\">Misserfolg (${roll.total})</div>`;\n  }\n  content += `<div>${check.attributeValue - roll.total + check.mod - check.disadvantageValue}</div>`;\n \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.odg52hjPLKceCKhr"}},"_id":"SgemcoQwqBkMcvnz"}
{"name":"Trefferpunkte erhalten","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/tp_add.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Trefferpunkte\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl oder Formel</label>\n        <input type='text' id=\"tpField\"></input>\n\t  </div>\n      <div class=\"form-group\">\n\t\t<label>Rüstung</label>\n        <input type='checkbox' id=\"armorField\" checked></input>\n      </div>\n      <div class=\"form-group\">\n        <label>Wunden</label>\n        <input type='checkbox' id=\"woundField\" checked></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n\t\tconst tpField = html.find('[id=\"tpField\"]').val();\n\t\tlet tpValue = 0;\n\t\tif(tpField !== '') {\n\t\t\ttpValue = tpField;\n\t\t}\n\n\t\tconst checkArmor = html.find('[id=\"armorField\"]')[0].checked;\n        const checkWounds = html.find('[id=\"woundField\"]')[0].checked;\n        const hitPointObj = {\n            actor: currentActor,\n            value: tpValue,\n            checkArmor: checkArmor,\n            checkWounds: checkWounds,\n\t\t};\n\t\t\n        const result = await dealHitPoints(hitPointObj);\n\t\tawait createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n//////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\nasync function dealHitPoints(hitPointObj) {\n  let armorRating = 0;\n  if(hitPointObj.checkArmor) {\n    armorRating = getActiveArmorRating(hitPointObj.actor);\n  }\n  \n  const oldLep = getCurrentLep(hitPointObj.actor);\n  const damage = await getDamage(hitPointObj.value, armorRating);\n  await dealDamage(hitPointObj.actor, damage);\n  \n  let wounds = 0;\n  if(hitPointObj.checkWounds) {\n    const woundTreshold = getWoundTreshold(hitPointObj.actor);\n    wounds = getWounds(damage, woundTreshold);\n    await addWounds(hitPointObj.actor, wounds);\n  }\n  \n  return {\n    actor: currentActor,\n    damage: damage,\n    wounds: wounds,\n\toldLep: oldLep,\n    newLep: oldLep - damage,\n  };\n}\n\nfunction getActiveArmorRating(actor) {\n  const passiveArmor = actor.data.data.base.combatAttributes.passive.physicalResistance.value;\n  const armors =  actor.items.filter(i => \n    i.data.type === 'armor' && (\n    i.data.data.equiped === true || \n    i.data.data.equipped === true));\n  \n  let activeArmor = 0;\n  for(const armor of armors) {\n    activeArmor += armor.data.data.armorClass;\n  }\n  \n  return passiveArmor + activeArmor;\n}\n\nfunction getCurrentLep(actor) {\n  return actor.data.data.base.resources['vitality'].value;\n}\n\nasync function getDamage(damageValue, armorRating) {\n  let damage = 0;\n  if(isNaN(damageValue)){\n    damage = await rollDice(damageValue);\n  } else {\n    damage = Number(damageValue);\n  }\n    \n  damage = damage - Number(armorRating);\n  if(damage < 1){\n    return 0;\n  }\n  return damage;\n}\n\nasync function rollDice(formula){\n  const roll = await new Roll(formula).evaluate();\n  let result = roll._total;\n  \n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nasync function dealDamage(actor, damage) {\n  if(damage < 1){\n    return;\n  }\n  \n  const lep = getCurrentLep(actor);\n  actor.update({_id: actor._id, 'data.base.resources.vitality.value': lep - damage});\n}\n\nfunction getWoundTreshold(actor) {\n  const constitution = actor.data.data.base.basicAttributes['constitution'].value;\n  let treshold = Math.round(constitution/2);\n  \n  const eisern = [...actor.items.values()].filter(i => i.data.name === 'Eisern');\n  if(eisern.length > 0) {\n    treshold += 2;\n  }\n  \n  const glasknochen = [...actor.items.values()].filter(i => i.data.name === 'Glasknochen');\n  if(glasknochen.length > 0) {\n    treshold -= 2;\n  }\n  \n  return treshold;\n}\n\nfunction getWounds(damage, treshold) {\n  if(damage < 1){\n    return 0;\n  }\n  return Math.floor(damage / treshold);\n}\n\nasync function addWounds(actor, wounds) {\n  if(wounds < 1){\n    return;\n  }\n  \n  const woundChanges = [{\n    key: \"data.base.combatAttributes.active.baseAttack.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseParry.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseRangedAttack.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseInitiative.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.basicAttributes.agility.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.movement.speed.value\",\n    value: -1,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  }];\n\n  let effectData = {\n    label: \"Wunde\",\n    icon: \"icons/svg/blood.svg\",\n    changes: woundChanges,\n\n    flags: {\n      core: {\n        statusId: \"wound\",\n      },\n    },\n  };\n  \n  let woundArray = [];\n  for (var i = 0; i < wounds; i++) {\n    woundArray.push(effectData);\n  }\n  \n  actor.createEmbeddedDocuments(\"ActiveEffect\", woundArray);\n  \n  return;\n}\n\nasync function createChatMessage(hitPointResult) {\n  let content = `<div>${hitPointResult.actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">Schaden erhalten: ${hitPointResult.damage} (${hitPointResult.oldLep} -> ${hitPointResult.newLep})</div>`;\n  if(hitPointResult.wounds > 0) {\n    if(hitPointResult.wounds === 1) {\n      content += `<div style=\"font-weight: bold\">Eine Wunde wurde verursacht</div>`;\n    } else {\n      content += `<div style=\"font-weight: bold\">${woundHealCount} Wunden wurden verursacht</div>`;\n    }\n  }\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.nF8GSbQYSqj2SuWG"}},"_id":"SpsRcjFi2LO40Jsf"}
{"name":"Bruchfaktor (Primärhand)","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/broken-sword.svg","scope":"global","command":"let currentActor = getActor();\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst combatState = currentActor.combatState\nif(!combatState.isArmed){\n  console.log('Abort, Actor is unarmed');\n  return;\n}\n\nawait breakTest(currentActor);\n\n// Functions\nasync function breakTest(actor){\n  const name = currentActor.data.name;\n  let content = `<div style=\"font-weight: bold\">${name}</div>`\n\n  const item = combatState.primaryHand.item.data;\n  content += `<div>${item.name}</div>`;\n  const breakTestText = await checkBreak(item);\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">${breakTestText}</div>`;\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\nasync function checkBreak(item){\n  const rollResult = await rollD6();\n  console.log(rollResult);\n  if(rollResult > item.data.breakingFactor){\n    item.data.breakingFactor += 1;\n    return `Bruchfaktor des Gegenstands ist gestiegen (${rollResult})`;\n  }\n  \n  item.data.breakingFactor = 99;\n  const brokenSuffix = ' (zerstört)';\n  if(!item.name.includes(brokenSuffix)){\n    item.name += brokenSuffix ;\n  }\n  \n  item.update({_id: item._id, name: item.name, 'data.breakingFactor': item.data.breakingFactor});\n  return `Gegenstand ist zerbrochen! (${rollResult})`;\n}\n\nasync function rollD6(){\n  const roll = await new Roll(`2d6`).evaluate();\n  let result = roll.dice[0].results[0].result;\n  result += roll.dice[0].results[1].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.yGPbE7KmiMk3RD2R"}},"_id":"Tmt1hnnM8HJB1Q3O"}
{"name":"Übernahme eines Körpers","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/statue.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst name = currentActor.data.name;\nconst attribute = currentActor.data.data.base.combatAttributes.passive.magicResistance.value;\nconst title = \"Übernahme eines Körpers\";\n\nnew Dialog({\n  title: title,\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Zielperson</label>\n        <input type='text' name='targetField'></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll!\",\n      callback: async (html) => {\n        let target = html.find('input[name=\\'targetField\\']').val();\n        \n        const roll = await new Roll(`1d20cs<=${attribute}`).evaluate();\n        const result = roll.dice[0].results[0].result;\n        let content = `<div>${name}</div><div>`\n        content += `<div>${title}</div><div>`\n        content += `<div>Zielperson: ${target}</div>`\n        if(roll.total) {\n          content += `Erfolg (${result})</div>`;\n        }\n        else {\n          content += `Misserfolg (${result})</div>`;\n        } \n        content += `${attribute - result} TaP*</div>`;\n        ChatMessage.create({\n          user : game.user._id,\n          content: content,\n          whisper : ChatMessage.getWhisperRecipients(\"GM\")\n        });\n      }\n    }\n  }\n},\n{\n   width: 450\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"core":{"sourceId":"Macro.HFN5519HyNsi4cou"}},"_id":"U3b3N94OPgcpg50n"}
{"name":"Schicksalspunkte setzen","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/schpkt_set.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Schicksalspunkte setzen\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl</label>\n        <input type='text' id=\"schPktField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n        const schPktField = html.find('[id=\"schPktField\"]').val();\n        let schPktValue = 0;\n        if(schPktField !== '') {\n          schPktValue = schPktField;\n        }\n\n        if(schPktValue < 0) {\n          return;\n        }\n        \n        const schPktObj = {\n          actor: currentActor,\n          value: schPktValue,\n        };\n        \n        const result = await setSchicksalspunkte(schPktObj);\n        await createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n/////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\n\n/////////////////////////////\n//-Schicksalspunkte  Basis-//\n/////////////////////////////\n\nasync function getSchicksalspunkte(actor, defaultValue) {\n  try {\n    const schPkt = actor.data.data.base.resources['schicksalspunkte'].value;\n    return schPkt;\n  } catch {\n    console.log('Creating Schicksalspunkte attribute');\n    \n    actor.data.data.base.resources['schicksalspunkte'] = {value: defaultValue, min: 0, max: defaultValue};\n  \n    return defaultValue;  \n  }\n}\n\nasync function setSchicksalspunkte(schPktObj) {\n  await getSchicksalspunkte(schPktObj.actor, schPktObj.value);\n  \n  await actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.value': schPktObj.value});\n  await actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.max': schPktObj.value});\n  \n  return {\n    actor: schPktObj.actor,\n    newSchPkt: schPktObj.value,\n  };\n}\n\n\n/////////////////////////////\n//------Chat  Message------//\n/////////////////////////////\n\nasync function createChatMessage(schPktResult) {\n  let content = `<div>${schPktResult.actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">Schicksalspunkte gesetzt: ${schPktResult.newSchPkt})</div>`;\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.Z8kXu0uzhVnrvYE8"}},"_id":"US9mEnCeJqLT8cWf"}
{"name":"Würfel rotieren: Y↑","type":"script","author":"4iG9cHcL1pAPAzDk","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-right_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationY';\nconst rotationStep = -90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('Y+');","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.C4f9M8iPRGelyq7f"}},"_id":"VzlMjcQnBiWOWtrP"}
{"_id":"W6s8wNqKu8hESeGp","name":"Abenteuerpunkte setzen","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/xp_set.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Abenteuerpunkte setzen\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl</label>\n        <input type='text' id=\"abtPktField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n        const abtPktField = html.find('[id=\"abtPktField\"]').val();\n        let abtPktValue = 0;\n        if(abtPktField !== '') {\n          abtPktValue = abtPktField;\n        }\n\n        if(abtPktValue < 0) {\n          return;\n        }\n        \n        const abtPktObj = {\n          actor: currentActor,\n          value: abtPktValue,\n        };\n        \n        const resultAbt = await setAbenteuerpunkte(abtPktObj);\n        const resultSch = await setSchicksalspunkte(abtPktObj);\n        \n        const result = {\n          actor: currentActor,\n          newAbtPkt: resultAbt.newAbtPkt,\n          newSchPkt: resultSch.newSchPkt,\n        };\n        \n        await createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n/////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\n\n/////////////////////////////\n//-Abenteuerpunkte  Basis-//\n/////////////////////////////\n\nasync function getAbenteuerpunkte(actor, defaultValue) {\n  try {\n    const schPkt = actor.data.data.base.resources['abenteuerpunkte'].value;\n    return schPkt;\n  } catch {\n    console.log('Creating Abenteuerpunkte attribute');\n    \n    actor.data.data.base.resources['abenteuerpunkte'] = {value: defaultValue, min: 0, max: defaultValue};\n  \n    return defaultValue;  \n  }\n}\n\nasync function setAbenteuerpunkte(abtPktObj) {\n  await getAbenteuerpunkte(abtPktObj.actor, abtPktObj.value);\n  \n  await actor.update({_id: actor._id, 'data.base.resources.abenteuerpunkte.value': abtPktObj.value});\n  await actor.update({_id: actor._id, 'data.base.resources.abenteuerpunkte.max': abtPktObj.value});\n  \n  return {\n    actor: abtPktObj.actor,\n    newAbtPkt: abtPktObj.value,\n  };\n}\n\n\n\n/////////////////////////////\n//-Schicksalspunkte  Basis-//\n/////////////////////////////\n\nasync function getSchicksalspunkte(actor, defaultValue) {\n  try {\n    const schPkt = actor.data.data.base.resources['schicksalspunkte'].value;\n    return schPkt;\n  } catch {\n    console.log('Creating Schicksalspunkte attribute');\n    \n    actor.data.data.base.resources['schicksalspunkte'] = {value: defaultValue, min: 0, max: defaultValue};\n  \n    return defaultValue;  \n  }\n}\n\nasync function setSchicksalspunkte(schPktObj) {\n  const actor = schPktObj.actor;\n  \n  const schPktValue = calculateSchicksalspunkte(schPktObj.value);\n  await getSchicksalspunkte(actor, schPktValue);\n  \n  await schPktObj.actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.value': schPktValue});\n  await schPktObj.actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.max': schPktValue});\n  \n  return {\n    actor: actor,\n    newSchPkt: schPktValue,\n  };\n}\n\nfunction calculateSchicksalspunkte(abtPktValue) {\n  const floatValue = (abtPktValue / 500) + 2;\n  return floatValue | 0;\n}\n\n\n\n/////////////////////////////\n//------Chat  Message------//\n/////////////////////////////\n\nasync function createChatMessage(abtPktResult) {\n  let content = `<div>${abtPktResult.actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">Abenteuerpunkte gesetzt: (${abtPktResult.newAbtPkt})</div>`;\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">Schicksalspunkte gesetzt: (${abtPktResult.newSchPkt})</div>`;\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"_id":"WPUwE8DEspjxfa8J","name":"Etage runter","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/down.svg","scope":"global","command":"const tokens = canvas.tokens.controlled.filter( t => \n  t.data.name === 'Körperlose Gestalt' &&\n  token.data.elevation > -10\n);\n\nconst updates = tokens.map(\nfunction (token) {\n  return ({_id: token.id,elevation: token.data.elevation - 20})\n})\n\nawait canvas.scene.updateEmbeddedDocuments(\"Token\", updates)","folder":null,"sort":800000,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"name":"Würfel rotieren: X↑","type":"script","author":"llLOJOQw8eeTLl9B","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-up_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationX';\nconst rotationStep = 90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('X+');","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.Nx9BuvWk2MqAeRUz"}},"_id":"Wi18yhWZlZu3sGRA"}
{"_id":"Xpzh9If4MhD9ICaW","name":"Schlechte Eigenschaft","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/disadvantage_roll.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst disadvantages = getDisadvantages(currentActor);\nconst disadvantagesHtml = getDisadvantagesHtml(disadvantages);\n\nnew Dialog({\n  title: \"Schlechte Eigenschaft\",\n  content:`\n    <form>\n\t    <div class=\"form-group\">\n        <label>Eigenschaft</label>\n        <select id=\"attribute\">\n          <option value=\"courage\" selected=\"selected\">MU</option>\n          <option value=\"cleverness\">KL</option>\n          <option value=\"intuition\">IN</option>\n          <option value=\"charisma\">CH</option>\n          <option value=\"dexterity\">FF</option>\n          <option value=\"agility\">GE</option>\n          <option value=\"constitution\">KO</option>\n          <option value=\"strength\">KK</option>\n        </select>\n      </div>\n\t    <div class=\"form-group\">\n        <label>Nachteil</label>\n        <select id=\"disadvantage\">\n          ${disadvantagesHtml}\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Modifikator</label>\n        <input type='number' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll\",\n      callback: async (html) => {\n\t\t    const attribute = html.find('[id=\"attribute\"]').val();\n        const disadvantageName = html.find('[id=\"disadvantage\"]').val();\n        \n        const modResult = html.find('[id=\"modField\"]').val();\n\t\t    let mod = 0;\n\t\t    if(modResult !== '') {\n\t\t\t    mod = Number(modResult);\n\t\t    }\n        const disadvantageValue = Number(disadvantages.find(d => d.data.name === disadvantageName).data.data.value);\n        const attributeValue = getAttributeValue(actor, attribute)\n        const check = {\n          actor: actor,\n          attribute: attribute,\n          attributeValue: attributeValue,\n          disadvantageName: disadvantageName,\n          disadvantageValue: disadvantageValue,\n          mod: mod\n        }\n        \n\t\t    const rollResult = await rollCheck(check);\n\t\t    await createChatMessage(check, rollResult);\n      }\n    }\n  }\n},\n{\n   width: 250\n}).render(true);\n\n\nasync function rollCheck(check){\n  \n  const targetValue = check.attributeValue - check.disadvantageValue + check.mod;  \n  const roll = await new Roll(`1d20`).evaluate();\n  const rollResult = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n\n  return {\n    total: rollResult,\n    targetValue: targetValue,\n    isSuccessfull: rollResult <= targetValue,\n  }\n}\n\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\nfunction getDisadvantages(actor) {\n  if(!actor) {\n    return [];\n  }\n  const items = [...actor.items.values()];\n  console.log(items.filter(i => i.data.type === 'disadvantage'));\n  const disadv = items.filter(i => i.data.type === 'disadvantage' && i.data.data.negativeAttribute === 1)\n  return disadv \n}\n\nfunction getDisadvantagesHtml(disadvantages) {\n  if(!disadvantages) {\n    return '';\n  }\n  \n  let html = ''\n  for (item of disadvantages) {\n    html += `<option value=\"${item.data.name}\">${item.data.name}</option>`\n  }\n  \n  return html;\n}\n\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\n\nasync function createChatMessage(check, roll) {\n  let content = `<div style=\"font-weight: bold\">${actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px;\">${check.disadvantageName}(${check.disadvantageValue})</div>`;\n  if(roll.isSuccessfull) {\n    content += `<div style=\"font-weight: bold\">Erfolg (${roll.total})</div>`;\n  } else {\n    content += `<div style=\"font-weight: bold\">Misserfolg (${roll.total})</div>`;\n  }\n  content += `<div>${check.attributeValue - roll.total + check.mod - check.disadvantageValue}</div>`;\n \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.odg52hjPLKceCKhr"}}}
{"name":"LeP hinzugewinn","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/lep_add.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"LeP hinzugewinn\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl oder Formel</label>\n        <input type='text' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n\t\t    const modResult = html.find('[id=\"modField\"]').val();\n\t\t    let modValue = 0;\n\t\t    if(modResult !== '') {\n\t\t\t    modValue = modResult;\n\t\t    }\n        const result = await addLep(currentActor, modValue);\n        await createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//--------LeP Regeneration--------//\n////////////////////////////////////\nasync function addLep(actor, lepValue){\n  const resource = currentActor.data.data.base.resources['vitality'];\n  if(resource.value >= resource.max) {\n\t  return undefined;\n  }\n\n  let lepTotal = 0;\n  if(isNaN(lepValue)){\n    lepTotal = await rollDice(lepValue);\n  } else {\n    lepTotal = Number(lepValue);\n  }\n\n  const regObject = {\n\t  resource: resource, \n\t  total: lepTotal\n  };\n  \n  const resourceResult = await regenerateResource(regObject); \n  const healedWounds = await tryHealWounds(actor, lepTotal);\n  \n  await actor.update({_id: actor._id, 'data.base.resources.vitality.value': resourceResult.newValue});\n  return {\n    actor: actor,\n    total: lepTotal,\n    oldValue: resourceResult.oldValue,\n\t  newValue: resourceResult.newValue,\n\t  healedWounds: healedWounds,\n  }\n}\n\nasync function tryHealWounds(actor, healValue){\n  const healTreshold = 7;\n  if(healValue < healTreshold){\n    return 0;\n  }\n  \n  let woundHealCount = Math.floor(healValue / healTreshold);  \n  let wounds = actor\n    .getEmbeddedCollection(\"ActiveEffect\")\n    .filter(e => e.data.label == 'Wunde');\n\n  if(!wounds || wounds.length < 1) {\n    return 0;\n  }\t\n\n  if(woundHealCount > wounds.length) {\n    woundHealCount = wounds.length;\n  }\n\n  wounds = wounds.slice(0, woundHealCount);\n  const ids = wounds.map(w => w.data._id);\n  await actor.deleteEmbeddedDocuments(\"ActiveEffect\", ids);\n  \n  return woundHealCount;\n}\n\n\n\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\nasync function rollDice(formula){\n  const roll = await new Roll(formula).evaluate();\n  const result = roll._total; \n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\n\nasync function regenerateResource(obj) {\n  const total = obj.total;\n  const previousValue = obj.resource.value;\n  const newValue = await getNewResourceValue(obj, total);\n\n  return {\n    oldValue: previousValue,\n\t  newValue: newValue\n  };\n}\n\n\nasync function getNewResourceValue(obj, value) {\n  if((obj.resource.value + value) < obj.resource.max){\n    return obj.resource.value + value;\n  }\n  \n  return obj.resource.max;\n}\n\nasync function createChatMessage(result) {\n  let content = `<div style=\"font-weight: bold\">${result.actor.name}</div>`;\n  if(!result) {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Bereits vollständig regeneriert :)</div>`;\n  } else {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">LeP regeneriert: ${result.total} (${result.oldValue} -> ${result.newValue})</div>`;\n  \n\t  const wounds = result.healedWounds;\n    if(wounds > 0) {\n      if(wounds === 1) {\n        content += `<div style=\"font-weight: bold\">Eine Wunde wurde geschlossen</div>`;\n      } else {\n        content += `<div style=\"font-weight: bold\">${wounds} Wunden wurden geschlossen</div>`;\n      }\n    }\n  }\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"core":{"sourceId":"Macro.nKjfKCyRMhoPlFLH"},"combat-utility-belt":{"macroTrigger":""}},"_id":"YsiCDA442WzMeACF"}
{"name":"Schicksalspunkte Info","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/schpkt_info.svg","scope":"global","command":"new Dialog({\n  title: \"Schicksalspunkte Info\",\n  content:`\n<p>Anzahl der Schicksalspunkte: 2 SchiP + (1 SchiP pro 500 AP)</p>\n<table>\n<thead>\n  <tr>\n    <th>Effekt</th>\n    <th>Kosten</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td>7 Lebenspunkte und eine Wunde spontan heilen</td>\n    <td>1 SchiP</td>\n  </tr>\n  <tr>\n    <td>Zufall, der das eigene Leben gerade so rettet</td>\n    <td>2 SchiP</td>\n  </tr>\n  <tr>\n    <td>Zufall, der das Leben rettet und dem Helden weiterhilft</td>\n    <td>5 Schip</td>\n  </tr>\n  <tr>\n    <td>Eine Probe wiederholen</td>\n    <td>1 SchiP</td>\n  </tr>\n  <tr>\n    <td>Eine Probe noch einmal (und noch einmal) wiederholen</td>\n    <td>2 SchiP (3 SchiP)</td>\n  </tr>\n  <tr>\n    <td>Überlebensgroßer Talentwert/Eigenschaftswert</td>\n    <td>1 SchiP pro 2 TaP/ 1 Eigenschaftspunkt</td>\n  </tr>\n  <tr>\n    <td>Geistesblitz</td>\n    <td>1 SchiP</td>\n  </tr>\n  <tr>\n    <td>Weltgestaltung / Szenenkauf</td>\n    <td>1–5 SchiP</td>\n  </tr>\n</tbody>\n</table>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n      }\n    }\n  }\n},\n{\n   width: 550\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.LM3WpfEY1VyTHOuP"}},"_id":"YtuArTzQShFvMoQ8"}
{"name":"Magieresistenzprobe","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/aura.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst name = currentActor.data.name;\nconst magicResistance = currentActor.data.data.base.combatAttributes.passive.magicResistance.value;\n\nconst roll = await new Roll(`1d20cs<=${magicResistance}`).evaluate();\nconst result = roll.dice[0].results[0].result;\ngame.dice3d.showForRoll(roll); // remove this line if you dont want dice to be shown at all!\nlet content = `<div>${name}</div><div>`\ncontent += `<div>Magieresistenz (${magicResistance})</div><div>`\nif(roll.total) {\n  content += `Erfolg (${result})</div>`;\n}\nelse {\n  content += `Misserfolg (${result})</div>`;\n} \ncontent += `<div>${magicResistance-result}</div>`\nChatMessage.create({content: content});","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"core":{"sourceId":"Macro.7ZFATfYzhP0HeKat"}},"_id":"Z5yHJRIuY1rGidtH"}
{"_id":"Z8kXu0uzhVnrvYE8","name":"Schicksalspunkte setzen","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/schpkt_set.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Schicksalspunkte setzen\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl</label>\n        <input type='text' id=\"schPktField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n        const schPktField = html.find('[id=\"schPktField\"]').val();\n        let schPktValue = 0;\n        if(schPktField !== '') {\n          schPktValue = schPktField;\n        }\n\n        if(schPktValue < 0) {\n          return;\n        }\n        \n        const schPktObj = {\n          actor: currentActor,\n          value: schPktValue,\n        };\n        \n        const result = await setSchicksalspunkte(schPktObj);\n        await createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n/////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\n\n/////////////////////////////\n//-Schicksalspunkte  Basis-//\n/////////////////////////////\n\nasync function getSchicksalspunkte(actor, defaultValue) {\n  try {\n    const schPkt = actor.data.data.base.resources['schicksalspunkte'].value;\n    return schPkt;\n  } catch {\n    console.log('Creating Schicksalspunkte attribute');\n    \n    actor.data.data.base.resources['schicksalspunkte'] = {value: defaultValue, min: 0, max: defaultValue};\n  \n    return defaultValue;  \n  }\n}\n\nasync function setSchicksalspunkte(schPktObj) {\n  await getSchicksalspunkte(schPktObj.actor, schPktObj.value);\n  \n  await actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.value': schPktObj.value});\n  await actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.max': schPktObj.value});\n  \n  return {\n    actor: schPktObj.actor,\n    newSchPkt: schPktObj.value,\n  };\n}\n\n\n/////////////////////////////\n//------Chat  Message------//\n/////////////////////////////\n\nasync function createChatMessage(schPktResult) {\n  let content = `<div>${schPktResult.actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">Schicksalspunkte gesetzt: ${schPktResult.newSchPkt})</div>`;\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"name":"Würfel rotieren: X↓","type":"script","author":"llLOJOQw8eeTLl9B","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-down_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationX';\nconst rotationStep = -90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('X-');","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.f1kMo84JjjKKrjLd"}},"_id":"ZQCAb1ObvRqO1qGn"}
{"_id":"ZV8vcXRkcHEZcSih","name":"Gegenstände beleben","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/thrust.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst name = currentActor.data.name;\nconst attribute = currentActor.data.data.base.basicAttributes['intuition'].value\n\nnew Dialog({\n  title: \"Gegenstand beleben\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Gegenstand</label>\n        <input type='text' name='itemField'></input>\n      </div>\n      <div class=\"form-group\">\n        <label>Aktionsbeschreibung</label>\n        <input type='text' name='actionField'></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll!\",\n      callback: async (html) => {\n        let item = html.find('input[name=\\'itemField\\']').val();\n        let action = html.find('input[name=\\'actionField\\']').val();\n        \n        const roll = await new Roll(`1d20cs<=${attribute}`).evaluate();\n        const result = roll.dice[0].results[0].result;\n        let content = `<div>${name}</div><div>`\n        content += `<div>Gegenstand beleben</div><div>`\n        content += `<div>Gegenstand: ${item}</div>`\n        content += `<div>Aktion: ${action }</div>`\n        if(roll.total) {\n          content += `Erfolg (${result})</div>`;\n        }\n        else {\n          content += `Misserfolg (${result})</div>`;\n        } \n        content += `${attribute - result}</div>`;\n        ChatMessage.create({\n          user : game.user._id,\n          content: content,\n          whisper : ChatMessage.getWhisperRecipients(\"GM\")\n        });\n      }\n    }\n  }\n},\n{\n   width: 450\n}).render(true);","folder":null,"sort":900000,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{}}
{"name":"New Macro","type":"chat","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{},"_id":"ZdqyP2t4s6aVrmOC"}
{"_id":"aGxyMjbq8S6VLa2D","name":"Schlechte Eigenschaft","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/disadvantage_roll.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst disadvantages = getDisadvantages(currentActor);\nconst disadvantagesHtml = getDisadvantagesHtml(disadvantages);\n\nnew Dialog({\n  title: \"Schlechte Eigenschaft\",\n  content:`\n    <form>\n\t    <div class=\"form-group\">\n        <label>Eigenschaft</label>\n        <select id=\"attribute\">\n          <option value=\"courage\" selected=\"selected\">MU</option>\n          <option value=\"cleverness\">KL</option>\n          <option value=\"intuition\">IN</option>\n          <option value=\"charisma\">CH</option>\n          <option value=\"dexterity\">FF</option>\n          <option value=\"agility\">GE</option>\n          <option value=\"constitution\">KO</option>\n          <option value=\"strength\">KK</option>\n        </select>\n      </div>\n\t    <div class=\"form-group\">\n        <label>Nachteil</label>\n        <select id=\"disadvantage\">\n          ${disadvantagesHtml}\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Modifikator</label>\n        <input type='number' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll\",\n      callback: async (html) => {\n\t\t    const attribute = html.find('[id=\"attribute\"]').val();\n        const disadvantageName = html.find('[id=\"disadvantage\"]').val();\n        \n        const modResult = html.find('[id=\"modField\"]').val();\n\t\t    let mod = 0;\n\t\t    if(modResult !== '') {\n\t\t\t    mod = Number(modResult);\n\t\t    }\n        const disadvantageValue = Number(disadvantages.find(d => d.data.name === disadvantageName).data.data.value);\n        const attributeValue = getAttributeValue(actor, attribute)\n        const check = {\n          actor: actor,\n          attribute: attribute,\n          attributeValue: attributeValue,\n          disadvantageName: disadvantageName,\n          disadvantageValue: disadvantageValue,\n          mod: mod\n        }\n        \n\t\t    const rollResult = await rollCheck(check);\n\t\t    await createChatMessage(check, rollResult);\n      }\n    }\n  }\n},\n{\n   width: 250\n}).render(true);\n\n\nasync function rollCheck(check){\n  \n  const targetValue = check.attributeValue - check.disadvantageValue + check.mod;  \n  const roll = await new Roll(`1d20`).evaluate();\n  const rollResult = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n\n  return {\n    total: rollResult,\n    targetValue: targetValue,\n    isSuccessfull: rollResult <= targetValue,\n  }\n}\n\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\nfunction getDisadvantages(actor) {\n  if(!actor) {\n    return [];\n  }\n  const items = [...actor.items.values()];\n  return items.filter(i => i.data.type === 'disadvantage' && i.data.data.negativeAttribute === 1)\n}\n\nfunction getDisadvantagesHtml(disadvantages) {\n  if(!disadvantages) {\n    return '';\n  }\n  \n  let html = ''\n  for (item of disadvantages) {\n    html += `<option value=\"${item.data.name}\">${item.data.name}</option>`\n  }\n  \n  return html;\n}\n\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\n\nasync function createChatMessage(check, roll) {\n  let content = `<div style=\"font-weight: bold\">${actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px;\">${check.disadvantageName}(${check.disadvantageValue})</div>`;\n  if(roll.isSuccessfull) {\n    content += `<div style=\"font-weight: bold\">Erfolg (${roll.total})</div>`;\n  } else {\n    content += `<div style=\"font-weight: bold\">Misserfolg (${roll.total})</div>`;\n  }\n  content += `<div>${check.attributeValue - roll.total + check.mod - check.disadvantageValue}</div>`;\n \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.odg52hjPLKceCKhr"}}}
{"_id":"b1fcysVeVUB3KyLq","name":"Bruchfaktor (Sekundärhand)","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/broken-shield.svg","scope":"global","command":"let currentActor = getActor();\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst combatState = currentActor.combatState\nif(!combatState.isArmed){\n  console.log('Abort, Actor is unarmed');\n  return;\n}\n\nawait breakTest(currentActor);\n\n// Functions\nasync function breakTest(actor){\n  const name = currentActor.data.name;\n  let content = `<div>${name}</div>`\n\n  const item = combatState.secondaryand.item.data;\n  content += `<div>${item.name}</div>`;\n  const breakTestText = await checkBreak(item);\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">${breakTestText}</div>`;\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\nasync function checkBreak(item){\n  const rollResult = await rollD6();\n  console.log(rollResult);\n  if(rollResult > item.data.breakingFactor){\n    item.data.breakingFactor += 1;\n    return `Bruchfaktor des Gegenstands ist gestiegen (${rollResult})`;\n  }\n  \n  item.data.breakingFactor = 99;\n  const brokenSuffix = ' (zerstört)';\n  if(!item.name.includes(brokenSuffix)){\n    item.name += brokenSuffix ;\n  }\n  return `Gegenstand ist zerbrochen! (${rollResult})`;\n}\n\nasync function rollD6(){\n  const roll = await new Roll(`2d6`).evaluate();\n  let result = roll.dice[0].results[0].result;\n  result += roll.dice[0].results[1].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"name":"Nahkampfpatzer","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/criticalfail_combat.svg","scope":"global","command":"const table = game.tables.find(t => t.data.name === 'Nahkampfpatzer');\ntable.draw();","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"core":{"sourceId":"Macro.9RO4FdFsO6DvPWad"}},"_id":"bX7qchfm2WDfjD55"}
{"_id":"bYVB2vXoaTuBua6F","name":"Würfel rotieren: ↑ (Z)","type":"script","author":"4iG9cHcL1pAPAzDk","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-curve-right_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationZ';\nconst rotationStep = 90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('Z+');","folder":"H9tUqbcCUC0lQyzF","sort":150000,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"name":"Gegenstände beleben","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/thrust.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst name = currentActor.data.name;\nconst attribute = currentActor.data.data.base.basicAttributes['intuition'].value\n\nnew Dialog({\n  title: \"Gegenstand beleben\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Gegenstand</label>\n        <input type='text' name='itemField'></input>\n      </div>\n      <div class=\"form-group\">\n        <label>Aktionsbeschreibung</label>\n        <input type='text' name='actionField'></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll!\",\n      callback: async (html) => {\n        let item = html.find('input[name=\\'itemField\\']').val();\n        let action = html.find('input[name=\\'actionField\\']').val();\n        \n        const roll = await new Roll(`1d20cs<=${attribute}`).evaluate();\n        const result = roll.dice[0].results[0].result;\n        let content = `<div>${name}</div><div>`\n        content += `<div>Gegenstand beleben</div><div>`\n        content += `<div>Gegenstand: ${item}</div>`\n        content += `<div>Aktion: ${action }</div>`\n        if(roll.total) {\n          content += `Erfolg (${result})</div>`;\n        }\n        else {\n          content += `Misserfolg (${result})</div>`;\n        } \n        content += `${attribute - result}</div>`;\n        ChatMessage.create({\n          user : game.user._id,\n          content: content,\n          whisper : ChatMessage.getWhisperRecipients(\"GM\")\n        });\n      }\n    }\n  }\n},\n{\n   width: 450\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"core":{"sourceId":"Macro.ZV8vcXRkcHEZcSih"}},"_id":"cfC4JekCJU5OhyEH"}
{"_id":"chLGvuUuVIE48sDs","name":"Bruchfaktor (Sekundärhand)","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/broken-shield.svg","scope":"global","command":"let currentActor = getActor();\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst combatState = currentActor.combatState\nif(!combatState.isArmed){\n  console.log('Abort, Actor is unarmed');\n  return;\n}\n\nawait breakTest(currentActor);\n\n// Functions\nasync function breakTest(actor){\n  const name = currentActor.data.name;\n  let content = `<div>${name}</div>`\n\n  const item = combatState.secondaryHand.item.data;\n  content += `<div>${item.name}</div>`;\n  const breakTestText = await checkBreak(item);\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">${breakTestText}</div>`;\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\nasync function checkBreak(item){\n  const rollResult = await rollD6();\n  console.log(rollResult);\n  if(rollResult > item.data.breakingFactor){\n    item.data.breakingFactor += 1;\n    return `Bruchfaktor des Gegenstands ist gestiegen (${rollResult})`;\n  }\n  \n  item.data.breakingFactor = 99;\n  const brokenSuffix = ' (zerstört)';\n  if(!item.name.includes(brokenSuffix)){\n    item.name += brokenSuffix ;\n  }\n\n  item.update({_id: item._id, name: item.name, 'data.breakingFactor': item.data.breakingFactor});\n  return `Gegenstand ist zerbrochen! (${rollResult})`;\n}\n\nasync function rollD6(){\n  const roll = await new Roll(`2d6`).evaluate();\n  let result = roll.dice[0].results[0].result;\n  result += roll.dice[0].results[1].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.b1fcysVeVUB3KyLq"}}}
{"_id":"f1kMo84JjjKKrjLd","name":"Würfel rotieren: X↓","type":"script","author":"4iG9cHcL1pAPAzDk","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-down_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationX';\nconst rotationStep = -90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('X-');","folder":"H9tUqbcCUC0lQyzF","sort":75000,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"name":"Trefferpunkte erhalten","type":"script","author":"C1tc77zu6CecTMux","img":"icons/svg/tp_add.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Trefferpunkte\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl oder Formel</label>\n        <input type='text' id=\"tpField\"></input>\n\t  </div>\n      <div class=\"form-group\">\n\t\t<label>Rüstung</label>\n        <input type='checkbox' id=\"armorField\" checked></input>\n      </div>\n      <div class=\"form-group\">\n        <label>Wunden</label>\n        <input type='checkbox' id=\"woundField\" checked></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n\t\tconst tpField = html.find('[id=\"tpField\"]').val();\n\t\tlet tpValue = 0;\n\t\tif(tpField !== '') {\n\t\t\ttpValue = tpField;\n\t\t}\n\n\t\tconst checkArmor = html.find('[id=\"armorField\"]')[0].checked;\n        const checkWounds = html.find('[id=\"woundField\"]')[0].checked;\n        const hitPointObj = {\n            actor: currentActor,\n            value: tpValue,\n            checkArmor: checkArmor,\n            checkWounds: checkWounds,\n\t\t};\n\t\t\n        const result = await dealHitPoints(hitPointObj);\n\t\tawait createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n//////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\nasync function dealHitPoints(hitPointObj) {\n  let armorRating = 0;\n  if(hitPointObj.checkArmor) {\n    armorRating = getActiveArmorRating(hitPointObj.actor);\n  }\n  \n  const oldLep = getCurrentLep(hitPointObj.actor);\n  const damage = await getDamage(hitPointObj.value, armorRating);\n  await dealDamage(hitPointObj.actor, damage);\n  \n  let wounds = 0;\n  if(hitPointObj.checkWounds) {\n    const woundTreshold = getWoundTreshold(hitPointObj.actor);\n    wounds = getWounds(damage, woundTreshold);\n    await addWounds(hitPointObj.actor, wounds);\n  }\n  \n  return {\n    actor: currentActor,\n    damage: damage,\n    wounds: wounds,\n\toldLep: oldLep,\n    newLep: oldLep - damage,\n  };\n}\n\nfunction getActiveArmorRating(actor) {\n  return actor.data.data.base.combatAttributes.passive.physicalResistance.value;\n}\n\nfunction getCurrentLep(actor) {\n  return actor.data.data.base.resources['vitality'].value;\n}\n\nasync function getDamage(damageValue, armorRating) {\n  let damage = 0;\n  if(isNaN(damageValue)){\n    damage = await rollDice(damageValue);\n  } else {\n    damage = Number(damageValue);\n  }\n    \n  damage = damage - Number(armorRating);\n  if(damage < 1){\n    return 0;\n  }\n  return damage;\n}\n\nasync function rollDice(formula){\n  const roll = await new Roll(formula).evaluate();\n  let result = roll._total;\n  \n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nasync function dealDamage(actor, damage) {\n  if(damage < 1){\n    return;\n  }\n  \n  const lep = getCurrentLep(actor);\n  actor.update({_id: actor._id, 'data.base.resources.vitality.value': lep - damage});\n}\n\nfunction getWoundTreshold(actor) {\n  const constitution = actor.data.data.base.basicAttributes['constitution'].value;\n  let treshold = Math.round(constitution/2);\n  \n  const eisern = [...actor.items.values()].filter(i => i.data.name === 'Eisern');\n  if(eisern.length > 0) {\n    treshold += 2;\n  }\n  \n  const glasknochen = [...actor.items.values()].filter(i => i.data.name === 'Glasknochen');\n  if(glasknochen.length > 0) {\n    treshold -= 2;\n  }\n  \n  return treshold;\n}\n\nfunction getWounds(damage, treshold) {\n  if(damage < 1){\n    return 0;\n  }\n  return Math.floor(damage / treshold);\n}\n\nasync function addWounds(actor, wounds) {\n  if(wounds < 1){\n    return;\n  }\n  \n  const woundChanges = [{\n    key: \"data.base.combatAttributes.active.baseAttack.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseParry.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseRangedAttack.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseInitiative.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.basicAttributes.agility.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.movement.speed.value\",\n    value: -1,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  }];\n\n  let effectData = {\n    label: \"Wunde\",\n    icon: \"icons/svg/blood.svg\",\n    changes: woundChanges,\n\n    flags: {\n      core: {\n        statusId: \"wound\",\n      },\n    },\n  };\n  \n  let woundArray = [];\n  for (var i = 0; i < wounds; i++) {\n    woundArray.push(effectData);\n  }\n  \n  actor.createEmbeddedDocuments(\"ActiveEffect\", woundArray);\n  \n  return;\n}\n\nasync function createChatMessage(hitPointResult) {\n  let content = `<div>${hitPointResult.actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">Schaden erhalten: ${hitPointResult.damage} (${hitPointResult.oldLep} -> ${hitPointResult.newLep})</div>`;\n  if(hitPointResult.wounds > 0) {\n    if(hitPointResult.wounds === 1) {\n      content += `<div style=\"font-weight: bold\">Eine Wunde wurde verursacht</div>`;\n    } else {\n      content += `<div style=\"font-weight: bold\">${hitPointResult.wounds} Wunden wurden verursacht</div>`;\n    }\n  }\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"C1tc77zu6CecTMux":3},"flags":{"core":{"sourceId":"Macro.nF8GSbQYSqj2SuWG"},"combat-utility-belt":{"macroTrigger":""}},"_id":"gx1CC551xjcYcTGa"}
{"name":"Vollständige Regeneration","type":"script","author":"C1tc77zu6CecTMux","img":"icons/svg/heal.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nawait regenerate(currentActor);\n\n\n\nasync function regenerate(actor){\n  const name = currentActor.data.name;\n  let content = `<div>${name} hat vollständig regeneriert</div>`;\n\n  regenerateLep(currentActor);\n  regenerateAu(currentActor);\n  regenerateAsp(currentActor);\n  regenerateKap(currentActor);\n  healWounds();\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\n// LeP Regeneration\nfunction regenerateLep(actor){\n  const resource = currentActor.data.data.base.resources['vitality'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.vitality.value': newValue});\n}\n\n// AU Regeneration\nfunction regenerateAu(actor){\n  const resource = currentActor.data.data.base.resources['endurance'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.endurance.value': newValue});\n}\n\n\n// AsP Regeneration\nfunction regenerateAsp(actor){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.astralEnergy.value': newValue});\n}\n\n// KaP Regeneration\nfunction regenerateKap(actor){\n  const resource = actor.data.data.base.resources['karmicEnergy'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.karmicEnergy.value': newValue});\n}\n\n// Wunden heilen\nfunction healWounds(){\nconst wounds = currentActor\n.getEmbeddedCollection(\"ActiveEffect\")\n.filter(e => e.data.label == 'Wunde');\n\nconst ids = wounds.map(w => w.data._id);\n\ncurrentActor\n.deleteEmbeddedDocuments( \n  \"ActiveEffect\", \n  ids);\n}\n\n\n\n// Generic Functions\nfunction regenerateResource(resource) {\n  resource.value = resource.max;\n  \n  return resource.max;\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"C1tc77zu6CecTMux":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.Bkhs4rIfWMYWngag"}},"_id":"hOeVp9l7oSKBb3pj"}
{"name":"Vollständige Regeneration","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/heal.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nawait regenerate(currentActor);\n\n\n\nasync function regenerate(actor){\n  const name = currentActor.data.name;\n  let content = `<div>${name} hat vollständig regeneriert</div>`;\n\n  regenerateLep(currentActor);\n  regenerateAu(currentActor);\n  regenerateAsp(currentActor);\n  regenerateKap(currentActor);\n  healWounds();\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\n// LeP Regeneration\nfunction regenerateLep(actor){\n  const resource = currentActor.data.data.base.resources['vitality'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.vitality.value': newValue});\n}\n\n// AU Regeneration\nfunction regenerateAu(actor){\n  const resource = currentActor.data.data.base.resources['endurance'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.endurance.value': newValue});\n}\n\n\n// AsP Regeneration\nfunction regenerateAsp(actor){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.astralEnergy.value': newValue});\n}\n\n// KaP Regeneration\nfunction regenerateKap(actor){\n  const resource = actor.data.data.base.resources['karmicEnergy'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.karmicEnergy.value': newValue});\n}\n\n// Wunden heilen\nfunction healWounds(){\nconst wounds = currentActor\n.getEmbeddedCollection(\"ActiveEffect\")\n.filter(e => e.data.label == 'Wunde');\n\nconst ids = wounds.map(w => w.data._id);\n\ncurrentActor\n.deleteEmbeddedDocuments( \n  \"ActiveEffect\", \n  ids);\n}\n\n\n\n// Generic Functions\nfunction regenerateResource(resource) {\n  resource.value = resource.max;\n  \n  return resource.max;\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.Bkhs4rIfWMYWngag"}},"_id":"iUmml6n8fC1VInlY"}
{"name":"Unbewaffneter Nahkampfpatzer","type":"chat","author":"llLOJOQw8eeTLl9B","img":"icons/svg/criticalfail_unarmedcombat.svg","scope":"global","command":"const table = game.tables.find(t => t.data.name === 'Unbewaffneter Nahkampfpatzer');\ntable.draw();","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"core":{"sourceId":"Macro.OVEPy7cn8QCTcgzq"}},"_id":"jpWvEWYd9kiQqLj2"}
{"name":"Regeneration","type":"script","author":"C1tc77zu6CecTMux","img":"icons/svg/angel.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nawait regenerate(currentActor);\n\n\nasync function regenerate(actor){\n  const name = currentActor.data.name;\n  let content = `<div>${name}</div>`\n\n  const [lepRollText, lepResultText] = await regenerateLep(currentActor);\n  const [auRollText, auResultText] = await regenerateAu(currentActor);\n  const [aspRollText, aspResultText] = await regenerateAsp(currentActor);\n\n  const regenContent = lepRollText + aspRollText + lepResultText + auResultText + aspResultText;\n  if(regenContent) {\n    content += regenContent;\n  } else {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Bereits vollständig regeneriert :)</div>`;\n  }\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\n// LeP Regeneration\nasync function regenerateLep(actor){\n  const resource = currentActor.data.data.base.resources['vitality'];\n    if(resource.value >= resource.max) {\n\treturn ['', ''];\n  }\n\n  const [mod, modText] = await getLepBonusResult(currentActor); \n  const resultText = await regenerateResourceAndGetText(resource, 'LeP', mod, 'margin-top: 20px;', false);\n  return [modText, resultText];\n}\n\nasync function getLepBonusResult(actor) {\n let lepMod = 0;\n let resultText = '';\n const attributeValue = getAttributeValue(actor, 'constitution')\n const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n if(isSuccessfull) {\n\tlepMod += 1;\n } else {\n   resultText = `nicht `;\n }\n \n const text = `<div>KO-Probe war ${resultText}erfolgreich (${attributeValue - rollResult})</div>`;\n return [lepMod, text];\n}\n\n// AU Regeneration\nasync function regenerateAu(actor){\n  const resource = currentActor.data.data.base.resources['endurance'];\n  if(resource.value >= resource.max) {\n\treturn ['', ''];\n  }\n\n  const resultText = await regenerateResourceAndGetText(resource, 'AU', 0, '', true);\n  return ['', resultText];\n}\n\n\n// AsP Regeneration\nasync function regenerateAsp(actor){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  if(resource.value >= resource.max) {\n\treturn ['', ''];\n  }\n\n  // TODO Meisterliche Regeneration\n  const [mod, modText] = await getAspBonusResult(actor);\n  const resultText = await regenerateResourceAndGetText(resource, 'AsP', mod, '', false);\n  return [modText, resultText];\n}\n\nasync function getAspBonusResult(actor) {\n let mod = 0;\n let resultText = '';\n const attributeValue = getAttributeValue(actor, 'intuition')\n const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n if(isSuccessfull) {\n\tmod += 1;\n } else {\n   resultText = `nicht `;\n }\n\n mod += getAstralSpecialAbilitiesMod(actor);\n \n const text = `<div>IN-Probe war ${resultText}erfolgreich (${attributeValue - rollResult})</div>`;\n return [mod, text];\n}\n\nfunction getAstralSpecialAbilitiesMod(actor){\n const items = [...actor.items.values()];\n let mod = 0;\n \n const astraRegeneration = items.filter(i => i.data.name === 'Astrale Regeneration');\n if(astraRegeneration.length > 0){\n   mod += astraRegeneration[0].data.value;\n }\n \n if(items.filter(i => i.data.name === 'Regeneration I')){\n   mod += 1;\n }\n if(items.filter(i => i.data.name === 'Regeneration II')){\n   mod += 1;\n }\n\n return mod;\n}\n\n// Generic Functions\nasync function rollD6(){\n  const roll = await new Roll(`1d6`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\nasync function isAttributeBonusSuccessfull(attributeValue) {\n  const roll = await new Roll(`1d20cs<=${attributeValue}`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return [result, roll.total];\n}\n\nasync function regenerateResourceAndGetText(resource, resourceName, mod, style, setFull) {\n  let total = 0;\n  if(setFull) {\n    total = 10000;\n  } else {\n    total = (await rollD6()) + mod;\n  }\n\n  const previousValue = resource.value;\n  const newValue = regenerateResource(resource, total);\n  \n  if(setFull) {\n    return `<div style=\"${style} font-weight: bold\">${resourceName} regeneriert (${previousValue} -> ${newValue})</div>`;\n  } \n  \n  return `<div style=\"${style} font-weight: bold\">${resourceName} regeneriert: ${total} (${previousValue} -> ${newValue})</div>`;\n}\n\nfunction regenerateResource(resource, value) {\n  if((resource.value + value) < resource.max){\n\tresource.value += value;\n  } else {\n    resource.value = resource.max;\n  }\n  return resource.value;\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"C1tc77zu6CecTMux":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.6qhiO18RUYdiqnZC"}},"_id":"kJlZ5IyZRyUUVdh2"}
{"name":"Vollständige Regeneration","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/heal.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nawait regenerate(currentActor);\n\n\n\nasync function regenerate(actor){\n  const name = currentActor.data.name;\n  let content = `<div>${name} hat vollständig regeneriert</div>`;\n\n  regenerateLep(currentActor);\n  regenerateAu(currentActor);\n  regenerateAsp(currentActor);\n  regenerateKap(currentActor);\n  healWounds();\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\n// LeP Regeneration\nfunction regenerateLep(actor){\n  const resource = currentActor.data.data.base.resources['vitality'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.vitality.value': newValue});\n}\n\n// AU Regeneration\nfunction regenerateAu(actor){\n  const resource = currentActor.data.data.base.resources['endurance'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.endurance.value': newValue});\n}\n\n\n// AsP Regeneration\nfunction regenerateAsp(actor){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.astralEnergy.value': newValue});\n}\n\n// KaP Regeneration\nfunction regenerateKap(actor){\n  const resource = actor.data.data.base.resources['karmicEnergy'];\n  const newValue = regenerateResource(resource);\n  actor.update({_id: actor._id, 'data.base.resources.karmicEnergy.value': newValue});\n}\n\n// Wunden heilen\nfunction healWounds(){\nconst wounds = currentActor\n.getEmbeddedCollection(\"ActiveEffect\")\n.filter(e => e.data.label == 'Wunde');\n\nconst ids = wounds.map(w => w.data._id);\n\ncurrentActor\n.deleteEmbeddedDocuments( \n  \"ActiveEffect\", \n  ids);\n}\n\n\n\n// Generic Functions\nfunction regenerateResource(resource) {\n  resource.value = resource.max;\n  \n  return resource.max;\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.Bkhs4rIfWMYWngag"}},"_id":"kSQrNzpTIzWZPmvV"}
{"name":"Schlechte Eigenschaft","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/disadvantage_roll.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst disadvantages = getDisadvantages(currentActor);\nconst disadvantagesHtml = getDisadvantagesHtml(disadvantages);\n\nnew Dialog({\n  title: \"Schlechte Eigenschaft\",\n  content:`\n    <form>\n\t    <div class=\"form-group\">\n        <label>Eigenschaft</label>\n        <select id=\"attribute\">\n          <option value=\"courage\" selected=\"selected\">MU</option>\n          <option value=\"cleverness\">KL</option>\n          <option value=\"intuition\">IN</option>\n          <option value=\"charisma\">CH</option>\n          <option value=\"dexterity\">FF</option>\n          <option value=\"agility\">GE</option>\n          <option value=\"constitution\">KO</option>\n          <option value=\"strength\">KK</option>\n        </select>\n      </div>\n\t    <div class=\"form-group\">\n        <label>Nachteil</label>\n        <select id=\"disadvantage\">\n          ${disadvantagesHtml}\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Modifikator</label>\n        <input type='number' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll\",\n      callback: async (html) => {\n\t\t    const attribute = html.find('[id=\"attribute\"]').val();\n        const disadvantageName = html.find('[id=\"disadvantage\"]').val();\n        \n        const modResult = html.find('[id=\"modField\"]').val();\n\t\t    let mod = 0;\n\t\t    if(modResult !== '') {\n\t\t\t    mod = Number(modResult);\n\t\t    }\n        const disadvantageValue = Number(disadvantages.find(d => d.data.name === disadvantageName).data.data.value);\n        const attributeValue = getAttributeValue(actor, attribute)\n        const check = {\n          actor: actor,\n          attribute: attribute,\n          attributeValue: attributeValue,\n          disadvantageName: disadvantageName,\n          disadvantageValue: disadvantageValue,\n          mod: mod\n        }\n        \n\t\t    const rollResult = await rollCheck(check);\n\t\t    await createChatMessage(check, rollResult);\n      }\n    }\n  }\n},\n{\n   width: 250\n}).render(true);\n\n\nasync function rollCheck(check){\n  \n  const targetValue = check.attributeValue - check.disadvantageValue + check.mod;  \n  const roll = await new Roll(`1d20`).evaluate();\n  const rollResult = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n\n  return {\n    total: rollResult,\n    targetValue: targetValue,\n    isSuccessfull: rollResult <= targetValue,\n  }\n}\n\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\nfunction getDisadvantages(actor) {\n  if(!actor) {\n    return [];\n  }\n  const items = [...actor.items.values()];\n  return items.filter(i => i.data.type === 'disadvantage' && i.data.data.negativeAttribute === 1)\n}\n\nfunction getDisadvantagesHtml(disadvantages) {\n  if(!disadvantages) {\n    return '';\n  }\n  \n  let html = ''\n  for (item of disadvantages) {\n    html += `<option value=\"${item.data.name}\">${item.data.name}</option>`\n  }\n  \n  return html;\n}\n\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\n\nasync function createChatMessage(check, roll) {\n  let content = `<div style=\"font-weight: bold\">${actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px;\">${check.disadvantageName}(${check.disadvantageValue})</div>`;\n  if(roll.isSuccessfull) {\n    content += `<div style=\"font-weight: bold\">Erfolg (${roll.total})</div>`;\n  } else {\n    content += `<div style=\"font-weight: bold\">Misserfolg (${roll.total})</div>`;\n  }\n  content += `<div>${check.attributeValue - roll.total + check.mod - check.disadvantageValue}</div>`;\n \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.odg52hjPLKceCKhr"}},"_id":"l1QsCSnr6ITeMpXO"}
{"name":"Würfel rotieren: ↓ (Z)","type":"script","author":"aLuqBG2pqhQy07Ii","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-curve-left_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationZ';\nconst rotationStep = -90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('Z-');","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"aLuqBG2pqhQy07Ii":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.1IBZFtHrsMw1KIoS"}},"_id":"l2YpdS9Uv3YoBJRs"}
{"name":"Schicksalspunkte Info","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/schpkt_info.svg","scope":"global","command":"new Dialog({\n  title: \"Schicksalspunkte Info\",\n  content:`\n<p>Anzahl der Schicksalspunkte: 2 SchiP + (1 SchiP pro 500 AP)</p>\n<table>\n<thead>\n  <tr>\n    <th>Effekt</th>\n    <th>Kosten</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td>7 Lebenspunkte und eine Wunde spontan heilen</td>\n    <td>1 SchiP</td>\n  </tr>\n  <tr>\n    <td>Zufall, der das eigene Leben gerade so rettet</td>\n    <td>2 SchiP</td>\n  </tr>\n  <tr>\n    <td>Zufall, der das Leben rettet und dem Helden weiterhilft</td>\n    <td>5 Schip</td>\n  </tr>\n  <tr>\n    <td>Eine Probe wiederholen</td>\n    <td>1 SchiP</td>\n  </tr>\n  <tr>\n    <td>Eine Probe noch einmal (und noch einmal) wiederholen</td>\n    <td>2 SchiP (3 SchiP)</td>\n  </tr>\n  <tr>\n    <td>Überlebensgroßer Talentwert/Eigenschaftswert</td>\n    <td>1 SchiP pro 2 TaP/ 1 Eigenschaftspunkt</td>\n  </tr>\n  <tr>\n    <td>Geistesblitz</td>\n    <td>1 SchiP</td>\n  </tr>\n  <tr>\n    <td>Weltgestaltung / Szenenkauf</td>\n    <td>1–5 SchiP</td>\n  </tr>\n</tbody>\n</table>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n      }\n    }\n  }\n},\n{\n   width: 600\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.LM3WpfEY1VyTHOuP"}},"_id":"lDTZ3PSvyjqKyULE"}
{"_id":"lHQ8e7KoDCylVPl1","name":"Fernkampfpatzer","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/criticalfail_rangedcombat.svg","scope":"global","command":"const table = game.tables.find(t => t.data.name === 'Fernkampfpatzer');\ntable.draw();","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{}}
{"name":"Schlechte Eigenschaft","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/disadvantage_roll.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst disadvantages = getDisadvantages(currentActor);\nconst disadvantagesHtml = getDisadvantagesHtml(disadvantages);\n\nnew Dialog({\n  title: \"Schlechte Eigenschaft\",\n  content:`\n    <form>\n\t    <div class=\"form-group\">\n        <label>Eigenschaft</label>\n        <select id=\"attribute\">\n          <option value=\"courage\" selected=\"selected\">MU</option>\n          <option value=\"cleverness\">KL</option>\n          <option value=\"intuition\">IN</option>\n          <option value=\"charisma\">CH</option>\n          <option value=\"dexterity\">FF</option>\n          <option value=\"agility\">GE</option>\n          <option value=\"constitution\">KO</option>\n          <option value=\"strength\">KK</option>\n        </select>\n      </div>\n\t    <div class=\"form-group\">\n        <label>Nachteil</label>\n        <select id=\"disadvantage\">\n          ${disadvantagesHtml}\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Modifikator</label>\n        <input type='number' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll\",\n      callback: async (html) => {\n\t\t    const attribute = html.find('[id=\"attribute\"]').val();\n        const disadvantageName = html.find('[id=\"disadvantage\"]').val();\n        \n        const modResult = html.find('[id=\"modField\"]').val();\n\t\t    let mod = 0;\n\t\t    if(modResult !== '') {\n\t\t\t    mod = Number(modResult);\n\t\t    }\n        const disadvantageValue = Number(disadvantages.find(d => d.data.name === disadvantageName).data.data.value);\n        const attributeValue = getAttributeValue(actor, attribute)\n        const check = {\n          actor: actor,\n          attribute: attribute,\n          attributeValue: attributeValue,\n          disadvantageName: disadvantageName,\n          disadvantageValue: disadvantageValue,\n          mod: mod\n        }\n        \n\t\t    const rollResult = await rollCheck(check);\n\t\t    await createChatMessage(check, rollResult);\n      }\n    }\n  }\n},\n{\n   width: 250\n}).render(true);\n\n\nasync function rollCheck(check){\n  \n  const targetValue = check.attributeValue - check.disadvantageValue + check.mod;  \n  const roll = await new Roll(`1d20`).evaluate();\n  const rollResult = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n\n  return {\n    total: rollResult,\n    targetValue: targetValue,\n    isSuccessfull: rollResult <= targetValue,\n  }\n}\n\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\nfunction getDisadvantages(actor) {\n  if(!actor) {\n    return [];\n  }\n  const items = [...actor.items.values()];\n  return items.filter(i => i.data.type === 'disadvantage' && i.data.data.negativeAttribute === 1)\n}\n\nfunction getDisadvantagesHtml(disadvantages) {\n  if(!disadvantages) {\n    return '';\n  }\n  \n  let html = ''\n  for (item of disadvantages) {\n    html += `<option value=\"${item.data.name}\">${item.data.name}</option>`\n  }\n  \n  return html;\n}\n\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\n\nasync function createChatMessage(check, roll) {\n  let content = `<div style=\"font-weight: bold\">${actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px;\">${check.disadvantageName}(${check.disadvantageValue})</div>`;\n  if(roll.isSuccessfull) {\n    content += `<div style=\"font-weight: bold\">Erfolg (${roll.total})</div>`;\n  } else {\n    content += `<div style=\"font-weight: bold\">Misserfolg (${roll.total})</div>`;\n  }\n  content += `<div>${check.attributeValue - roll.total + check.mod - check.disadvantageValue}</div>`;\n \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.odg52hjPLKceCKhr"}},"_id":"ljQn6Zrwdkk2jHmN"}
{"_id":"nF8GSbQYSqj2SuWG","name":"Trefferpunkte erhalten","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/tp_add.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Trefferpunkte\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl oder Formel</label>\n        <input type='text' id=\"tpField\"></input>\n\t  </div>\n      <div class=\"form-group\">\n\t\t<label>Rüstung</label>\n        <input type='checkbox' id=\"armorField\" checked></input>\n      </div>\n      <div class=\"form-group\">\n        <label>Wunden</label>\n        <input type='checkbox' id=\"woundField\" checked></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n\t\tconst tpField = html.find('[id=\"tpField\"]').val();\n\t\tlet tpValue = 0;\n\t\tif(tpField !== '') {\n\t\t\ttpValue = tpField;\n\t\t}\n\n\t\tconst checkArmor = html.find('[id=\"armorField\"]')[0].checked;\n        const checkWounds = html.find('[id=\"woundField\"]')[0].checked;\n        const hitPointObj = {\n            actor: currentActor,\n            value: tpValue,\n            checkArmor: checkArmor,\n            checkWounds: checkWounds,\n\t\t};\n\t\t\n        const result = await dealHitPoints(hitPointObj);\n\t\tawait createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n//////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\nasync function dealHitPoints(hitPointObj) {\n  let armorRating = 0;\n  if(hitPointObj.checkArmor) {\n    armorRating = getActiveArmorRating(hitPointObj.actor);\n  }\n  \n  const oldLep = getCurrentLep(hitPointObj.actor);\n  const damage = await getDamage(hitPointObj.value, armorRating);\n  await dealDamage(hitPointObj.actor, damage);\n  \n  let wounds = 0;\n  if(hitPointObj.checkWounds) {\n    const woundTreshold = getWoundTreshold(hitPointObj.actor);\n    wounds = getWounds(damage, woundTreshold);\n    await addWounds(hitPointObj.actor, wounds);\n  }\n  \n  return {\n    actor: currentActor,\n    damage: damage,\n    wounds: wounds,\n\toldLep: oldLep,\n    newLep: oldLep - damage,\n  };\n}\n\nfunction getActiveArmorRating(actor) {\n  const passiveArmor = actor.data.data.base.combatAttributes.passive.physicalResistance.value;\n  const armors =  actor.items.filter(i => \n    i.data.type === 'armor' && (\n    i.data.data.equiped === true || \n    i.data.data.equipped === true));\n  \n  let activeArmor = 0;\n  for(const armor of armors) {\n    activeArmor += armor.data.data.armorClass;\n  }\n  \n  return passiveArmor + activeArmor;\n}\n\nfunction getCurrentLep(actor) {\n  return actor.data.data.base.resources['vitality'].value;\n}\n\nasync function getDamage(damageValue, armorRating) {\n  let damage = 0;\n  if(isNaN(damageValue)){\n    damage = await rollDice(damageValue);\n  } else {\n    damage = Number(damageValue);\n  }\n    \n  damage = damage - Number(armorRating);\n  if(damage < 1){\n    return 0;\n  }\n  return damage;\n}\n\nasync function rollDice(formula){\n  const roll = await new Roll(formula).evaluate();\n  let result = roll._total;\n  \n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nasync function dealDamage(actor, damage) {\n  if(damage < 1){\n    return;\n  }\n  \n  const lep = getCurrentLep(actor);\n  actor.update({_id: actor._id, 'data.base.resources.vitality.value': lep - damage});\n}\n\nfunction getWoundTreshold(actor) {\n  const constitution = actor.data.data.base.basicAttributes['constitution'].value;\n  let treshold = Math.round(constitution/2);\n  \n  const eisern = [...actor.items.values()].filter(i => i.data.name === 'Eisern');\n  if(eisern.length > 0) {\n    treshold += 2;\n  }\n  \n  const glasknochen = [...actor.items.values()].filter(i => i.data.name === 'Glasknochen');\n  if(glasknochen.length > 0) {\n    treshold -= 2;\n  }\n  \n  return treshold;\n}\n\nfunction getWounds(damage, treshold) {\n  if(damage < 1){\n    return 0;\n  }\n  return Math.floor(damage / treshold);\n}\n\nasync function addWounds(actor, wounds) {\n  if(wounds < 1){\n    return;\n  }\n  \n  const woundChanges = [{\n    key: \"data.base.combatAttributes.active.baseAttack.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseParry.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseRangedAttack.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseInitiative.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.basicAttributes.agility.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.movement.speed.value\",\n    value: -1,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  }];\n\n  let effectData = {\n    label: \"Wunde\",\n    icon: \"icons/svg/blood.svg\",\n    changes: woundChanges,\n\n    flags: {\n      core: {\n        statusId: \"wound\",\n      },\n    },\n  };\n  \n  let woundArray = [];\n  for (var i = 0; i < wounds; i++) {\n    woundArray.push(effectData);\n  }\n  \n  actor.createEmbeddedDocuments(\"ActiveEffect\", woundArray);\n  \n  return;\n}\n\nasync function createChatMessage(hitPointResult) {\n  let content = `<div>${hitPointResult.actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">Schaden erhalten: ${hitPointResult.damage} (${hitPointResult.oldLep} -> ${hitPointResult.newLep})</div>`;\n  if(hitPointResult.wounds > 0) {\n    if(hitPointResult.wounds === 1) {\n      content += `<div style=\"font-weight: bold\">Eine Wunde wurde verursacht</div>`;\n    } else {\n      content += `<div style=\"font-weight: bold\">${woundHealCount} Wunden wurden verursacht</div>`;\n    }\n  }\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"_id":"nKjfKCyRMhoPlFLH","name":"LeP hinzugewinn","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/lep_add.svg","scope":"global","command":"const currentActor = actor;\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"LeP hinzugewinn\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl oder Formel</label>\n        <input type='text' name='lepField'></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll\",\n      callback: async (html) => {\n\t\tconst lepResult = html.find('input[name=\\'lepField\\']').val();\n\t\tlet lepValue = 0;\n\t\tif(lepResult !== '') {\n\t\t\tlepValue = lepResult;\n\t\t}\n        await regenerate(currentActor, lepValue);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\nasync function regenerate(actor, lepValue){\n  const name = currentActor.data.name;\n  let content = `<div>${name}</div>`\n\n  const lepResultText = await addLep(currentActor, lepValue);\n  const regenContent = lepResultText;\n  if(regenContent) {\n    content += regenContent;\n  } else {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Bereits vollständig regeneriert :)</div>`;\n  }\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\n// LeP functions\nasync function addLep(actor, lepValue){\n  const resource = currentActor.data.data.base.resources['vitality'];\n    if(resource.value >= resource.max) {\n\treturn ['', ''];\n  }\n\n  let lepTotal = 0;\n  if(isNaN(lepValue)){\n    lepTotal = await rollDice(lepValue);\n  } else {\n    lepTotal = Number(lepValue);\n  }\n\n  const regObject = {\n\tresource: resource, \n\ttotal: Number(lepTotal),\n\tstyle: 'margin-top: 20px;'};\n  let [resultText, newLepTotal, regenTotal] = await regenerateResourceAndGetText(regObject, false);\n  \n  const healWoundText  = await tryHealWounds(actor, regenTotal);\n  if(healWoundText != '')\n\t  resultText += healWoundText;\n  \n  actor.update({_id: actor._id, 'data.base.resources.vitality.value': newLepTotal});\n  return resultText;\n}\n\nasync function tryHealWounds(actor, healValue){\n  const healTreshold = 7;\n  if(healValue < healTreshold){\n    return '';\n  }\n  \n  let healLeft = healValue;\n  let woundHealCount = 0; \n  for(let i = 0; healLeft > 0; ){\n    woundHealCount++;\n    healLeft -= 7;\n  }\n  \n  let wounds = actor\n    .getEmbeddedCollection(\"ActiveEffect\")\n    .filter(e => e.data.label == 'Wunde');\n\n  if(!wounds || wounds.length < 1) {\n    return '';\n  }\t\n\n  if(woundHealCount > wounds.length) {\n    woundHealCount = wounds.length;\n  }\n\n  wounds = wounds.slice(0, woundHealCount);\n  const ids = wounds.map(w => w.data._id);\n  await actor.deleteEmbeddedDocuments(\"ActiveEffect\", ids);\n  \n  if(woundHealCount == 1) {\n    return `<div style=\"font-weight: bold\">Eine Wunde wurde geschlossen</div>`;\n  }\n\n  return `<div style=\"font-weight: bold\">${woundHealCount} Wunden wurden geschlossen</div>`;\n}\n\n\n\n// Generic Functions\nasync function rollDice(formula){\n  const roll = await new Roll(formula).evaluate();\n  let result = roll._total;\n  \n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nasync function regenerateResourceAndGetText(obj) {\n  const previousValue = obj.resource.value;\n  const newValue = await regenerateResource(obj);\n    \n  return [`<div style=\"${obj.style} font-weight: bold\">LeP hinzugewinn: ${obj.total} (${previousValue} -> ${newValue})</div>`, newValue, obj.total];\n}\n\nasync function regenerateResource(obj) {\n  console.log(obj);\n  if((obj.resource.value + obj.total) < obj.resource.max){\n\tobj.resource.value += obj.total;\n  } else {\n    obj.resource.value = obj.resource.max;\n  }\n  \n  return obj.resource.value;\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{}}
{"_id":"ppodUVZ4idgUxVaM","name":"Schicksalspunkte nutzen","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/schpkt_sub.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Schicksalspunkte einsetzen\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl</label>\n        <input type='text' id=\"schPktField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n        const schPktField = html.find('[id=\"schPktField\"]').val();\n        let schPktValue = 0;\n        if(schPktField !== '') {\n          schPktValue = schPktField;\n        }\n\n        if(schPktValue <= 0) {\n          return;\n        }\n        \n        const schPktObj = {\n          actor: currentActor,\n          value: schPktValue,\n        };\n        \n        const result = await subtractSchicksalspunkte(schPktObj);\n        await createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n/////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\n\n/////////////////////////////\n//-Schicksalspunkte  Basis-//\n/////////////////////////////\n\nasync function getSchicksalspunkte(actor) {\n  try {\n    const schPkt = actor.data.data.base.resources['schicksalspunkte'].value;\n    return schPkt;\n  } catch {\n    console.log('Creating Schicksalspunkte attribute');\n    \n    const defaultValue = 3;\n    actor.data.data.base.resources['schicksalspunkte'] = {value: defaultValue, min: 0, max: defaultValue};\n  \n    return defaultValue;  \n  }\n}\n\n//Nur Fluff ;)\nasync function throwChips(schPktValue){\n  const formula = `${schPktValue}d2`;\n  const roll = await new Roll(formula).evaluate();\n  \n  game.dice3d.showForRoll(roll);\n}\n\n\nasync function subtractSchicksalspunkte(schPktObj) {\n  const oldSchPkt = await getSchicksalspunkte(schPktObj.actor);\n  const newSchPkt = oldSchPkt - schPktObj.value;\n  if(newSchPkt < 0) {\n    return {\n      actor: schPktObj.actor,\n      oldSchPkt: oldSchPkt,\n      newSchPkt: newSchPkt,\n      insufficentPkt: true,\n    };\n  }\n  \n  await actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.value': newSchPkt});\n  await throwChips(schPktObj.value);\n  \n  return {\n    actor: schPktObj.actor,\n    oldSchPkt: oldSchPkt,\n    newSchPkt: newSchPkt,\n    insufficentPkt: false,\n  };\n}\n\n\n/////////////////////////////\n//------Chat  Message------//\n/////////////////////////////\n\nasync function createChatMessage(schPktResult) {\n  let content = `<div>${schPktResult.actor.name}</div>`;\n  if(!schPktResult.insufficentPkt) {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Schicksalspunkte eingesetzt: ${schPktResult.oldSchPkt} -> ${schPktResult.newSchPkt})</div>`;\n  } else {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Nicht genügend Schicksalspunkte (${schPktResult.oldSchPkt})</div>`;\n  }\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"name":"New Macro","type":"chat","author":"C1tc77zu6CecTMux","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"C1tc77zu6CecTMux":3},"flags":{},"_id":"qQHmOuCbMvflXhHs"}
{"name":"Magieresistenzprobe","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/aura.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst name = currentActor.data.name;\nconst magicResistance = currentActor.data.data.base.combatAttributes.passive.magicResistance.value;\n\nconst roll = await new Roll(`1d20cs<=${magicResistance}`).evaluate();\nconst result = roll.dice[0].results[0].result;\ngame.dice3d.showForRoll(roll); // remove this line if you dont want dice to be shown at all!\nlet content = `<div>${name}</div><div>`\ncontent += `<div>Magieresistenz (${magicResistance})</div><div>`\nif(roll.total) {\n  content += `Erfolg (${result})</div>`;\n}\nelse {\n  content += `Misserfolg (${result})</div>`;\n} \ncontent += `<div>${magicResistance-result}</div>`\nChatMessage.create({content: content});","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"core":{"sourceId":"Macro.7ZFATfYzhP0HeKat"}},"_id":"qWjDxhOmdWgw8Nsq"}
{"name":"Schicksalspunkte nutzen","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/schpkt_sub.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Schicksalspunkte einsetzen\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl</label>\n        <input type='text' id=\"schPktField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n        const schPktField = html.find('[id=\"schPktField\"]').val();\n        let schPktValue = 0;\n        if(schPktField !== '') {\n          schPktValue = schPktField;\n        }\n\n        if(schPktValue <= 0) {\n          return;\n        }\n        \n        const schPktObj = {\n          actor: currentActor,\n          value: schPktValue,\n        };\n        \n        const result = await subtractSchicksalspunkte(schPktObj);\n        await createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n/////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\n\n/////////////////////////////\n//-Schicksalspunkte  Basis-//\n/////////////////////////////\n\nasync function getSchicksalspunkte(actor) {\n  try {\n    const schPkt = actor.data.data.base.resources['schicksalspunkte'].value;\n    return schPkt;\n  } catch {\n    console.log('Creating Schicksalspunkte attribute');\n    \n    const defaultValue = 3;\n    actor.data.data.base.resources['schicksalspunkte'] = {value: defaultValue, min: 0, max: defaultValue};\n  \n    return defaultValue;  \n  }\n}\n\n//Nur Fluff ;)\nasync function throwChips(schPktValue){\n  const formula = `${schPktValue}d2`;\n  const roll = await new Roll(formula).evaluate();\n  \n  game.dice3d.showForRoll(roll);\n}\n\n\nasync function subtractSchicksalspunkte(schPktObj) {\n  const oldSchPkt = await getSchicksalspunkte(schPktObj.actor);\n  const newSchPkt = oldSchPkt - schPktObj.value;\n  if(newSchPkt < 0) {\n    return {\n      actor: schPktObj.actor,\n      oldSchPkt: oldSchPkt,\n      newSchPkt: newSchPkt,\n      insufficentPkt: true,\n    };\n  }\n  \n  await actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.value': newSchPkt});\n  await throwChips(schPktObj.value);\n  \n  return {\n    actor: schPktObj.actor,\n    oldSchPkt: oldSchPkt,\n    newSchPkt: newSchPkt,\n    insufficentPkt: false,\n  };\n}\n\n\n/////////////////////////////\n//------Chat  Message------//\n/////////////////////////////\n\nasync function createChatMessage(schPktResult) {\n  let content = `<div>${schPktResult.actor.name}</div>`;\n  if(!schPktResult.insufficentPkt) {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Schicksalspunkte eingesetzt: ${schPktResult.oldSchPkt} -> ${schPktResult.newSchPkt})</div>`;\n  } else {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Nicht genügend Schicksalspunkte (${schPktResult.oldSchPkt})</div>`;\n  }\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.ppodUVZ4idgUxVaM"}},"_id":"quhFqcw6mEU2Fb96"}
{"name":"Magieresistenzprobe","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/aura.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst name = currentActor.data.name;\nconst magicResistance = currentActor.data.data.base.combatAttributes.passive.magicResistance.value;\n\nconst roll = await new Roll(`1d20cs<=${magicResistance}`).evaluate();\nconst result = roll.dice[0].results[0].result;\ngame.dice3d.showForRoll(roll); // remove this line if you dont want dice to be shown at all!\nlet content = `<div>${name}</div><div>`\ncontent += `<div>Magieresistenz (${magicResistance})</div><div>`\nif(roll.total) {\n  content += `Erfolg (${result})</div>`;\n}\nelse {\n  content += `Misserfolg (${result})</div>`;\n} \ncontent += `<div>${magicResistance-result}</div>`\nChatMessage.create({content: content});","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"core":{"sourceId":"Macro.7ZFATfYzhP0HeKat"}},"_id":"rUqFBLwMCRBfUjWE"}
{"name":"Schlechte Eigenschaft","type":"script","author":"C1tc77zu6CecTMux","img":"icons/svg/disadvantage_roll.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst disadvantages = getDisadvantages(currentActor);\nconst disadvantagesHtml = getDisadvantagesHtml(disadvantages);\n\nnew Dialog({\n  title: \"Schlechte Eigenschaft\",\n  content:`\n    <form>\n\t    <div class=\"form-group\">\n        <label>Eigenschaft</label>\n        <select id=\"attribute\">\n          <option value=\"courage\" selected=\"selected\">MU</option>\n          <option value=\"cleverness\">KL</option>\n          <option value=\"intuition\">IN</option>\n          <option value=\"charisma\">CH</option>\n          <option value=\"dexterity\">FF</option>\n          <option value=\"agility\">GE</option>\n          <option value=\"constitution\">KO</option>\n          <option value=\"strength\">KK</option>\n        </select>\n      </div>\n\t    <div class=\"form-group\">\n        <label>Nachteil</label>\n        <select id=\"disadvantage\">\n          ${disadvantagesHtml}\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Modifikator</label>\n        <input type='number' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll\",\n      callback: async (html) => {\n\t\t    const attribute = html.find('[id=\"attribute\"]').val();\n        const disadvantageName = html.find('[id=\"disadvantage\"]').val();\n        \n        const modResult = html.find('[id=\"modField\"]').val();\n\t\t    let mod = 0;\n\t\t    if(modResult !== '') {\n\t\t\t    mod = Number(modResult);\n\t\t    }\n        const disadvantageValue = Number(disadvantages.find(d => d.data.name === disadvantageName).data.data.value);\n        const attributeValue = getAttributeValue(actor, attribute)\n        const check = {\n          actor: actor,\n          attribute: attribute,\n          attributeValue: attributeValue,\n          disadvantageName: disadvantageName,\n          disadvantageValue: disadvantageValue,\n          mod: mod\n        }\n        \n\t\t    const rollResult = await rollCheck(check);\n\t\t    await createChatMessage(check, rollResult);\n      }\n    }\n  }\n},\n{\n   width: 250\n}).render(true);\n\n\nasync function rollCheck(check){\n  \n  const targetValue = check.attributeValue - check.disadvantageValue + check.mod;  \n  const roll = await new Roll(`1d20`).evaluate();\n  const rollResult = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n\n  return {\n    total: rollResult,\n    targetValue: targetValue,\n    isSuccessfull: rollResult <= targetValue,\n  }\n}\n\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\nfunction getDisadvantages(actor) {\n  if(!actor) {\n    return [];\n  }\n  const items = [...actor.items.values()];\n  return items.filter(i => i.data.type === 'disadvantage' && i.data.data.negativeAttribute === true)\n}\n\nfunction getDisadvantagesHtml(disadvantages) {\n  if(!disadvantages) {\n    return '';\n  }\n  \n  let html = ''\n  for (item of disadvantages) {\n    html += `<option value=\"${item.data.name}\">${item.data.name}</option>`\n  }\n  \n  return html;\n}\n\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\n\nasync function createChatMessage(check, roll) {\n  let content = `<div style=\"font-weight: bold\">${actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px;\">${check.disadvantageName}(${check.disadvantageValue})</div>`;\n  if(roll.isSuccessfull) {\n    content += `<div style=\"font-weight: bold\">Erfolg (${roll.total})</div>`;\n  } else {\n    content += `<div style=\"font-weight: bold\">Misserfolg (${roll.total})</div>`;\n  }\n  content += `<div>${check.attributeValue - roll.total + check.mod - check.disadvantageValue}</div>`;\n \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"C1tc77zu6CecTMux":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.odg52hjPLKceCKhr"}},"_id":"t1kZYtxdQ55beusj"}
{"_id":"twOGFDVYQ11CNRbe","name":"Wunde hinzufügen","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/svg/wound_add.svg","scope":"global","command":"const woundChanges = [\n  {\n    key: \"data.base.combatAttributes.active.baseAttack.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseParry.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseRangedAttack.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.combatAttributes.active.baseInitiative.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.basicAttributes.agility.value\",\n    value: -2,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n  {\n    key: \"data.base.movement.speed.value\",\n    value: -1,\n    mode: CONST.ACTIVE_EFFECT_MODES.ADD,\n  },\n];\n\nlet effectData = {\n  label: \"Wunde\",\n  icon: \"icons/svg/blood.svg\",\n  changes: woundChanges,\n\n  flags: {\n    core: {\n      statusId: \"wound\",\n    },\n  },\n};\n\nlet currentActor = getActor();\ncurrentActor.createEmbeddedDocuments(\n  \"ActiveEffect\", \n  [effectData]);\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{}}
{"name":"Etage runter","type":"script","author":"aLuqBG2pqhQy07Ii","img":"icons/svg/down.svg","scope":"global","command":"const tokens = canvas.tokens.controlled.filter( t => \n  t.data.name === 'Körperlose Gestalt' &&\n  token.data.elevation > -10\n);\n\nconst updates = tokens.map(\nfunction (token) {\n  return ({_id: token.id,elevation: token.data.elevation - 20})\n})\n\nawait canvas.scene.updateEmbeddedDocuments(\"Token\", updates)","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"aLuqBG2pqhQy07Ii":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.WPUwE8DEspjxfa8J"}},"_id":"uMPBDTA16ftaqZLa"}
{"name":"New Macro","type":"chat","author":"aLuqBG2pqhQy07Ii","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"aLuqBG2pqhQy07Ii":3},"flags":{},"_id":"vJXmg8hlKUXUBAQb"}
{"name":"Schicksalspunkte setzen","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/schpkt_set.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Schicksalspunkte setzen\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Anzahl</label>\n        <input type='text' id=\"schPktField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"OK\",\n      callback: async (html) => {\n        const schPktField = html.find('[id=\"schPktField\"]').val();\n        let schPktValue = 0;\n        if(schPktField !== '') {\n          schPktValue = schPktField;\n        }\n\n        if(schPktValue < 0) {\n          return;\n        }\n        \n        const schPktObj = {\n          actor: currentActor,\n          value: schPktValue,\n        };\n        \n        const result = await setSchicksalspunkte(schPktObj);\n        await createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 350\n}).render(true);\n\n\n/////////////////////////////\n//--------Functions--------//\n/////////////////////////////\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\n\n/////////////////////////////\n//-Schicksalspunkte  Basis-//\n/////////////////////////////\n\nasync function getSchicksalspunkte(actor, defaultValue) {\n  try {\n    const schPkt = actor.data.data.base.resources['schicksalspunkte'].value;\n    return schPkt;\n  } catch {\n    console.log('Creating Schicksalspunkte attribute');\n    \n    actor.data.data.base.resources['schicksalspunkte'] = {value: defaultValue, min: 0, max: defaultValue};\n  \n    return defaultValue;  \n  }\n}\n\nasync function setSchicksalspunkte(schPktObj) {\n  await getSchicksalspunkte(schPktObj.actor, schPktObj.value);\n  \n  await actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.value': schPktObj.value});\n  await actor.update({_id: actor._id, 'data.base.resources.schicksalspunkte.max': schPktObj.value});\n  \n  return {\n    actor: schPktObj.actor,\n    newSchPkt: schPktObj.value,\n  };\n}\n\n\n/////////////////////////////\n//------Chat  Message------//\n/////////////////////////////\n\nasync function createChatMessage(schPktResult) {\n  let content = `<div>${schPktResult.actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">Schicksalspunkte gesetzt: ${schPktResult.newSchPkt})</div>`;\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.Z8kXu0uzhVnrvYE8"}},"_id":"wLmx330jYF7gjj9A"}
{"name":"Schlechte Eigenschaft","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/disadvantage_roll.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst disadvantages = getDisadvantages(currentActor);\nconst disadvantagesHtml = getDisadvantagesHtml(disadvantages);\n\nnew Dialog({\n  title: \"Schlechte Eigenschaft\",\n  content:`\n    <form>\n\t    <div class=\"form-group\">\n        <label>Eigenschaft</label>\n        <select id=\"attribute\">\n          <option value=\"courage\" selected=\"selected\">MU</option>\n          <option value=\"cleverness\">KL</option>\n          <option value=\"intuition\">IN</option>\n          <option value=\"charisma\">CH</option>\n          <option value=\"dexterity\">FF</option>\n          <option value=\"agility\">GE</option>\n          <option value=\"constitution\">KO</option>\n          <option value=\"strength\">KK</option>\n        </select>\n      </div>\n\t    <div class=\"form-group\">\n        <label>Nachteil</label>\n        <select id=\"disadvantage\">\n          ${disadvantagesHtml}\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Modifikator</label>\n        <input type='number' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll\",\n      callback: async (html) => {\n\t\t    const attribute = html.find('[id=\"attribute\"]').val();\n        const disadvantageName = html.find('[id=\"disadvantage\"]').val();\n        \n        const modResult = html.find('[id=\"modField\"]').val();\n\t\t    let mod = 0;\n\t\t    if(modResult !== '') {\n\t\t\t    mod = Number(modResult);\n\t\t    }\n        const disadvantageValue = Number(disadvantages.find(d => d.data.name === disadvantageName).data.data.value);\n        const attributeValue = getAttributeValue(actor, attribute)\n        const check = {\n          actor: actor,\n          attribute: attribute,\n          attributeValue: attributeValue,\n          disadvantageName: disadvantageName,\n          disadvantageValue: disadvantageValue,\n          mod: mod\n        }\n        \n\t\t    const rollResult = await rollCheck(check);\n\t\t    await createChatMessage(check, rollResult);\n      }\n    }\n  }\n},\n{\n   width: 250\n}).render(true);\n\n\nasync function rollCheck(check){\n  \n  const targetValue = check.attributeValue - check.disadvantageValue + check.mod;  \n  const roll = await new Roll(`1d20`).evaluate();\n  const rollResult = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n\n  return {\n    total: rollResult,\n    targetValue: targetValue,\n    isSuccessfull: rollResult <= targetValue,\n  }\n}\n\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\nfunction getDisadvantages(actor) {\n  if(!actor) {\n    return [];\n  }\n  const items = [...actor.items.values()];\n  return items.filter(i => i.data.type === 'disadvantage' && i.data.data.negativeAttribute === true)\n}\n\nfunction getDisadvantagesHtml(disadvantages) {\n  if(!disadvantages) {\n    return '';\n  }\n  \n  let html = ''\n  for (item of disadvantages) {\n    html += `<option value=\"${item.data.name}\">${item.data.name}</option>`\n  }\n  \n  return html;\n}\n\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\n\nasync function createChatMessage(check, roll) {\n  let content = `<div style=\"font-weight: bold\">${actor.name}</div>`;\n  content += `<div style=\"margin-top: 20px;\">${check.disadvantageName}(${check.disadvantageValue})</div>`;\n  if(roll.isSuccessfull) {\n    content += `<div style=\"font-weight: bold\">Erfolg (${roll.total})</div>`;\n  } else {\n    content += `<div style=\"font-weight: bold\">Misserfolg (${roll.total})</div>`;\n  }\n  content += `<div>${check.attributeValue - roll.total + check.mod - check.disadvantageValue}</div>`;\n \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.odg52hjPLKceCKhr"}},"_id":"wMWitCyYHFKwBnpB"}
{"name":"Regeneration","type":"script","author":"YlqspvRz6sU17MVo","img":"icons/svg/regen.svg","scope":"global","command":"let currentActor = getActor();\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nnew Dialog({\n  title: \"Regeneration\",\n  content:`\n    <form>\n      <div class=\"form-group\">\n        <label>Modifikator</label>\n        <input type='number' id=\"modField\"></input>\n      </div>\n    </form>`,\n  buttons: {\n    roll: {\n      label: \"Roll\",\n      callback: async (html) => {\n\t\tconst modResult = html.find('[id=\"modField\"]').val();\n\t\tlet mod = 0;\n\t\tif(modResult !== '') {\n\t\t\tmod = Number(modResult);\n\t\t}\n        \n\t\tconst result = await regenerate(currentActor, mod);\n\t\tawait createChatMessage(result);\n      }\n    }\n  }\n},\n{\n   width: 250\n}).render(true);\n\n\nasync function regenerate(actor, mod){\n  const lepResult = await regenerateLep(currentActor, mod);\n  const auResult = await regenerateAu(currentActor);\n  const aspResult = await regenerateAsp(currentActor, mod);\n\n  return {\n\tactor: actor,\n\tmod: mod,\n    lep: lepResult,\n    au: auResult,\n    asp: aspResult,\n  }\n}\n\n\n////////////////////////////////////\n//-----------Functions------------//\n////////////////////////////////////\n//--------LeP Regeneration--------//\n////////////////////////////////////\nasync function regenerateLep(actor, mod){\n  const resource = actor.data.data.base.resources['vitality'];\n  if(resource.value >= resource.max) {\n    return undefined;\n  }\n\n  const bonusResult = await getLepBonus(actor);\n  const regObject = {\n\tresource: resource, \n\tmod: Number(mod) + Number(bonusResult.mod),\n  };\n  const resourceResult = await regenerateResource(regObject, false); \n  const healedWounds = await tryHealWounds(actor, resourceResult.total);\n  \n  await actor.update({_id: actor._id, 'data.base.resources.vitality.value': resourceResult.newValue});\n  return {\n    bonus: bonusResult,\n\tresource: resourceResult,\n\thealedWounds: healedWounds,\n  }\n}\n\nasync function getLepBonus(actor) {\n  let mod = 0;\n  const attributeValue = getAttributeValue(actor, 'constitution')\n  const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n  if(isSuccessfull) {\n    mod += 1;\n  }\n  \n  mod += getVitalitySpecialAbilitiesMod(actor);\n  return {\n\tmod: mod,\n    attributeValue: attributeValue,\n   \trollResult: rollResult,\n    isRollSuccessfull: isSuccessfull\n  };\n}\n\nfunction getVitalitySpecialAbilitiesMod(actor){\n  const items = [...actor.items.values()];\n  let mod = 0;\n \n  const schnelleHeilung = items.filter(i => i.data.name === 'Schnelle Heilung');\n  if(schnelleHeilung.length > 0){\n    mod += schnelleHeilung[0].data.value;\n  }\n \n  if(items.filter(i => i.data.name === 'Schlechte Regeneration').length > 0){\n    mod -= 1;\n  }\n\n  return mod;\n}\n\nasync function tryHealWounds(actor, healValue){\n  const healTreshold = 7;\n  if(healValue < healTreshold){\n    return 0;\n  }\n  \n  let woundHealCount = Math.floor(healValue / healTreshold);  \n  let wounds = actor\n    .getEmbeddedCollection(\"ActiveEffect\")\n    .filter(e => e.data.label == 'Wunde');\n\n  if(!wounds || wounds.length < 1) {\n    return 0;\n  }\t\n\n  if(woundHealCount > wounds.length) {\n    woundHealCount = wounds.length;\n  }\n\n  wounds = wounds.slice(0, woundHealCount);\n  const ids = wounds.map(w => w.data._id);\n  await actor.deleteEmbeddedDocuments(\"ActiveEffect\", ids);\n  \n  return woundHealCount;\n}\n\n\n////////////////////////////////////\n//--------AU Regeneration---------//\n////////////////////////////////////\nasync function regenerateAu(actor){\n  const resource = actor.data.data.base.resources['endurance'];\n  if(resource.value >= resource.max) {\n    return undefined;\n  }\n\n  const regObject = {\n\tresource: resource, \n\tmod: 0,\n  };\n  const resourceResult = await regenerateResource(regObject, true); \n  \n  await actor.update({_id: actor._id, 'data.base.resources.endurance.value': resourceResult.newValue});\n  return {\n    bonus: undefined,\n\tresource: resourceResult,\n\thealedWounds: 0,\n  }\n}\n\n\n////////////////////////////////////\n//--------AsP Regeneration--------//\n////////////////////////////////////\nasync function regenerateAsp(actor, mod){\n  const resource = actor.data.data.base.resources['astralEnergy'];\n  if(resource.value >= resource.max) {\n    return undefined;\n  }\n\n  const bonusResult = await getAspBonus(actor);\n  const regObject = {\n\tresource: resource, \n\tmod: Number(mod) + Number(bonusResult.mod),\n  };\n  \n  let resourceResult\n  if(hasMeisterlicheRegeneration(actor)) {\n    resourceResult = await meisterlicheRegeneration(actor, regObject);\n  } else {\n    resourceResult = await regenerateResource(regObject, false); \n  }\n\n  await actor.update({_id: actor._id, 'data.base.resources.astralEnergy.value': resourceResult.newValue});\n  return {\n    bonus: bonusResult,\n\tresource: resourceResult,\n\thealedWounds: 0,\n  }\n}\n\nasync function getAspBonus(actor) {\n  let mod = 0;\n  const attributeValue = getAttributeValue(actor, 'intuition')\n  const [rollResult, isSuccessfull] = await isAttributeBonusSuccessfull(attributeValue);\n  if(isSuccessfull) {\n    mod += 1;\n  }\n  mod += getAstralSpecialAbilitiesMod(actor);\n\n  return {\n\tmod: mod,\n    attributeValue: attributeValue,\n   \trollResult: rollResult,\n    isRollSuccessfull: isSuccessfull\n  };\n}\n\nfunction getAstralSpecialAbilitiesMod(actor){\n  const items = [...actor.items.values()];\n  let mod = 0;\n \n  const astraRegeneration = items.filter(i => i.data.name === 'Astrale Regeneration');\n  if(astraRegeneration.length > 0){\n    mod += astraRegeneration[0].data.value;\n  }\n \n  if(items.filter(i => i.data.name === 'Regeneration I').length > 0){\n    mod += 1;\n  }\n\n  if(items.filter(i => i.data.name === 'Regeneration II').length > 0){\n    mod += 1;\n  }\n\n  if(items.filter(i => i.data.name === 'Meisterliche Regeneration').length > 0){\n    mod += 1;\n  }\n\n  if(items.filter(i => i.data.name === 'Astraler Block').length > 0){\n    mod -= 1;\n  }\n\n  return mod;\n}\n\nfunction hasMeisterlicheRegeneration(actor){\n  const items = [...actor.items.values()];\n  if(items.filter(i => i.data.name === 'Meisterliche Regeneration').length > 0){\n    return true;\n  }\n  \n  return false;\n}\n\nasync function meisterlicheRegeneration(actor, obj) {\n  const attributeValue = getAttributeValue(actor, 'intuition')\n  const total = Math.round(attributeValue / 3) + obj.mod;\n  \n  const previousValue = obj.resource.value;\n  const newValue = await getNewResourceValue(obj, total);\n\n  return {\n\ttotal: total,\n    oldValue: previousValue,\n\tnewValue: newValue,\n\tsetFull: false,\n  };\n}\n\n\n////////////////////////////////////\n//-------General Functions--------//\n////////////////////////////////////\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}\n\n\nasync function rollD6(){\n  const roll = await new Roll(`1d6`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getAttributeValue(actor, attributeName) {\n  return actor.data.data.base.basicAttributes[attributeName].value\n}\n\nasync function isAttributeBonusSuccessfull(attributeValue) {\n  const roll = await new Roll(`1d20cs<=${attributeValue}`).evaluate();\n  const result = roll.dice[0].results[0].result;\n  game.dice3d.showForRoll(roll);\n  \n  return [result, roll.total];\n}\n\nasync function regenerateResource(obj, setFull) {\n  let total = 0;\n  if(setFull) {\n    total = 10000;\n  } else {\n    total = (await rollD6()) + obj.mod;\n  }\n\n  const previousValue = obj.resource.value;\n  const newValue = await getNewResourceValue(obj, total);\n\n  return {\n\ttotal: total,\n    oldValue: previousValue,\n\tnewValue: newValue,\n\tsetFull: setFull\n  };\n}\n\nasync function getNewResourceValue(obj, value) {\n  if((obj.resource.value + value) < obj.resource.max){\n    return obj.resource.value + value;\n  }\n  \n  return obj.resource.max;\n}\n\nasync function createChatMessage(result) {\n  let content = `<div style=\"font-weight: bold\">${result.actor.name}</div>`;\n  if(result.lep) {\n   const bonus = result.lep.bonus;\n   const bonusResultText = bonus.isRollSuccessfull === 1 ? '' : 'nicht';\n   content += `<div>KO-Probe war ${bonusResultText}erfolgreich (${bonus.attributeValue - bonus.rollResult})</div>`;\n  }\n  \n  if(result.asp) {\n   const bonus = result.asp.bonus;\n   const bonusResultText = bonus.isRollSuccessfull === 1 ? '' : 'nicht';\n   content += `<div>IN-Probe war ${bonusResultText} erfolgreich (${bonus.attributeValue - bonus.rollResult})</div>`;\n  }\n  \n  if(result.lep) {\n   const resource = result.lep.resource;\n   content += `<div style=\"margin-top: 20px; font-weight: bold\">LeP regeneriert: ${resource.total} (${resource.oldValue} -> ${resource.newValue})</div>`;\n  }\n  \n  if(result.au) {\n   const resource = result.au.resource;\n   content += `<div style=\"font-weight: bold\">AU regeneriert (${resource.oldValue} -> ${resource.newValue})</div>`;\n  }\n  \n  if(result.asp) {\n   const resource = result.asp.resource;\n   content += `<div style=\"font-weight: bold\">AsP regeneriert: ${resource.total} (${resource.oldValue} -> ${resource.newValue})</div>`;\n  }\n  \n  if(result.lep) {\n\tconst wounds = result.lep.healedWounds;\n    if(wounds > 0) {\n      if(wounds === 1) {\n        content += `<div style=\"font-weight: bold\">Eine Wunde wurde geschlossen</div>`;\n      } else {\n        content += `<div style=\"font-weight: bold\">${wounds} Wunden wurden geschlossen</div>`;\n      }\n    }\n  }\n  \n  if(!result.lep && !result.au && !result.asp) {\n    content += `<div style=\"margin-top: 20px; font-weight: bold\">Bereits vollständig regeneriert :)</div>`;\n  }\n  \n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"YlqspvRz6sU17MVo":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.6qhiO18RUYdiqnZC"}},"_id":"wXXBbxk0RdEiejV0"}
{"name":"Würfel rotieren: ↓ (Z)","type":"script","author":"aLuqBG2pqhQy07Ii","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-curve-left_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationZ';\nconst rotationStep = -90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('Z-');","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"aLuqBG2pqhQy07Ii":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.1IBZFtHrsMw1KIoS"}},"_id":"x8ooTVAhCI07JQXF"}
{"_id":"yGPbE7KmiMk3RD2R","name":"Bruchfaktor (Primärhand)","type":"script","author":"4iG9cHcL1pAPAzDk","img":"icons/broken-sword.svg","scope":"global","command":"let currentActor = getActor();\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst combatState = currentActor.combatState\nif(!combatState.isArmed){\n  console.log('Abort, Actor is unarmed');\n  return;\n}\n\nawait breakTest(currentActor);\n\n// Functions\nasync function breakTest(actor){\n  const name = currentActor.data.name;\n  let content = `<div>${name}</div>`\n\n  const item = combatState.primaryHand.item.data;\n  content += `<div>${item.name}</div>`;\n  const breakTestText = await checkBreak(item);\n  content += `<div style=\"margin-top: 20px; font-weight: bold\">${breakTestText}</div>`;\n\n  ChatMessage.create({\n    user : game.user._id,\n    content: content,\n  });\n}\n\nasync function checkBreak(item){\n  const rollResult = await rollD6();\n  console.log(rollResult);\n  if(rollResult > item.data.breakingFactor){\n    item.data.breakingFactor += 1;\n    return `Bruchfaktor des Gegenstands ist gestiegen (${rollResult})`;\n  }\n  \n  item.data.breakingFactor = 99;\n  const brokenSuffix = ' (zerstört)';\n  if(!item.name.includes(brokenSuffix)){\n    item.name += brokenSuffix ;\n  }\n  return `Gegenstand ist zerbrochen! (${rollResult})`;\n}\n\nasync function rollD6(){\n  const roll = await new Roll(`2d6`).evaluate();\n  let result = roll.dice[0].results[0].result;\n  result += roll.dice[0].results[1].result;\n  game.dice3d.showForRoll(roll);\n  \n  return result;\n}\n\nfunction getActor() {\n  if(actor) {\n    return actor;\n  }\n   \n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return undefined;\n  }\n  return token.actor\n}","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
{"name":"Magieresistenzprobe","type":"script","author":"llLOJOQw8eeTLl9B","img":"icons/svg/aura.svg","scope":"global","command":"let currentActor = actor;\n\nif(!currentActor) {\n  console.log('No actor found, fallback to selected token');\n  const token = canvas.tokens.controlled[0];\n\n  if(!token) {\n    console.log('Abort, no Actor found');\n    return;\n  }\n  currentActor = token.actor\n}\n\nif(!currentActor) {\n  console.log('Abort, no Actor found');\n  return;\n}\n\nconst name = currentActor.data.name;\nconst magicResistance = currentActor.data.data.base.combatAttributes.passive.magicResistance.value;\n\nconst roll = await new Roll(`1d20cs<=${magicResistance}`).evaluate();\nconst result = roll.dice[0].results[0].result;\ngame.dice3d.showForRoll(roll); // remove this line if you dont want dice to be shown at all!\nlet content = `<div>${name}</div><div>`\ncontent += `<div>Magieresistenz (${magicResistance})</div><div>`\nif(roll.total) {\n  content += `Erfolg (${result})</div>`;\n}\nelse {\n  content += `Misserfolg (${result})</div>`;\n} \ncontent += `<div>${magicResistance-result}</div>`\nChatMessage.create({content: content});","folder":null,"sort":0,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3,"llLOJOQw8eeTLl9B":3},"flags":{"core":{"sourceId":"Macro.7ZFATfYzhP0HeKat"}},"_id":"yLjc0H8WiLn2HoD2"}
{"_id":"ycB48DZSiqISGqOw","name":"Würfel rotieren: Y↓","type":"script","author":"4iG9cHcL1pAPAzDk","img":"das_schwarze_auge/01_abenteuer/Das%20Erbe%20der%20Mercatis/wuerfel/icons/arrow-left_white.svg","scope":"global","command":"if(!game.Levels3DPreview._active) return;\n\nconst token = canvas.tokens.controlled[0];\nif(!token)return;\n\nconst flag = 'rotationY';\nconst rotationStep = 90;\n\nconst tokenRot = token.document.getFlag(\"levels-3d-preview\", flag);\nconst rotation = tokenRot + rotationStep;\ntoken.document.setFlag(\"levels-3d-preview\", flag, rotation);\n\nConsole.log('Y-');","folder":"H9tUqbcCUC0lQyzF","sort":87500,"permission":{"default":0,"4iG9cHcL1pAPAzDk":3},"flags":{"combat-utility-belt":{"macroTrigger":""}}}
